function [out,out2]=propertypage(obj,action,varargin)
%PROPERTYPAGE   Generate an editing page for this constraint
%
%  LYT=PROPERTYPAGE(OBJ,'CREATE',FIG,PTR,MDL,FACTORS)
%  [OK,MSG]= PROPERTYPAGE(OBJ,'FINALISE',LYT)
%

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.

%  $Revision: 1.5.6.1 $    $Date: 2004/02/09 06:55:52 $

switch lower(action)
    case 'create'
        out=i_createlyt(varargin{:});
        out2=[];
    case 'finalise'
        [out,out2]=i_finalise(varargin{:});
end
return



function lyt=i_createlyt(fig,ptr,mdl,fact)


infoptr = xregGui.RunTimePointer;
infoptr.LinkToObject(fig);

txt=xreguicontrol('parent',fig,...
    'hittest','off',...
    'enable','inactive',...
    'visible','off',...
    'style','text',...
    'string','Available models:',...
    'horizontalalignment','left');
P=getparams(ptr.info);

cgh = cgbrowser;
proj = cgh.RootNode;
nodes = filterbytype(proj.info,cgtypes.cgmodeltype);
modelptrs = null(xregpointer, size(nodes));
modelnames = cell(size(nodes));
for i =1: length(nodes)
    modelptrs(i) = getdata(nodes{i});
    modelnames{i} = name(nodes{i});
end

if ~isempty(P.modptr)
    index = find(strcmp(P.modptr.getname, modelnames));
else
    index = 1;
end
modptrctrl=xreguicontrol('parent',fig,...
    'visible','off',... 
    'style','listbox',...
    'backgroundcolor',[1 1 1],...
    'string', modelnames,...
    'value', index, ...
    'callback', {@i_selmodel, infoptr});
txt2=xreguicontrol('parent',fig,...
    'hittest','off',...
    'enable','inactive',...
    'visible','off',...
    'style','text',...
    'string','Constraint type and bound:',...
    'horizontalalignment','left');
boundctrl= xregGui.clickedit('parent',fig,...
    'visible','off',...
    'value', P.bound);
bound_typectrl= xreguicontrol('parent',fig,...
    'visible','off',...
    'style','popupmenu',...
    'string',{'<=', '>='},...
    'backgroundcolor',[1 1 1],...
    'value', P.bound_type + 1);
seltxt=xreguicontrol('parent',fig,...
    'hittest','off',...
    'enable','inactive',...
    'visible','off',...
    'style','text',...
    'string','Selected model:',...
    'horizontalalignment','left');
txt3 = xreguicontrol('parent',fig,...
    'hittest','off',...
    'enable','inactive',...
    'visible','off',...
    'style','text',...
    'string','Model feature to use:',...
    'horizontalalignment','left');
evaltype = xregGui.rbgroup('parent', fig, ...
    'visible', 'off', ...
    'nx', 1, ...
    'ny', 3, ...
    'string', {'Model value'; 'Model prediction error variance'; 'Model''s boundary constraint'}, ...
    'callback', {@i_seltype, infoptr});
evaltype.selected = P.evaltype+1;

ud.modelptrs = modelptrs;
ud.modptrctrl = modptrctrl;
ud.boundtext = handle(txt2);
ud.boundctrl= boundctrl;
ud.bound_typectrl= handle(bound_typectrl);
ud.seltext = seltxt;
ud.evaltype = evaltype;

ud.ptr=ptr;
infoptr.info = ud;
lyt = xreggridbaglayout(fig,...
    'packstatus','off', ...
    'dimension',[7 6],...
    'colsizes',[200 0 0 40 60 -1],...
    'rowsizes',[15 57 0 15 20 -1 15],...
    'border',[0 0 0 5],...
    'gapx', 5, ...
    'gapy', 5, ...
    'mergeblock',{[2 6],[1 1]}, ...
    'mergeblock',{[1 1],[4 6]}, ...
    'mergeblock',{[2 2],[4 6]}, ...
    'mergeblock',{[4 4],[4 6]}, ...
    'mergeblock',{[7 7],[1 6]}, ...
    'elements',{txt, modptrctrl, [], [], [], [], seltxt, ...
            [], [], [], [], [], [], [], ...
            [], [], [], [], [], [], [], ...
            txt3, evaltype, [], txt2, bound_typectrl, [], [], ...
            [], [], [], [], boundctrl},...
    'userdata', infoptr);

i_selmodel(modptrctrl, [], infoptr);
return


function [ok,msg]=i_finalise(lyt)
infoptr = get(lyt,'userdata');
ud = infoptr.info;

if ~isempty(ud.modelptrs)
    index  = get(ud.modptrctrl, 'value');
    modptr = ud.modelptrs(index);
    bound = get(ud.boundctrl, 'value');
    bound_type = get(ud.bound_typectrl, 'value');
    evaltype = get(ud.evaltype, 'selected');
    
    [c,msg]=setparams(ud.ptr.info,'modptr', modptr, ...
        'bound', bound, ...
        'bound_type', bound_type-1, ...
        'evaltype', evaltype-1);
    
    ud.ptr.info=c;
else
    msg = {'There are no models in the session'};
end
delete(infoptr);
ok= isempty(msg);
return


function i_selmodel(src, evt, udh)
ud = udh.info;
str = get(src, 'string');
val = get(src, 'value');
if ~isempty(str)
    if val>0
        set(ud.seltext, 'string', sprintf('Selected model: %s', str{val}));
    end
end
if val>0
    % Check which options are allowed for this model
    enable = [true; false; false];
    if ud.modelptrs(val).pevcheck
        enable(2) = true;
    end
    if ud.modelptrs(val).concheck
        enable(3) = true;
    end
    set(ud.evaltype, 'enablearray', enable);
    evaltype = get(ud.evaltype, 'selected');
    if ~enable(evaltype)
        % switch to option 1
        set(ud.evaltype, 'selected', 1);
        i_seltype(ud.evaltype, [], udh)
    end
end



function i_seltype(src, evt, udh)
ud = udh.info;
if get(src, 'selected')==3
    sc = xregGui.SystemColorsDbl;
    set([ud.boundtext;ud.boundctrl;ud.bound_typectrl], 'enable', 'off');
    set([ud.boundctrl;ud.bound_typectrl], 'backgroundcolor', sc.CTRL_BACK);
else
    set([ud.boundtext;ud.boundctrl;ud.bound_typectrl], 'enable', 'on');
    set([ud.boundctrl;ud.bound_typectrl], 'backgroundcolor', [1 1 1]);
end