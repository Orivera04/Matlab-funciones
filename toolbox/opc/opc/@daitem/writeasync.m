function s = writeasync(obj, values)
%WRITEASYNC Asynchronously write values to group or items.
%   TransID = WRITEASYNC(GObj,Values) and 
%   TransID = WRITEASYNC(IObj,Values) asynchronously writes values to all
%   the items contained in the dagroup object GObj or to the vector of
%   daitem objects specified by IObj. Values is a cell array of values the
%   same size as the number of items in GObj or IObj. TransID is a unique
%   transaction ID for the asynchronous request.
%
%   To ensure that a specific value is written to the correct item object,
%   you should construct the Values cell array based on the order of the
%   items returned by the Item property. Because the values are written to
%   the device, this operation might be time consuming.
%
%   The data types of the values do not need to match the canonical data
%   type of the associated items. If a data type conversion cannot be
%   performed a warning is issued.
%
%   When the asynchronous write operation completes, a WriteAsync event is
%   generated by the server. If an M-file callback function is specified
%   for the WriteAsyncFcn property, then the function executes when the
%   event is generated.
%
%   Examples
%       da = opcda('localhost', 'Matrikon.OPC.Simulation');
%       connect(da);
%       grp = addgroup(da, 'ExWrite');
%       itm = additem(grp, {'Bucket Brigade.Real8', 'Bucket Brigade.String'});
%       grp.WriteAsyncFcn = 'r=read(grp,''device'')';
%       writeasync(grp, {123.456, 'MATLAB is great!'})
%
%   See also DAGROUP/CANCELASYNC, DAGROUP/READ, DAGROUP/READASYNC, 
%            DAGROUP/REFRESH, DAGROUP/WRITE.

% Copyright 2003-2004 OPTI-NUM solutions (Pty) Ltd.
% $Revision: 1.1.6.7 $  $Date: 2004/02/01 22:06:47 $

% Validity check
I = isvalid(obj);
if all(~I)
    rethrow(mkerrstruct('opc:writeasync:objinvalid'));
elseif any(~I)
    warning('opc:writeasync:objinvalid','WRITEASYNC has not been applied to the invalid daitem objects.')
end

% Find valid objects
uddHandle = getudd(obj);
uddValid = uddHandle(I);

% Item must be part of a connected object
if ~strcmpi(get(get(uddValid(1).Parent,'Parent'),'Status'),'connected')
   rethrow(mkerrstruct('opc:writeasync:parentdisconnected'));
end

% Values must be a cell array or must be one item
if ~iscell(values) && length(obj)>1,
    rethrow(mkerrstruct('opc:writeasync:itmvaluescell'));
end
if ~iscell(values),
    values = {values};
end
if length(values)~=length(obj),
    rethrow(mkerrstruct('opc:writeasync:itmvalueslength'));
end

% Perform the write
try
    s = udwriteasync(uddValid, values(I));
catch
    rethrow(mkerrstruct(lasterror));
end
