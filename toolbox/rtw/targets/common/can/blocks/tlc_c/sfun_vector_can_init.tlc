%% File: sfun_vector_can_init.tlc
%%
%% Abstract:
%%   
%%
%% $Revision: 1.11.6.2 $
%% $Date: 2004/04/19 01:20:10 $
%%
%% Copyright 2001-2003 The MathWorks, Inc.

%implements sfun_vector_can_init "C"

%include "vector_canincludes.tlc"

%function BlockTypeSetup(block, system) void
%% only generate code for GRT / ERT targets 
%% generating code for Standalone --> include header for printf, if running on Windows
%if FEVAL("vector_code_generation", CompiledModel.Name)
   %openfile buffer
         #define RTWprintf printf
   %closefile buffer
   %<LibCacheDefine(buffer)>
   %openfile buffer
      /* include stdlib.h for exit */
      #include <stdlib.h>
      #include <stdio.h>
      /* also include vector_can_library API */
      #include "vector_can_library_exports.h"
   %closefile buffer
   %<LibCacheIncludes(buffer)>
   %assign proto = "static void handleVectorError(ErrorStatus errorStatus)"
   %openfile buffer
      %<proto> {
         switch (errorStatus.library_error_code) {
            case LIBRARY_SUCCESS:
               /* no error */
               return;
            default:
               printf("Error occurred during call to Vector CAN Library. Terminating program.\n");
               exit(1);
         }
      }
   %closefile buffer
   %<LibRegFileCustomCode(buffer,"trailer")>
   %<LibCacheFunctionPrototype("%<proto>;")>
%endif
%endfunction

%function BlockInstanceData(block, system) Output
%endfunction

%function Start(block,system) Output
%openfile mainbuffer
   %% create the comment used to indicate that these blocks do not support Code Generation
   %openfile buffer
"\n*** WARNING ***\nThe blocks in the CAN Drivers (Vector) library do not support Code Generation.\nNo code for these blocks will appear in the generated code.\n\n"
   %closefile buffer
   
   %if FEVAL("vector_code_generation", CompiledModel.Name)
      %% only generate code for GRT / ERT targets
      %with SFcnParamSettings
         {
            int init_access_granted;
            /* set the bit timing for the channel */
            handleVectorError(LibrarySetBitTiming(%<CHANNEL_PARAM>, %<PRESC>, %<SJW>, %<TSEG1>, %<TSEG2>, %<SAM>));
            /* create the write port to be shared by all transmit blocks */
            handleVectorError(LibraryCreateMasterPort(%<CHANNEL_PARAM>,
                                    "%<ID_STRING>", 
                                    &init_access_granted));
         }
      %endwith
   %endif

   %%#ifdef WIN32_SIMULATION
   %%   RTWprintf(%<buffer>);
   %%#endif 
%closefile mainbuffer
%<LibMdlStartCustomCode(mainbuffer, "execution")>
%endfunction

%% Dummy function for block sfun_vector_can_init so that no code is generated
%% at build time
%function Outputs(block,system) Output
%endfunction
