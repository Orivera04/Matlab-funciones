function varargout = ftsfilemenu(varargin)
%FTSFILEMENU  The File menu item of FTS GUI.
%
%   FTSFILEMENU generates the File menu item of the
%   financial time series GUI, ftsgui.  Please start the GUI 
%   from the MATLAB command line using
%
%      ftsgui
%
%   See also FTSGUI.
%

%
%   NOTE: Need to be called from ftsgui.m.
%

%   Author: P. N. Secakusuma, 01-10-2000
%   Copyright 1995-2003 The MathWorks, Inc.
%   $Revision: 1.14.2.3 $   $Date: 2004/04/06 01:09:24 $

switch nargin
    case 0
        mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
            'Tag', 'FTSGUIMainWindow');

        MenuItems = {'&File' , ''               , 'fileMenuItem'            ;
            '>&Load'         , 'ftsfilemenu(1)' , 'fileLoadMenuItem'        ;
            '>&Save'         , 'ftsfilemenu(2)' , 'fileSaveMenuItem'        ;
            '>Save &As'      , 'ftsfilemenu(3)' , 'fileSaveAsMenuItem'      ;
            '>-----'         , ''               , ''                        ;
            '>&Import'       , 'ftsfilemenu(4)' , 'fileImportMenuItem'      ;
            '>&Export'       , 'ftsfilemenu(5)' , 'fileExportMenuItem'      ;
            '>-----'         , ''               , ''                        ;
            '>Pa&ge Setup'   , 'ftsfilemenu(6)' , 'filePageSetupMenuItem'   ;
            '>Print Pre&view', 'ftsfilemenu(7)' , 'filePrintPreviewMenuItem';
            '>&Print'        , 'ftsfilemenu(8)' , 'filePrintMenuItem'       ;
            '>-----'         , ''               , ''                        ;
            '>&Close FTS GUI', 'ftsfilemenu(9)' , 'fileCloseGUIMenuItem'    ;
            '>E&xit MATLAB'  , 'ftsfilemenu(10)', 'fileExitMATLABMenuItem'  };
        hFileMenuItems = makemenu(mainFTSGUIWindow, str2mat(MenuItems{:, 1}), str2mat(MenuItems{:, 2}), str2mat(MenuItems{:, 3}));

        varargout{1} = hFileMenuItems;

        % Setup Root listener.
        hRoot = handle(0);
        hL    = handle.listener(hRoot, hRoot.findprop('CurrentFigure'), ...
            'PropertyPostSet', 'ftsfilemenu(1, 2, '''')');
        setappdata(mainFTSGUIWindow, 'RootListener', hL);

    case {1, 2}
        mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
            'Tag', 'FTSGUIMainWindow');
        mainFTSGUIWindow_pos = get(mainFTSGUIWindow, 'Position');

        switch varargin{1}
            case 1   % Load
                % Get filename and path.
                [filename, pathname] = uigetfile({'*.mat', 'MAT-files (*.mat)'; ...
                    '*.dat; *.txt', 'ASCII Data Files (*.dat, *.txt)'; ...
                    '*.mat; *.dat; *.txt', 'All MATLAB Data Files (*.mat, *.txt, *.dat)'; ...
                    '*.*',  'All Files (*.*)'}, ...
                    'Load a MAT-file or an ASCII data file');
                if filename

                    switch lower(filename(end-2:end))
                        case 'mat'
                            data_info  = whos('-file', [pathname, filename]);
                            fts_lidx   = strcmp('fints', {data_info.class}');
                            data_class = {data_info.class}';
                            data_class = data_class(fts_lidx);
                            data_names = {data_info.name}';
                            data_names = data_names(fts_lidx);
                            MAT_data   = load('-mat', [pathname, filename], data_names{:});
                            data_names = fieldnames(MAT_data);
                            MAT_data   = struct2cell(MAT_data);

                            % Store FTS data and info in the main GUI window.
                            setftsguidata(MAT_data, data_names, data_class);

                            % Store the latest filename loaded.
                            setappdata(mainFTSGUIWindow, 'LatestDataFile', [pathname, filename]);

                        case {'dat', 'txt'}
                            % Setup dialog box for options of ASCII2FTS.
                            hA2FDialog = figure('NumberTitle', 'off', ...
                                'MenuBar', 'none', ...
                                'Name', ['Read: ', filename], ...
                                'Units', 'normal', ...
                                'Position', [0.4 0.4 0.2 0.2], ...
                                'Resize', 'off', ...
                                'Visible', 'on');

                            hA2FText0a    = uicontrol('Style', 'text', ...
                                'String', 'Parameter', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.825 0.575 0.075]);
                            hA2FText0b    = uicontrol('Style', 'text', ...
                                'String', 'Value', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.825 0.150 0.075]);
                            hA2FText0c    = uicontrol('Style', 'text', ...
                                'String', 'Example', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.825 0.175 0.075]);

                            hA2FText1a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'One-word Identifier:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.700 0.575 0.075]);
                            hA2FEditText1 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.700 0.150 0.100], ...
                                'Tag', 'OneWordIdentifier');
                            hA2FText1b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', 'dis', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.700 0.175 0.075]);

                            hA2FText2a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'Description Line #:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.575 0.575 0.075]);
                            hA2FEditText2 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.575 0.150 0.100], ...
                                'Tag', 'DescriptionLine');
                            hA2FText2b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', '1', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.575 0.175 0.075]);

                            hA2FText3a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'Column Headers Line #:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.450 0.575 0.075]);
                            hA2FEditText3 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.450 0.150 0.100], ...
                                'Tag', 'ColumnHeadersLine');
                            hA2FText3b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', '3', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.450 0.175 0.075]);

                            hA2FText4a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'Line #''s to skip:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.325 0.575 0.075]);
                            hA2FEditText4 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.325 0.150 0.100], ...
                                'Tag', 'SkipLines');
                            hA2FText4b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', '2', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.325 0.175 0.075]);

                            hA2FOKBtn     = uicontrol('Style', 'pushbutton', ...
                                'String', 'OK', ...
                                'Callback', ['mainFTSGUIWindow = findall(0, ''Type'', ''figure'', ''Tag'', ''FTSGUIMainWindow''); ', ...
                                'OneWordID   = get(findall(0, ''Tag'', ''OneWordIdentifier''), ''String''); ', ...
                                'DescLine    = get(findall(0, ''Tag'', ''DescriptionLine''), ''String''); ', ...
                                'ColHeadLine = get(findall(0, ''Tag'', ''ColumnHeadersLine''), ''String''); ', ...
                                'SkipLines   = get(findall(0, ''Tag'', ''SkipLines''), ''String''); ', ...
                                'setappdata(mainFTSGUIWindow, ''A2F_Parameters'', {OneWordID; DescLine; ColHeadLine; SkipLines}); ', ...
                                'closereq;'], ...
                                'Units', 'normal', ...
                                'Position', [0.250 0.100 0.200 0.125]);
                            hA2FCancelBtn = uicontrol('Style', 'pushbutton', ...
                                'String', 'Cancel', ...
                                'Callback', 'closereq;', ...
                                'Units', 'normal', ...
                                'Position', [0.550 0.100 0.200 0.125]);

                            uiwait(hA2FDialog);

                            % Get the parameters for the call to ASCII2FTS.
                            A2F_Parameters = getappdata(mainFTSGUIWindow, 'A2F_Parameters');
                            DescLine       = str2double(A2F_Parameters{2});
                            ColHeadLine    = str2double(A2F_Parameters{3});
                            SkipLines      = str2double(A2F_Parameters{4});

                            % Call ASCII2FTS.
                            MAT_data   = ascii2fts([pathname, filename], DescLine, ColHeadLine, SkipLines);

                            % Store FTS data and info in the main GUI window.
                            data_names = A2F_Parameters(1);
                            MAT_data   = {MAT_data};
                            data_class = {'fints'};
                            setftsguidata(MAT_data, data_names, data_class);

                        otherwise
                            errordlg({'Invalid file type.'; ...
                                ' ';, ...
                                'Please make sure that the filename '; ...
                                'extension is MAT, DAT, or TXT.'}, ...
                                'Load data file');

                    end   % End of switch block based on filename extension.

                    % Update the status in the satus list.
                    updateftsguistatus(1, ['Loaded file: ', pathname, filename]);
                    drawnow;

                    % Plot the multiple series in separate figures.
                    for pidx = 1:length(data_names)
                        % Update the status in the satus list.
                        updateftsguistatus(1, ['Displaying: ', deblank(MAT_data{pidx}.desc)]);
                        drawnow;

                        % Setup the figure window for each plot & plot the time series.
                        hpfig(pidx) = figure('NumberTitle', 'off', ...
                            'Name', deblank(MAT_data{pidx}.desc), ...
                            'Units', 'normal', ...
                            'Position', [0.0350+(pidx)*0.02 0.425-(pidx-1)*0.02 0.3 0.3], ...
                            'CloseRequestFcn', 'ftsfilemenu(1, 1, '''')', ...
                            'ButtonDownFcn', 'ftsfilemenu(1, 2, '''')', ...
                            'UserData', data_names{pidx}, ...
                            'Visible', 'off', ...
                            'Tag', ['Plot_', data_names{pidx}]);
                        hplot = plot(MAT_data{pidx});
                        set([get(hpfig(pidx), 'Children'); hplot], 'ButtonDownFcn', ['ftsfilemenu(1, 2, '''')']);
                        set(hpfig(pidx), 'Visible', 'on');
                        drawnow;

                        % Update the main figure title bar to indicate active time series.
                        tdata = {data_names{pidx}, deblank(MAT_data{pidx}.desc)};
                        ftsfilemenu(1, 3, tdata);
                    end

                    % Save all the figure handle that are created.
                    mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                        'Tag', 'FTSGUIMainWindow');
                    hChildrenFigs = getappdata(mainFTSGUIWindow, 'ChildrenFigures');
                    setappdata(mainFTSGUIWindow, 'ChildrenFigures', [hChildrenFigs, hpfig]);

                end	% End of 'if filename' block.

            case 2   % Save
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                savetofile = getappdata(mainFTSGUIWindow, 'LatestDataFile');
                try
                    commas = [cellstr(char(44*ones(length(infostorage.itemnames)-1, 1))); {''}];
                    outarg = [infostorage.itemnames, commas]';
                    eval(['[', outarg{:}, '] = deal(infostorage.items{:});']);

                    save(savetofile, infostorage.itemnames{:}, '-mat');

                    updateftsguistatus(1, ['Saved file: ', savetofile]);

                    hsavefig = figure('MenuBar', 'none', ...
                        'NumberTitle', 'off', ...
                        'Name', 'Save: ALL time series data', ...
                        'Units', 'normal', ...
                        'Position', [0.35 0.35 0.3 0.3], ...
                        'Resize', 'off', ...
                        'WindowStyle', 'normal', ...
                        'Tag', 'savefig');

                    hline1txt = uicontrol('Style', 'text', ...
                        'String', {'The time series data: '; ...
                        ' '}, ...
                        'HorizontalAlignment', 'left', ...
                        'Units', 'normal', ...
                        'Position', [0.05 0.875 0.9 0.075], ...
                        'Tag', 'saveline1txt');
                    hspacer   = uicontrol('Style', 'text', ...
                        'String', '', ...
                        'HorizontalAlignment', 'left', ...
                        'Units', 'normal', ...
                        'Position', [0.05 0.375 0.1 0.5], ...
                        'Tag', 'savespacer');
                    hdesclist = uicontrol('Style', 'text', ...
                        'String', sprintf('+> %s\n', infostorage.itemdesc{:}), ...
                        'HorizontalAlignment', 'left', ...
                        'Units', 'normal', ...
                        'Position', [0.15 0.375 0.8 0.5], ...
                        'Tag', 'savedesclist');
                    hline2txt = uicontrol('Style', 'text', ...
                        'String', {' '; ...
                        'has(ve) been saved into file: '; ...
                        ' '; ...
                        ['             ', savetofile]}, ...
                        'HorizontalAlignment', 'left', ...
                        'Units', 'normal', ...
                        'Position', [0.05 0.15 0.9 0.225], ...
                        'Tag', 'saveline2txt');

                    hokbutton = uicontrol('Style', 'pushbutton', ...
                        'String', 'OK', ...
                        'Units', 'normal', ...
                        'Position', [0.4 0.05 0.2 0.075], ...
                        'Callback', 'closereq;', ...
                        'Tag', 'saveokbutton');
                catch
                    msg = lasterror;
                    errordlg({msg.message; ...
                        ' ';, ...
                        'The file or the directory might be READ-ONLY.'}, ...
                        'Save Error', ...
                        'modal');
                end

            case 3   % Save As
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                [filename, pathname] = uiputfile({'*.mat', 'MAT-files (*.mat)'}, ...
                    'Save As: ALL time series data');
                if filename

                    if ~strcmp(filename(end-3:end), '.mat')
                        filename = [filename, '.mat'];
                    end

                    commas = [cellstr(char(44*ones(length(infostorage.itemnames)-1, 1))); {''}];
                    outarg = [infostorage.itemnames, commas]';
                    eval(['[', outarg{:}, '] = deal(infostorage.items{:});']);

                    try
                        save([pathname, filename], infostorage.itemnames{:}, '-mat');

                        updateftsguistatus(1, ['Saved file: ', pathname, filename]);

                        hsaveasfig = figure('MenuBar', 'none', ...
                            'NumberTitle', 'off', ...
                            'Name', 'Save As: ALL time series data', ...
                            'Units', 'normal', ...
                            'Position', [0.35 0.35 0.3 0.3], ...
                            'Resize', 'off', ...
                            'WindowStyle', 'normal', ...
                            'Tag', 'saveasfig');

                        hline1txt = uicontrol('Style', 'text', ...
                            'String', {'The time series data: '; ...
                            ' '}, ...
                            'HorizontalAlignment', 'left', ...
                            'Units', 'normal', ...
                            'Position', [0.05 0.875 0.9 0.075], ...
                            'Tag', 'saveasline1txt');
                        hspacer1  = uicontrol('Style', 'text', ...
                            'String', '', ...
                            'HorizontalAlignment', 'left', ...
                            'Units', 'normal', ...
                            'Position', [0.05 0.375 0.1 0.5], ...
                            'Tag', 'saveasspacer1');
                        hdesclist = uicontrol('Style', 'text', ...
                            'String', sprintf('+> %s\n', infostorage.itemdesc{:}), ...
                            'HorizontalAlignment', 'left', ...
                            'Units', 'normal', ...
                            'Position', [0.15 0.375 0.75 0.5], ...
                            'Tag', 'saveasdesclist');
                        hspacer2  = uicontrol('Style', 'text', ...
                            'String', '', ...
                            'HorizontalAlignment', 'left', ...
                            'Units', 'normal', ...
                            'Position', [0.9 0.375 0.05 0.5], ...
                            'Tag', 'saveasspacer2');
                        hline2txt = uicontrol('Style', 'text', ...
                            'String', {' '; ...
                            'has(ve) been saved into file: '; ...
                            ' '; ...
                            ['             ', pathname, filename]}, ...
                            'HorizontalAlignment', 'left', ...
                            'Units', 'normal', ...
                            'Position', [0.05 0.15 0.9 0.225], ...
                            'Tag', 'saveasline2txt');

                        hokbutton = uicontrol('Style', 'pushbutton', ...
                            'String', 'OK', ...
                            'Units', 'normal', ...
                            'Position', [0.4 0.05 0.2 0.075], ...
                            'Callback', 'closereq;', ...
                            'Tag', 'saveasokbutton');
                    catch
                        msg = lasterror;
                        errordlg({msg.message; ...
                            ' ';, ...
                            'The file or the directory might be READ-0NLY.'}, ...
                            'Save As Error', ...
                            'modal');
                    end

                end	% End of 'if filename' block.

            case 4   % Import
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                mainFTSGUIWindow_pos = get(mainFTSGUIWindow, 'Position');

                [filename, pathname] = uigetfile({'*.xls', 'MS Excel file (*.xls)'; ...
                    '*.wk1', 'Lotus 1-2-3 file (*.wk1)'; ...
                    '*.dat; *.txt', 'ASCII data Files (*.dat, *.txt)'; ...
                    '*.*',  'All Files (*.*)'}, ...
                    'Import data file');
                importfromfile = [pathname, filename];
                if filename

                    switch lower(filename(end-2:end))
                        case 'xls'
                            [fdesc, sheetnames] = xlsfinfo(importfromfile);
                            if length(sheetnames) == 1
                                [numdata, strdata] = xlsread(importfromfile);

                                sheetname = sheetnames{1};
                                if size(strdata, 1) == 1
                                    ftsdesc   = '';
                                    sersnames = strdata(end, 2:end);
                                elseif size(strdata, 1) > 1
                                    ftsdesc   = strdata{1, 1};
                                    sersnames = strdata(end, 2:end);
                                elseif isempty(strdata)
                                    ftsdesc   = '';
                                    sersnames = {};
                                end

                                % Call FINTS to generate time series object.
                                MAT_data = fints(x2mdate(numdata(:, 1)), numdata(:, 2:end), sersnames, [], ftsdesc);

                                % Store FTS data and info in the main GUI window.
                                data_names = {['xls_', strrep(sheetname, ' ', '')]};
                                MAT_data   = {MAT_data};
                                data_class = {'fints'};
                                setftsguidata(MAT_data, data_names, data_class);

                            elseif length(sheetnames) > 1
                                errordlg({'Currently, we only support one-worksheet'; ...
                                    '*.XLS file.  Please extract your worksheet'; ...
                                    'into another that only contain that sheet.'; ...
                                    ' '; ...
                                    'Thank you.'}, ...
                                    'Import an Excel (*.xls) file', ...
                                    'modal');
                                return   % End Importing routine.

                            elseif isempty(sheetnames)
                                errordlg({'The file you specified is empty.'; ...
                                    'Please check your file or the'; ...
                                    '     filename you provided.'; ...
                                    ' '; ...
                                    'Thank you.'}, ...
                                    'Import an Excel (*.xls) file', ...
                                    'modal');
                                return   % End Importing routine.
                            end

                        case 'wk1'
                            [numdata, strdata] = wk1read(importfromfile);

                            sheetname = sheetnames{1};
                            if size(strdata, 1) == 1
                                ftsdesc   = '';
                                sersnames = strdata(end, 2:end);
                            elseif size(strdata, 1) > 1
                                ftsdesc   = strdata{1, 1};
                                sersnames = strdata(end, 2:end);
                            elseif isempty(strdata)
                                ftsdesc   = '';
                                sersnames = {};
                            end

                            % Call FINTS to generate time series object.
                            MAT_data = fints(x2mdate(numdata(:, 1)), numdata(:, 2:end), sersnames, [], ftsdesc);

                            % Store FTS data and info in the main GUI window.
                            data_names = {['xls_', strrep(sheetname, ' ', '')]};
                            MAT_data   = {MAT_data};
                            data_class = {'fints'};
                            setftsguidata(MAT_data, data_names, data_class);

                        case {'dat', 'txt'}
                            % Setup dialog box for options of ASCII2FTS.
                            hA2FDialog = figure('NumberTitle', 'off', ...
                                'MenuBar', 'none', ...
                                'Name', ['Read: ', filename], ...
                                'Units', 'normal', ...
                                'Position', [0.4 0.4 0.2 0.2], ...
                                'Resize', 'off', ...
                                'Visible', 'on');

                            hA2FText0a    = uicontrol('Style', 'text', ...
                                'String', 'Parameter', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.825 0.575 0.075]);
                            hA2FText0b    = uicontrol('Style', 'text', ...
                                'String', 'Value', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.825 0.150 0.075]);
                            hA2FText0c    = uicontrol('Style', 'text', ...
                                'String', 'Example', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.825 0.175 0.075]);

                            hA2FText1a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'One-word Identifier:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.700 0.575 0.075]);
                            hA2FEditText1 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.700 0.150 0.100], ...
                                'Tag', 'OneWordIdentifier');
                            hA2FText1b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', 'dis', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.700 0.175 0.075]);

                            hA2FText2a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'Description Line #:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.575 0.575 0.075]);
                            hA2FEditText2 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.575 0.150 0.100], ...
                                'Tag', 'DescriptionLine');
                            hA2FText2b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', '1', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.575 0.175 0.075]);

                            hA2FText3a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'Column Headers Line #:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.450 0.575 0.075]);
                            hA2FEditText3 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.450 0.150 0.100], ...
                                'Tag', 'ColumnHeadersLine');
                            hA2FText3b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', '3', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.450 0.175 0.075]);

                            hA2FText4a    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'HorizontalAlignment', 'right', ...
                                'String', 'Line #''s to skip:', ...
                                'FontWeight', 'bold', ...
                                'Units', 'normal', ...
                                'Position', [0.025 0.325 0.575 0.075]);
                            hA2FEditText4 = uicontrol('Style', 'edit', ...
                                'String', '', ...
                                'Units', 'normal', ...
                                'Position', [0.625 0.325 0.150 0.100], ...
                                'Tag', 'SkipLines');
                            hA2FText4b    = uicontrol('backgroundColor', get(hA2FDialog, 'Color'), ...
                                'Style', 'text', ...
                                'String', '2', ...
                                'Units', 'normal', ...
                                'Position', [0.800 0.325 0.175 0.075]);

                            hA2FOKBtn     = uicontrol('Style', 'pushbutton', ...
                                'String', 'OK', ...
                                'Callback', ['mainFTSGUIWindow = findall(0, ''Type'', ''figure'', ''Tag'', ''FTSGUIMainWindow''); ', ...
                                'OneWordID   = get(findall(0, ''Tag'', ''OneWordIdentifier''), ''String''); ', ...
                                'DescLine    = get(findall(0, ''Tag'', ''DescriptionLine''), ''String''); ', ...
                                'ColHeadLine = get(findall(0, ''Tag'', ''ColumnHeadersLine''), ''String''); ', ...
                                'SkipLines   = get(findall(0, ''Tag'', ''SkipLines''), ''String''); ', ...
                                'setappdata(mainFTSGUIWindow, ''A2F_Parameters'', {OneWordID; DescLine; ColHeadLine; SkipLines}); ', ...
                                'closereq;'], ...
                                'Units', 'normal', ...
                                'Position', [0.250 0.100 0.200 0.125]);
                            hA2FCancelBtn = uicontrol('Style', 'pushbutton', ...
                                'String', 'Cancel', ...
                                'Callback', 'closereq;', ...
                                'Units', 'normal', ...
                                'Position', [0.550 0.100 0.200 0.125]);

                            uiwait(hA2FDialog);

                            % Get the parameters for the call to ASCII2FTS.
                            A2F_Parameters = getappdata(mainFTSGUIWindow, 'A2F_Parameters');
                            DescLine       = str2double(A2F_Parameters{2});
                            ColHeadLine    = str2double(A2F_Parameters{3});
                            SkipLines      = str2double(A2F_Parameters{4});

                            % Call ASCII2FTS.
                            MAT_data   = ascii2fts([pathname, filename], DescLine, ColHeadLine, SkipLines);

                            % Store FTS data and info in the main GUI window.
                            data_names = A2F_Parameters(1);
                            MAT_data   = {MAT_data};
                            data_class = {'fints'};
                            setftsguidata(MAT_data, data_names, data_class);

                        otherwise
                            errordlg({'Unrecognized file type.'; ...
                                ' ';, ...
                                'If your data file is one of the '; ...
                                'supported format, please make sure '; ...
                                'that the extension is XLS, WK1, DAT or TXT.'}, ...
                                'Import data file');

                    end   % End of switch block based on filename extension.

                    % Update the status in the satus list.
                    updateftsguistatus(1, ['Imported file: ', pathname, filename]);
                    drawnow;

                    % Plot the multiple series in separate figures.
                    for pidx = 1:length(data_names)
                        % Update the status in the satus list.
                        updateftsguistatus(1, ['Displaying: ', deblank(MAT_data{pidx}.desc)]);
                        drawnow;

                        % Setup the figure window for each plot & plot the time series.
                        hpfig(pidx) = figure('NumberTitle', 'off', ...
                            'Name', deblank(MAT_data{pidx}.desc), ...
                            'Units', 'normal', ...
                            'Position', [0.0350+(pidx)*0.02 0.425-(pidx-1)*0.02 0.3 0.3], ...
                            'CloseRequestFcn', 'ftsfilemenu(1, 1, '''')', ...
                            'ButtonDownFcn', 'ftsfilemenu(1, 2, '''')', ...
                            'UserData', data_names{pidx}, ...
                            'Visible', 'off', ...
                            'Tag', ['Plot_', data_names{pidx}]);
                        hplot = plot(MAT_data{pidx});
                        set([get(hpfig(pidx), 'Children'); hplot], 'ButtonDownFcn', ['ftsfilemenu(1, 2, '''')']);
                        set(hpfig(pidx), 'Visible', 'on');
                        drawnow;

                        % Update the main figure title bar to indicate active time series.
                        tdata = {data_names{pidx}, deblank(MAT_data{pidx}.desc)};
                        ftsfilemenu(1, 3, tdata);
                    end

                    % Save all the figure handle that are created.
                    mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                        'Tag', 'FTSGUIMainWindow');
                    hChildrenFigs = getappdata(mainFTSGUIWindow, 'ChildrenFigures');
                    setappdata(mainFTSGUIWindow, 'ChildrenFigures', [hChildrenFigs, hpfig]);

                end	% End of 'if filename' block.

            case 5   % Export
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                fts_idx    = find(strcmp(infostorage.activefts, infostorage.itemnames));
                if isempty(fts_idx)
                    errordlg({'There is no file to export.' ...
                        ' ', ...
                        'Please load a file.'},'Error');
                    return
                end

                [MAT_data, data_names, data_info] = getftsguidata(infostorage.activefts);

                if nargin == 1
                    hfilltsfig = figure('Color', get(0, 'DefaultUIControlBackgroundColor'), ...
                        'NumberTitle', 'off', ...
                        'MenuBar', 'none', ...
                        'Name', 'Export a SINGLE time series dataset', ...
                        'Resize', 'off', ...
                        'WindowStyle', 'modal', ...
                        'Units', 'normal', ...
                        'Position', [0.4 0.4 0.2 0.15], ...
                        'HandleVisibility', 'callback', ...
                        'Tag', 'exportdlg');

                    hexporttxt = uicontrol('Style', 'text', ...
                        'String', {'ONE time series dataset will be exported.'; ...
                        'The time series dataset to be exported is'; ...
                        ''; ...
                        ['     ', MAT_data.desc]}, ...
                        'HorizontalAlignment', 'left', ...
                        'Units', 'normal', ...
                        'Position', [0.05 0.15 0.9 0.8], ...
                        'Tag', 'exporttxt');

                    hokbutton = uicontrol('Style', 'pushbutton', ...
                        'String', 'OK', ...
                        'Units', 'normal', ...
                        'Position', [0.25 0.075 0.2 0.175], ...
                        'Callback', 'ftsfilemenu(5, 1)', ...
                        'Tag', 'exportokbutton');
                    hcancelbutton = uicontrol('Style', 'pushbutton', ...
                        'String', 'Cancel', ...
                        'Units', 'normal', ...
                        'Position', [0.55 0.075 0.2 0.175], ...
                        'Callback', 'closereq;', ...
                        'Tag', 'exportcancelbutton');

                elseif nargin == 2
                    switch varargin{2}
                        case 1
                            closereq;
                            drawnow;

                            [filename, pathname] = uiputfile({'*.wk1', 'Lotus 1-2-3 file (*.wk1)'; ...
                                '*.dat; *.txt', 'ASCII data Files (*.dat, *.txt)'; ...
                                '*.*',  'All Files (*.*)'}, ...
                                'Export: A SINGLE time series dataset');
                            exporttofile = [pathname, filename];
                            if filename

                                switch lower(filename(end-2:end)),
                                    case 'wk1'
                                        try
                                            wk1write(exporttofile, fts2mat(MAT_data, 1));
                                            efstat = 1;
                                        catch
                                            efstat = 0;
                                        end
                                    case {'dat', 'txt'}
                                        efstat = fts2ascii(exporttofile, MAT_data);
                                    otherwise
                                        errordlg({'Unrecognized file type.'; ...
                                            ' ';, ...
                                            'If your data file is one of the '; ...
                                            'supported format, please make sure '; ...
                                            'that the extension is WK1, DAT or TXT.'}, ...
                                            'Export a SINGLE time series dataset');
                                end

                                if efstat
                                    % Update the status in the satus list.
                                    updateftsguistatus(1, ['Exported file: ', pathname, filename]);
                                    drawnow;
                                else
                                    errordlg({'Export failed!'; ...
                                        'Make sure that the directory is writable and '; ...
                                        'there is sufficient space for a file.'}, ...
                                        'Export a SINGLE time series data', ...
                                        'modal');
                                end

                            end   % End of 'if filename' block.
                    end   % End of 'switch varargin{2}' block.
                end   % End of 'if nargin ==2' block.

            case 6  % Page Setup
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                pagesetupdlg(infostorage.activefig);

            case 7  % Print Preview
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                printpreview(infostorage.activefig);

            case 8   % Print
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                printdlg('-setup', infostorage.activefig);

            case 9  % Close GUI
                closeDialog = figure('MenuBar', 'none', ...
                    'NumberTitle', 'off', ...
                    'Name', 'Close GUI?', ...
                    'Color', get(0, 'DefaultUIControlBackgroundColor'), ...
                    'Units', 'normal', ...
                    'Position', [0.4 0.45 0.2 0.1], ...
                    'Tag', 'ConfirmCloseGUIDialog', ...
                    'KeyPressFcn', ['closeDialog = findall(0, ''Type'', ''figure'', ', ...
                    '                      ''Tag'', ''ConfirmCloseGUIDialog'');', ...
                    'close(closeDialog);', ...
                    'clear closeDialog;'], ...
                    'Resize', 'off', ...
                    'Visible', 'off', ...
                    'WindowStyle', 'modal');
                closeText = uicontrol('Style', 'text', ...
                    'String', 'Are you sure you want to close the GUI?', ...
                    'Units', 'normal', ...
                    'Position', [0.25 0.4 0.7 0.4], ...
                    'BackgroundColor', get(closeDialog, 'Color'));
                closeYesButton = uicontrol('Style', 'pushbutton', ...
                    'String', 'Yes', ...
                    'Units', 'normal', ...
                    'Position', [0.35 0.225 0.2 0.2], ...
                    'Callback', ['closeDialog = findall(0, ''Type'', ''figure'', ', ...
                    '                      ''Tag'', ''ConfirmCloseGUIDialog'');', ...
                    'fig = findall(0, ''Type'', ''figure'', ', ...
                    '              ''Tag'', ''FTSGUIMainWindow''); ', ...
                    'hChildrenFigs = getappdata(fig, ''ChildrenFigures'');', ...
                    'delete([closeDialog, hChildrenFigs, fig]);', ...
                    'clear hChildrenFigs closeDialog fig;'], ...
                    'Tag', 'CloseYesButton'); %'clear all;'
                closeNoButton = uicontrol('Style', 'pushbutton', ...
                    'String', 'No!', ...
                    'FontWeight', 'bold', ...
                    'Units', 'normal', ...
                    'Position', [0.65 0.225 0.2 0.2], ...
                    'Callback', ['closeDialog = findall(0, ''Type'', ''figure'', ', ...
                    '                      ''Tag'', ''ConfirmCloseGUIDialog'');', ...
                    'delete(closeDialog);', ...
                    'clear closeDialog;'], ...
                    'Tag', 'CloseNoButton');

                load stopsign.mat
                iconAxes = axes('YDir', 'reverse', ...
                    'Units', 'normal', ...
                    'Position', [0.05 0.3 0.2 0.4], ...
                    'Parent', closeDialog, ...
                    'Tag', 'IconAxes');
                stopsign = image('CData', iconInd, ...
                    'Parent', iconAxes);
                set(closeDialog', 'Colormap', [get(0, 'DefaultUIControlBackgroundColor'); iconCMap(2:3, :)]);
                axis image; axis off;

                set(closeDialog, 'Visible', 'on');

            case 10   % Exit MATLAB
                quitDialog = figure('MenuBar', 'none', ...
                    'NumberTitle', 'off', ...
                    'Name', 'Quit MATLAB?', ...
                    'Color', get(0, 'DefaultUIControlBackgroundColor'), ...
                    'Units', 'normal', ...
                    'Position', [0.4 0.45 0.2 0.1], ...
                    'Tag', 'ConfirmQuitMATLABDialog', ...
                    'KeyPressFcn', ['quitDialog = findall(0, ''Type'', ''figure'', ', ...
                    '                     ''Tag'', ''ConfirmQuitMATLABDialog'');', ...
                    'close(quitDialog);', ...
                    'clear quitDialog;'], ...
                    'Resize', 'off', ...
                    'Visible', 'off', ...
                    'WindowStyle', 'modal');
                quitText = uicontrol('Style', 'text', ...
                    'String', 'Are you sure you want to quit MATLAB?', ...
                    'Units', 'normal', ...
                    'Position', [0.25 0.4 0.7 0.4], ...
                    'BackgroundColor', get(quitDialog, 'Color'));
                quitYesButton = uicontrol('Style', 'pushbutton', ...
                    'String', 'Yes', ...
                    'Units', 'normal', ...
                    'Position', [0.35 0.225 0.2 0.2], ...
                    'Callback', 'quit;', ...
                    'Tag', 'QuitYesButton');
                quitNoButton = uicontrol('Style', 'pushbutton', ...
                    'String', 'No!', ...
                    'FontWeight', 'bold', ...
                    'Units', 'normal', ...
                    'Position', [0.65 0.225 0.2 0.2], ...
                    'Callback', ['quitDialog = findall(0, ''Type'', ''figure'', ', ...
                    '                     ''Tag'', ''ConfirmQuitMATLABDialog'');', ...
                    'close(quitDialog);', ...
                    'clear quitDialog;'], ...
                    'Tag', 'QuitNoButton');

                load stopsign.mat
                iconAxes = axes('YDir', 'reverse', ...
                    'Units', 'normal', ...
                    'Position', [0.05 0.3 0.2 0.4], ...
                    'Parent', quitDialog, ...
                    'Tag', 'IconAxes');
                stopsign = image('CData', iconInd, ...
                    'Parent', iconAxes);
                set(quitDialog', 'Colormap', [get(0, 'DefaultUIControlBackgroundColor'); iconCMap(2:3, :)]);
                axis image; axis off;

                set(quitDialog, 'Visible', 'on');

            otherwise
                error('Valid flags are 1 thru 9.  Thank you.');

        end   % End of SWITCH VARARGIN{1} block.

    case 3

        switch varargin{2},
            case 1   % Figure's CloseRequestFcn Callback.
                try
                    mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                        'Tag',  'FTSGUIMainWindow');

                    hChildrenFigs = getappdata(mainFTSGUIWindow, 'ChildrenFigures');
                    hCurrentFigs = find(hChildrenFigs ~= gcf);
                    setappdata(mainFTSGUIWindow, 'ChildrenFigures', hChildrenFigs(hCurrentFigs));
                    rmftsguidata(get(gcf, 'UserData'));
                    closereq;
                    set(mainFTSGUIWindow, 'Name', getappdata(mainFTSGUIWindow, 'MainFigureName'));

                catch
                    closereq;

                end

            case 2   % Figure's ButtonDownFcn Callback.
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag', 'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');
                hg_obj = gcbo;
                % Need the schema.prop() because, in R12, HG does not handle listener properly while
                % R12+ has been fixed so that it does.
                if isempty(hg_obj) | isa(hg_obj, 'schema.prop')
                    hg_obj = get(0, 'CurrentFigure');
                else
                    while ~strcmp(get(hg_obj, 'Type'), 'figure')
                        hg_obj = get(hg_obj, 'Parent');
                    end
                end
                if hg_obj ~= mainFTSGUIWindow
                    if ~isempty(get(hg_obj, 'UserData')),
                        infostorage.activefts = get(hg_obj, 'UserData');
                        infostorage.activefig = hg_obj;
                        setappdata(mainFTSGUIWindow, 'FTS_Data', infostorage);
                        MainFigureName = getappdata(mainFTSGUIWindow, 'MainFigureName');
                        set(mainFTSGUIWindow, 'Name', [MainFigureName, ', Active: ', get(hg_obj, 'Name')]);
                    end
                elseif isempty(getappdata(mainFTSGUIWindow, 'ChildrenFigures'))
                    infostorage.activefts = [];
                    infostorage.activefig = [];
                    setappdata(mainFTSGUIWindow, 'FTS_Data', infostorage);
                    set(mainFTSGUIWindow, 'Name', getappdata(mainFTSGUIWindow, 'MainFigureName'));
                end

            case 3   % Figure's CreateFcn Callback.
                mainFTSGUIWindow = findall(0, 'Type', 'figure', ...
                    'Tag',  'FTSGUIMainWindow');
                infostorage = getappdata(mainFTSGUIWindow, 'FTS_Data');

                infostorage.activefts = ['', varargin{3}{1}, ''];
                infostorage.activefig = get(0, 'CurrentFigure');
                setappdata(mainFTSGUIWindow, 'FTS_Data', infostorage);

                MainFigureName = getappdata(mainFTSGUIWindow, 'MainFigureName');
                set(mainFTSGUIWindow, 'Name', [MainFigureName, ', Active: ', varargin{3}{2}]);

        end
end   % End of SWITCH NARGIN block

% [EOF]
