%% $RCSfile: c24xgpio_do.tlc,v $
%% $Revision: 1.1.6.1 $ $Date: 2004/04/01 16:14:33 $
%% Copyright 2004 The MathWorks, Inc.



%implements c24xgpio_do "C"

%% Function: GetUsedChannels ====================================================
%% Abstract:
%%     Encode indices of all used channels into an integer number
%%  
%function GetUsedChannels(GPIO_Bit0,GPIO_Bit1, GPIO_Bit2, GPIO_Bit3, GPIO_Bit4, GPIO_Bit5, GPIO_Bit6, GPIO_Bit7) Output
                          
    %assign usedChannels = (GPIO_Bit0==1)*1 + (GPIO_Bit1==1)*2 + (GPIO_Bit2==1)*4 + (GPIO_Bit3==1)*8 + \
                           (GPIO_Bit4==1)*16 + (GPIO_Bit5==1)*32 + (GPIO_Bit6==1)*64 + (GPIO_Bit7==1)*128 
    %return usedChannels
    
%endfunction %% GetUsedChannels



%% Function: GetNextInputExpression ====================================================
%function GetNextInputExpression(block, chanIndex)

    %assign dtname = LibBlockInputSignalDataTypeName(0,"")
    %if (dtname=="boolean_T")
        %assign InputString = "%<LibBlockInputSignal(0,"","","%<chanIndex>")>"
    %elseif (dtname=="real32_T") || (dtname=="real_T")
        %assign InputString = "(boolean_T) (%<LibBlockInputSignal(0,"","","%<chanIndex>")>)"
    %else
        %assign InputString = "(boolean_T) (%<LibBlockInputSignal(0,"","","%<chanIndex>")>)"    
    %endif
    %return InputString
    
%endfunction %% GetNextInputExpression



%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

    %openfile buffer
        #include "DSP24_Device.h"
    %closefile buffer
    %<LibCacheIncludes(buffer)>
    
%endfunction %% BlockTypeSetup



%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block,system) void

    %<AddParamsToBlock(block)>
    
%endfunction %% BlockInstanceSetup



%% Function: Start ============================================================
%%
%%  Initialize GPIO registers for GPIO mode. Set the direction at the same time
%%
%function Start(block, system) Output

    %switch(useIOPort)
        %case "IOPA"
	        MMREGS[MCRA] &= %<muxAll>; 
            MMREGS[P%<PortName>DATDIR] |= %<dirAll>;
        %break    
        %case "IOPB"
	        MMREGS[MCRA] &= %<muxAll>; 
            MMREGS[P%<PortName>DATDIR] |= %<dirAll>; 
        %break
        %case "IOPC"
	        MMREGS[MCRB] &= %<muxAll>; 
            MMREGS[P%<PortName>DATDIR] |= %<dirAll>;
        %break
        %case "IOPD"
	        MMREGS[MCRB] &=%<muxAll>;
            MMREGS[P%<PortName>DATDIR] |=%<dirAll>; 
        %break
        %case "IOPE"
	        MMREGS[MCRC] &= %<muxAll>; 
            MMREGS[P%<PortName>DATDIR] |= %<dirAll>; 
        %break
        %case "IOPF"
	        MMREGS[MCRC] &= %<muxAll>;
            MMREGS[P%<PortName>DATDIR] |= %<dirAll>;
        %break      
    %endswitch  

%endfunction %% Start



%% Function: Outputs ==========================================================
%%
%%      Write the input signals into the GPIO bit register performing data type
%%      conversion as needed
%%
%function Outputs(block,system) Output  

/* %<Type> Block: %<Name> (%<ParamSettings.FunctionName>) */
{
    %assign chanIndex = 0    
    %if(GPIO_Bit0==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)
      	    MMREGS[P%<PortName>DATDIR] |= Bit0Hi;			/*Put IOPx0 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit0Lo;          /*Put IOPx0 Low */  
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit1==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit1Hi;			/*Put IOPx1 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit1Lo;          /*Put IOPx1 Low */
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit2==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit2Hi;			/*Put IOPx2 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit2Lo;          /*Put IOPx2 Low */
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit3==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit3Hi;			/*Put IOPx3 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit3Lo;          /*Put IOPx3 Low */
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit4==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit4Hi;			/*Put IOPx4 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit4Lo;          /*Put IOPx4 Low */
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit5==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit5Hi;			/*Put IOPx5 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit5Lo;          /*Put IOPx5 Low */
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit6==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit6Hi;			/*Put IOPx6 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit6Lo;          /*Put IOPx6 Low */
        %assign chanIndex = chanIndex + 1
    %endif
    %if(GPIO_Bit7==1)
        if(%<GetNextInputExpression(block, chanIndex)> > 0)    
      	    MMREGS[P%<PortName>DATDIR] |= Bit7Hi;			/*Put IOPx7 High */   
      	else    
      	    MMREGS[P%<PortName>DATDIR] &= Bit7Lo;          /*Put IOPx7 Low */
        %assign chanIndex = chanIndex + 1
    %endif
}

%endfunction %% Outputs



%% Function: AddParamsToBlock =================================================
%function AddParamsToBlock(block) void

    %assign useIOPort   = SFcnParamSettings.useIOPort
    %assign GPIO_Bit0   = SFcnParamSettings.GPIO_Bit0
    %assign GPIO_Bit1   = SFcnParamSettings.GPIO_Bit1
    %assign GPIO_Bit2   = SFcnParamSettings.GPIO_Bit2
    %assign GPIO_Bit3   = SFcnParamSettings.GPIO_Bit3
    %assign GPIO_Bit4   = SFcnParamSettings.GPIO_Bit4
    %assign GPIO_Bit5   = SFcnParamSettings.GPIO_Bit5
    %assign GPIO_Bit6   = SFcnParamSettings.GPIO_Bit6
    %assign GPIO_Bit7   = SFcnParamSettings.GPIO_Bit7         
    %assign numChannels = SFcnParamSettings.numChannels
     
    %switch(useIOPort)     
        %case "IOPA"
            %assign PortName = "A"
            %assign muxAll      = 65535 - SFcnParamSettings.muxAll            
            %assign dirAll      = SFcnParamSettings.dirAll<<8
        %break
        %case "IOPB"
            %assign PortName = "B"
            %assign muxAll      = 65535 - (SFcnParamSettings.muxAll<<8)            
            %assign dirAll      = SFcnParamSettings.dirAll<<8            
        %break
        %case "IOPC"
            %assign PortName = "C"
            %assign muxAll      = 65535 - SFcnParamSettings.muxAll            
            %assign dirAll      = SFcnParamSettings.dirAll<<8            
        %break
        %case "IOPD"
            %assign PortName = "D"
            %assign muxAll      = 65535 - (SFcnParamSettings.muxAll<<8)            
            %assign dirAll      = SFcnParamSettings.dirAll<<8            
        %break
        %case "IOPE"
            %assign PortName = "E"
            %assign muxAll      = 65535 - SFcnParamSettings.muxAll            
            %assign dirAll      = SFcnParamSettings.dirAll<<8            
        %break
        %case "IOPF"
            %assign PortName = "F"
            %assign muxAll      = 65535 - (SFcnParamSettings.muxAll<<8)            
            %assign dirAll      = SFcnParamSettings.dirAll<<8            
        %break        
    %endswitch    
    
    %assign usedChannels = GetUsedChannels (%<GPIO_Bit0>, %<GPIO_Bit1>, %<GPIO_Bit2>, %<GPIO_Bit3>, \
                                            %<GPIO_Bit4>, %<GPIO_Bit5>, %<GPIO_Bit6>, %<GPIO_Bit7>)

    %assign block = block + useIOPort + numChannels + usedChannels \
                          + GPIO_Bit0 + GPIO_Bit1 + GPIO_Bit2 + GPIO_Bit3 + GPIO_Bit4 + GPIO_Bit5 + GPIO_Bit6 + GPIO_Bit7 \
                          + dirAll + muxAll + PortName
 
%endfunction  %% AddParamsToBlock

%% [EOF] c24xgpio_do.tlc
