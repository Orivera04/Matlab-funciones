function [out, out2] = gui_setup( con, action, varargin )
%GUI_SETUP   Model parameter setup for constraint modelling
%   [C,OK] = GUI_SETUP(C) or GUI_MODEL(C,'Figure') creates a blocking GUI for 
%   choosing the parameters of a constraint model.  It returns M, a new copy of 
%   the constraint model, and OK, which indicates whether the user pressed 'OK' 
%   or 'CANCEL'.
%   LYT = GUI_SETUP(C,'Layout',FIG,P) creates a layout in figure FIG, using the 
%   dynamic copy of a model in P.
%   [OK, MSG] = GUI_SETUP(C,'Finalise',LYT) fiddles the user data field of the 
%   layout LYT so that the conmodel reflects the selected parameters.

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.

%  $Revision: 1.5.8.4 $    $Date: 2004/04/04 03:26:27 $ 

if nargin < 1, 
    con = constar;
end
if nargin < 2, 
    action = 'Figure';
end

switch lower( action ),
case 'figure',
    [out, out2] = i_figure( con, varargin{:} );
case 'layout',
    [out, out2] = i_layout( varargin{:} );
case 'finalise',
    i_finalise( varargin{1} );
    out = true;
    out2 = '';
otherwise,
    warning( sprintf( 'Unknown action ''%s''.', action ) );
end

return

%------------------------------------------------------------------------------|
function [con, ok] = i_figure( con, varargin )
p = xregpointer(con);

figh = xregdialog( ...
    'Name', 'Constar Model Settings', ...
    'numbertitle', 'off', ...
    'closerequestfcn','set(gcbf,''tag'',''cancel'');',...
    'resize','off' );

xregcenterfigure( figh, [600, 300] );

lyt = i_layout( figh, p );

btnOk = uicontrol(...
    'parent',figh,...
    'style','pushbutton',...
    'string','OK',...
    'interruptible','off',...
    'callback','set(gcbf,''tag'',''ok'',''visible'',''off'');');

btnCancel = uicontrol(...
    'parent',figh,...
    'style','pushbutton',...
    'string','Cancel',...
    'interruptible','off',...
    'callback','set(gcbf,''tag'',''cancel'',''visible'',''off'');');

grd = xreggridbaglayout(figh,...
   'dimension',[2 3],...
   'rowsizes',[-1 25],...
   'colsizes',[-1 65 65],...
   'gapy',10,'gapx',7,...
   'border',[7 7 7 7],...
   'mergeblock',{[1 1],[1 3]},...
   'elements',{lyt,[],[],btnOk,[],btnCancel});

figh.LayoutManager = grd;
set( grd, 'packstatus', 'on' );

figh.showDialog(btnOk);

tg = get( figh, 'tag' );

ok = strcmpi( tg, 'ok' );
i_finalise( lyt )
con = p.info;

freeptr( p );
delete( figh );
return
%------------------------------------------------------------------------------|
function [lyt, ok] = i_layout( figh, p, varargin )

udp = xregGui.RunTimePointer;
udp.LinkToObject( figh );

con = p.info;

bpo = getbdrypointoptions( con );
ud.pbpo = xregGui.RunTimePointer;
ud.pbpo.LinkToObject( figh );
ud.pbpo.info = bpo;

rbf = con.Model;
transform_list = transform_radius( 'list' );
center_list = xregfindcenter( 'List' );
kernel_list = { 'multiquadric','recmultiquadric','gaussian',...
        'thinplate','logisticrbf','wendland','linearrbf','cubicrbf'};
kernel = get( rbf, 'kernel' );

ud.popupCenter = xreguicontrol( figh,...
    'style','popupmenu',...
    'string',center_list,...
    'value',find( strcmpi( getspecialpointoptions( con ), center_list ) ), ...
    'callback',{@i_center,udp},...
    'visible','off',...
    'interruptible','off',...
    'horizontalalignment','left',...
    'backgroundcolor','w');
ud.lctrlCenter = i_labelcontrol( figh, 'Center-point determination:', ud.popupCenter );

ud.popupTransform = xreguicontrol( figh,...
    'style','popupmenu',...
    'string',transform_list,...
    'value',find( strcmpi( con.Transform, transform_list ) ), ...
    'callback',{@i_transform,udp},...
    'visible','off',...
    'interruptible','off',...
    'horizontalalignment','left',...
    'backgroundcolor','w');
ud.lctrlTransform = i_labelcontrol( figh, 'Transform:', ud.popupTransform );

ud.popupKernel = xreguicontrol( figh,...
    'style','popupmenu',...
    'string',kernel_list,...
    'value',find( strcmpi( kernel, kernel_list ) ), ...
    'callback',{@i_kernel,udp},...
    'visible','off',...
    'interruptible','off',...
    'horizontalalignment','left',...
    'backgroundcolor','w');
ud.lctrlKernel = i_labelcontrol( figh, 'RBF kernel:', ud.popupKernel );

ud.editWidth =  xreguicontrol( figh,...
    'style','edit',...
    'string', num2str( get( rbf, 'width' ) ), ...
    'horizontalalignment','left',...
    'backgroundcolor','w',...
    'callback',{@i_width,udp},...
    'visible','off');
ud.lctrlWidth = i_labelcontrol( figh, 'RBF width:', ud.editWidth );

val=find(strcmp(num2str(get(con.Model,'cont')),{'0','2','4','6'}));
ud.popupContinuity = xreguicontrol( figh,...
    'style','popupmenu',...
    'string',{ '0', '2', '4', '6'},...
    'value',val,...
    'callback',{@i_continuity,udp},...
    'visible','off',...
    'interruptible','off',...
    'horizontalalignment','left',...
    'backgroundcolor','w');
ud.lctrlContinuity = i_labelcontrol( figh, 'RBF continuity:', ud.popupContinuity );

ud.btnRbf = xreguicontrol(...
    'parent',figh,...
    'style','pushbutton',...
    'string','Advanced...',...
    'interruptible','off',...
    'callback',{@i_rbf,udp});

lyt = xreggridbaglayout(figh,...
    'dimension',[5 2],...
    'rowsizes',[20 20 20 20 25],...
    'colsizes',[-1, 80],...
    'gapy',5, 'gapx',7,...
    'border',[0 0 0 0],...
    'mergeblock', {[1, 1], [1, 2]}, ...
    'mergeblock', {[2, 2], [1, 2]}, ...
    'mergeblock', {[3, 3], [1, 2]}, ...
    'mergeblock', {[4, 4], [1, 2]}, ...
    'elements',{... ...
        ud.lctrlTransform,  []; ...
        ud.lctrlKernel,     []; ...
        ud.lctrlWidth,      []; ...
        ud.lctrlContinuity, []; ...
        [],                 ud.btnRbf } );
lyt = xregframetitlelayout( figh, ...
        'Title', 'Model Options', ...
        'Center', lyt, ...
        'PackStatus', 'off' );

lytbdry = gui_setup( bpo, 'layout', ...
     { 'expanded', 1 }, ...
     figh, ud.pbpo, con );
 
lytbdry = xregframetitlelayout( figh, ...
        'Title', 'Boundary Point Options', ...
        'Center', lytbdry, ...
        'PackStatus', 'off' );
    
lyt = xreggridbaglayout(figh,...
    'dimension',[2 2],...
    'rowsizes',[20 -1],...
    'colsizes',[-1, -1],...
    'gapy',5,'gapx',7,...
    'border',[7 7 7 7],...
    'mergeblock', {[1, 2], [2, 2]}, ...
    'elements',{...
        ud.lctrlCenter, lyt; ...
        lytbdry, [] } );

ud.ptr = p;
set( lyt, 'UserData', ud );
udp.info = ud;

i_enableWdith( udp, kernel );
i_enableContinuity( udp, kernel );

ok = 1;
return
%------------------------------------------------------------------------------|
function lctrl = i_labelcontrol( figh, string, control )
lctrl = xregGui.labelcontrol( ...
    'parent',figh,...
    'Control', control,...
    'String',string,...
    'Enable','on', ...
    'ControlSize', 120, ...
    'ControlSizeMode', 'relative',...
    'LabelSize', 120, ...
    'LabelSizeMode', 'relative');
%------------------------------------------------------------------------------|
function i_finalise( lyt )
ud = get( lyt, 'UserData' );
con = ud.ptr.info;
bpo = ud.pbpo.info;
con = setbdrypointoptions( con, bpo );
ud.ptr.info = con;
return
%------------------------------------------------------------------------------|
function i_center( h, evt, udp )
ud = udp.info;
con = ud.ptr.info;
list = get( ud.popupCenter, 'String' );
value = get( ud.popupCenter, 'Value' );
con = setspecialpointoptions( con, list{value} );
ud.ptr.info = con;
return
%------------------------------------------------------------------------------|
function i_transform( h, evt, udp )
ud = udp.info;
con = ud.ptr.info;
list = get( ud.popupTransform, 'String' );
value = get( ud.popupTransform, 'Value' );
con.Transform = list{value};
ud.ptr.info = con;
return
%------------------------------------------------------------------------------|
function i_width( h, evt, udp )
ud = udp.info;
con = ud.ptr.info;

width = str2num( get( ud.editWidth, 'string' ) );
if ~isempty(width) & width > eps,
    % if a valid number is entered for the width, set the edit box and 
    % the model
    set( ud.editWidth, 'string', num2str( width ) );
    con.Model = setrbfpart( con.Model, 'width', width );
else
    % if the width string doesn't read as a number or is too small, get the
    % last width value from the model and set the edit box
    width = get( get( con.Model, 'rbfpart' ), 'width' );
    set( ud.editWidth, 'string', num2str( width ) );
end
ud.ptr.info = con;
return
%------------------------------------------------------------------------------|
function i_continuity( h, evt, udp )
ud = udp.info;
con = ud.ptr.info;

value = get( ud.popupContinuity, 'value' );
list = get( ud.popupContinuity, 'string' );
continuity = list{value};
con.Model = setrbfpart( con.Model, 'cont', str2num( continuity ) );

ud.ptr.info = con;
return
%------------------------------------------------------------------------------|
function i_rbf( h, evt, udp )
ud = udp.info;
con = ud.ptr.info;
con.Model = gui_globalmodsetup( con.Model, 'Figure' );
ud.ptr.info = con;

% update width, continuity, kernel
set( ud.editWidth, 'string', num2str( get( con.Model, 'width' ) ) );

val = find(strcmp(num2str(get(con.Model,'cont')),{'0','2','4','6'}));
set( ud.popupContinuity, 'value', val );

kernel_list = get( ud.popupKernel, 'string' );
kernel = get( con.Model, 'kernel' );
val = find( strcmpi( kernel, kernel_list ) );
set( ud.popupKernel, 'value', val );

i_enableWdith( udp, kernel );
i_enableContinuity( udp, kernel );

return
%------------------------------------------------------------------------------|
function i_kernel( h, evt, udp )
ud = udp.info;
con = ud.ptr.info;

value = get( ud.popupKernel, 'value' );
kernel_list = get( ud.popupKernel, 'string' );
kernel = kernel_list{ value };
con.Model = setrbfpart( con.Model, 'kernel', kernel );

ud.ptr.info = con;
i_enableWdith( udp, kernel );
i_enableContinuity( udp, kernel );

return

%------------------------------------------------------------------------------|
function i_enableWdith( udp, kernel )

if any( strcmpi( kernel, {'thinplate', 'linearrbf', 'cubicrbf'} ) ),
    set( udp.info.lctrlWidth, 'Enable', 'off' );
else
    set( udp.info.lctrlWidth, 'Enable', 'on' );
end

return
%------------------------------------------------------------------------------|
function i_enableContinuity( udp, kernel )

if strcmpi( kernel, 'wendland' ),
    set( udp.info.lctrlContinuity, 'Enable', 'on' );
else
    set( udp.info.lctrlContinuity, 'Enable', 'off' );
end
return
%------------------------------------------------------------------------------|
% EOF
%------------------------------------------------------------------------------|
