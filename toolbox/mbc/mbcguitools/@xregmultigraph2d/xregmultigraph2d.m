function gr=xregmultixregmultigraph2d(varargin)
% XREGMULTIGRAPH2D/XREGMULTIGRAPH2D  Graph2d constructor function
%   Constructor function for a xregmultigraph2d object.
%   Usage:
%     GR=GRAPH2D
%     GR=GRAPH2D(FIG)
%     GR=GRAPH2D('Property1',Value1,...)
%     GR=GRAPH2D(FIG,'Property1',Value1,...)
%

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.


%   $Revision: 1.2.2.4 $  $Date: 2004/04/04 03:29:16 $

if nargin>0 & isnumeric(varargin{1})
   figh=varargin{1};
else
   figh=gcf;
end

% DATA STORAGE.  The different bits of data are stored as follows:
%
% general stuff vector in the axes
% copy of object in the patch
% tdata in xfactor
% xdata in xtext
% cdata in yfactor
% ydata in ytext
% visible in badim

% initial position
pos=[30 30 500 360];

fa=getaxes(xregGui.figureaxes,figh);
gr.patch=xregGui.rectangle('parent',getbgaxes(xregGui.figureaxes,figh),...
   'edgecolor','k',...
   'facecolor','w',...
   'position',pos,...
   'tag','xregmultigraph2d_obj',...
   'visible','off',...
   'hittest','off');

cp=floor(pos(1:2)+pos(3:4).*0.5)-15;
gr.badim=xregGui.image('parent',fa,...
   'cdata',pr_badim,...
   'xdata',[cp(1) +31],...
   'ydata',[cp(2) +31],...
   'visible','off',...
   'userdata','on',...
   'hittest','off');

ud = [];
ud.userdata = [];
ud.type = 'single';
ud.tableptr = xregpointer;
ud.tableindex = [];
ud.pos = pos;
ud.axeschildren = [];
ud.oldy = 1;
ud.oldx = 1;
ud.limits = {};
ud.ylimits = {};
ud.xfactors = [];
ud.yfactors = [];
ud.checkedyfactors = [];
ud.grid = 1;
ud.exclusive = 1;
ud.transcolor = 'none';
ud.yunitstring = '';
ud.title = '';
ud.yseltype = 0;
ud.colorbar = 0;
ud.colorfactor = [];
ud.colorbarvalid = 0;
ud.colordatavalid = 0;
ud.excludestyle = 'blank';
ud.contextmenu = [];
ud.lines = [];
ud.patches = [];
ud.fillmask = [];
ud.marker = {};
ud.markercolor = [];
ud.checkedmcolor = [];
ud.checkedfillmask = 0;
ud.markersize = get(0,'defaultlinemarkersize');
ud.callback = [];
ud.singlecallback = [];
ud.multicallback = [];
ud.lastcalltype = 0;

gr.axes=xregGui.axes('parent',figh,...
   'units','pixels',...
   'position',[pos(1)+50 pos(2)+80 pos(3)-80 pos(4)-105],...
   'layer','top',...
   'xlim',[0 1],...
   'ylim',[0 1],...
   'clim',[0 1],...
   'visible','off',...
   'userdata',ud,...
   'color','w',...
   'buttondownfcn','mv_zoom',...
   'fontsize',8);

cmap=get(figh,'colormap');

gr.colorbar=xregcolorbar(figh,...
   'callbackmode','external',...
   'frame','off',...
   'visible','off');

gr.xfactor=xregGui.uicontrol('style','popupmenu',...
   'parent',figh,...
   'string',' ',...
   'backgroundcolor','w',...
   'visible','off',...
   'tag','1');
gr.xtext=xregGui.uicontrol('style','text',...
   'parent',figh,...
   'position',[0 0 70 15],...
   'string','X-axis factor:',...
   'backgroundcolor','w',...
   'visible','off',...
   'enable','inactive');

gr.yfactor=xregGui.uicontrol('style','popupmenu',...
   'parent',figh,...
   'string',' ',...
   'backgroundcolor','w',...
   'visible','off',...
   'tag','2');

gr.ytext=xregGui.uicontrol('style','text',...
   'parent',figh,...
   'position',[0 0 70 15],...
   'string','Y-axis factor:',...
   'backgroundcolor','w',...
   'visible','off',...
   'enable','inactive');

gr.controls=xreggridbaglayout(figh,'packgroup','XX_XREGMULTIGRAPH2D','dimension',[5,7],...
   'rowsizes',[-1 2 15 3 -1],'colsizes',[-1 70 -1 -1 70 -1 -1],'colratios',[1 1 3 2 1 3 1],...
   'mergeblock',{[2 4],[3 3]},'mergeblock',{[2 4], [6 6]},...
   'elements',{[],[],[],[],[],[],[];...
      [],[],gr.xfactor,[],[],gr.yfactor,[];...
      [],gr.xtext,[],[],gr.ytext,[],[];...
      [],[],[],[],[],[],[];...
      [],[],[],[],[],[],[]},...
   'position',[pos(1) pos(2) pos(3) 50],...
   'packstatus','on');

gr=class(gr,'xregmultigraph2d');

% save an object handle in the patch for later use.
builtin('set',gr.patch,'userdata',gr);
set(gr.xfactor,'callback',{@factor_change,gr,1});
set(gr.yfactor,'callback',{@factor_change,gr,2});
set(gr.colorbar,'callback',{@i_colorbarCB,gr});

% Make the label text bold
lbls=get(gr.axes,{'xlabel','ylabel'});
set([lbls{:}],'fontweight','bold');

% set extra props if specified
if nargin>1 & isnumeric(varargin{1}); 
   % Set properties that are passed in
   gr=set(gr,'visible','on',varargin{2:end});
elseif nargin>0 & ~isnumeric(varargin{1})
   gr=set(gr,'visible','on',varargin{:});
else
   set([gr.axes;gr.patch;gr.xfactor;gr.yfactor;gr.xtext;gr.ytext],'visible','on');
end


%-----------------
function i_colorbarCB(src,ev,gr)
%-----------------
pr_plot(gr);
