function drawGraph(varargin)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Filename:     drawGraph.m
% 
% Description:  GUI for drawing a directed/undirected graph. Currently
%               called from within makeGraph.m..but it works either way
%
% Input:        Variable number of inputs between 3 to 6
%               - vargin{1} = number of vertices
%               - vargin{2} = edges for the graph entered as a matrix. Same
%                 format as specified in getEdges.m file. Basically if
%                 graph has edges {1,2} and {1,3} vargin{2} = [1 2;1 3]
%               - vargin{3} = 0 if graph is undirected 
%               - vargin{4} = labels of the edges, if edges should be
%                 labeled automatically by this function, use [] empty
%                 braces for this option
%
%               Following Options are for random graph model only
%               -------------------------------------------------
%               - vargin{5} = userEdg   :these are edges that are not random
%               - vargin{6} = addedEdge :these are random edges that are
%                 generated by genRandUndirectedGraphEdg.m based on user
%                 input distance threshold. This function merely draws the
%                 graph, it does not define the random graph
%
% Output:       none, draws the graph
%
% 7/1/03 Jasmine Sandhu - sandhu@aa.washington.edu 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   $Revision: 1.1 $   
%   $Date: 2004/10/30 18:11:37 $
%
%   Version History:
%   ----------------
%   $Log: drawGraph.m,v $
%   Revision 1.1  2004/10/30 18:11:37  jasmine
%   Created Graph Theory folder in STB repository
%
%

nin = nargin;
error(nargchk(3,6,nargin));

Vtx    = varargin{1};
Edg    = varargin{2};
direct = varargin{3};

% Add labels as provided
if( nin == 4),
    labels = varargin{4};
end
if( nin > 4),
    userEdg   = varargin{5};
    addedEdge = varargin{6};
    random    = 1;
    %% Temporary vars, indices used during plotting of random graph
    ind1      = 1; 
    ind2      = 1;
else
    random    = 0;
end

%% Draw window for plotting graph
screen_size = get(0,'ScreenSize');
figure_size = [440 440];  % [width height]
figure_pos  = [10, 10];
plot_size   = [425 425];  % [width height]

%% Note following values were computed to obtain the plot in approx..center of figure
plot_pos    = (figure_size - plot_size)./2;

graphW = figure('NumberTitle' ,'off',...
    'Position'    , [figure_pos     figure_size], ...
    'Units'       ,'pixels',...
    'Menubar'     ,'figure',...
    'Color'       ,[0.8 0.8 0.8],...
    'Name'        ,'drawGraph',...
    'Resize'      ,'off', ...
    'Tag'         ,'graphWin');

GR   = axes('Units', 'pixels', 'Parent', graphW);
set( GR, 'Box', 'on','GridLineStyle', 'none', ...
    'Position', [plot_pos       plot_size], ...
    'XTick',[0 1],'YTick',[0 1],'XTickLabel','','YTickLabel','', ...
    'Xlim',[0 1], 'Ylim', [0 1], ...
    'XMinorTick', 'off', 'YMinorTick','off'); hold on;

% First initialize all nodes of graph
VtxLoc = [];
theta  = pi;  % starting location of node 1 in circle @ theta = pi
spacing= 2*pi/Vtx;
num    = [1:1:Vtx];

% each node is evenly spaced out on a circle of radius 0.4 plotted on
% normalized graph window of size 1 x 1
thta   = [pi:-spacing:-pi + spacing];   % starting location of node 1 in circle @ theta = pi
VtxLoc = [.45.*cos(thta) + .5; .45.*sin(thta) + .5]';
plot(VtxLoc(:,1), VtxLoc(:,2),'r.'); hold on

% Numbering / labelling the graph nodes
if( Vtx > 3)
    topLeft= [num(1):num(floor(Vtx/4))];   % 1st quarter node indices
    topRght= [num(floor(Vtx/4)+1):num(floor(1*Vtx/2))];    % next quarter nodes in top right quadrant
    botRght= [num(floor(Vtx/2)+1):num(floor(3*Vtx/4))];    % next quarter nodes in bottom right quadrant
    botLeft= [num(floor(3*Vtx/4)+1):Vtx];    % last 1/4 nodes on bottom left side
    
    if( exist('labels') == 1)
        
        % Add labels along w/ numbering
        j = 0;
        for i = 1:length(topLeft)
            j = j + 1;
            str1(i) = {['{',num2str(topLeft(i)), ',' , labels{j},'}']};
        end
        for i = 1:length(topRght)
            j = j + 1;
            str2(i) = {['{',num2str(topRght(i)), ',' , labels{j},'}']};
        end
        for i = 1:length(botRght)
            j = j + 1;
            str3(i) = {['{',num2str(botRght(i)), ',' , labels{j},'}']};
        end
        for i = 1:length(botLeft)
            j = j + 1;
            str4(i) = {['{',num2str(botLeft(i)), ',' , labels{j},'}']};
        end
        text( VtxLoc(topLeft, 1) - .02, VtxLoc(topLeft, 2) + .05, str1, ...
              'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        text( VtxLoc(topRght, 1) + .01, VtxLoc(topRght, 2) + .05, str2, ...
              'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        text( VtxLoc(botRght, 1) + .01, VtxLoc(botRght, 2) - .05, str3, ...
              'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        text( VtxLoc(botLeft, 1) - .02, VtxLoc(botLeft, 2) - .05, str4, ...
              'Margin', 1,'BackgroundColor', [.8 .8 .8]);
    else
        str1   = num2cell(topLeft);
        str2   = num2cell(topRght);
        str3   = num2cell(botRght);
        str4   = num2cell(botLeft);
        text( VtxLoc(topLeft, 1) - .02, VtxLoc(topLeft, 2) + .01, str1 );
        text( VtxLoc(topRght, 1) + .01, VtxLoc(topRght, 2) + .01, str2 );
        text( VtxLoc(botRght, 1) + .01, VtxLoc(botRght, 2) - .01, str3 );
        text( VtxLoc(botLeft, 1) - .02, VtxLoc(botLeft, 2) - .01, str4 );
        
    end
else
    j = 0;
    for i = 1:length(num)
        j = j + 1;
		%--- Fixed on 7/26/04 JAS
		% Labels not input by user .. 
		if( nin < 4)
       	 	str1(i) = {['{',num2str(j),'}']};
		else
       	 	str1(i) = {['{',num2str(num(i) ), ',' , labels{j},'}']};
		end
    end
    text( VtxLoc(num(:), 1) - 0.02, VtxLoc(num(:), 2) + .03, str1, ...
         'Margin', 1,'BackgroundColor', [.8 .8 .8]);
end

%% End Labelling the graph nodes
if direct == 0
    % Draw Edges -- undirected graph
    for ind = 1:size(Edg, 1)
        xVal= [VtxLoc(Edg(ind,1),1), VtxLoc(Edg(ind,2),1)];
        yVal= [VtxLoc(Edg(ind,1),2), VtxLoc(Edg(ind,2),2)];
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Graph is random
        if( random == 1)
            % Since addedEdge and userEdg are both sorted, all values of Edg
            % must belong to either addedEdg or userEdg
            if( ind1 <= size(userEdg,1) & userEdg(ind1,:) == Edg(ind,:) )
                plot(xVal, yVal,'-g', 'LineWidth', 2); hold on;
                ind1 = ind1 + 1;
            else if( ind2 <= size(addedEdge,1) & addedEdge(ind2,:) == Edg(ind,:) )
                    % if it does not belong to firstChk, it must belong to secndChk
                    plot(xVal, yVal,'-b', 'LineWidth', 2); hold on;
                    ind2 = ind2 + 1;
                else
                    errordlg('Problem: Found an edge drawRandGraph that does not belong in userEdg or addedEdge');
                    keyboard
                end                        
            end
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        else
            %% Graph is Not Random
            plot(xVal, yVal,'-g', 'LineWidth', 2); hold on;
        end
    end
else    
    % Draw Edges -- directed graph
    % always assumed static graph random = 0
    %strt= VtxLoc(Edg(:,1),:);
    beg = VtxLoc(Edg(:,1),:);
    fin = VtxLoc(Edg(:,2),:);
    mid = beg + [fin(:,1) - beg(:,1), fin(:,2) - beg(:,2)]./2;   % always only 2D coordinates (x,y) locations
    
    % Draw arrow from beg to mid point
    arrow('start',beg, 'stop', mid, 'Length', 15, 'BaseAngle', 30, 'TipAngle', 20,'Width', 2, ...
          'EdgeColor', 'g','FaceColor', 'g'); hold on;
    
    % Original arrow between points .. 
    %arrow('start',strt, 'stop', stp, 'Length', 15, 'BaseAngle', 30, 'TipAngle', 20,'Width', 2, ...
    %      'EdgeColor', 'g','FaceColor', 'g'); hold on;
    % Draw straight line from mid to end
    for lne = 1:size(mid,1)
        plot( [mid(lne,1), fin(lne,1)], [mid(lne,2), fin(lne,2)], 'linewidth', 2,'color', 'g'); hold on;
    end
end
