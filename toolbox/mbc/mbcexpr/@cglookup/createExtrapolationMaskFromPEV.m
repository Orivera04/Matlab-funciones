function [obj, OK] = createExtrapolationMaskFromPEV(obj, expr, threshold)
%CREATEEXTRAPOLATIONMASKFROMPEV Generate an extrapolation mask from PEV
%
%  [OBJ, OK] = CREATEEXTRAPOLATIONMASKFROMPEV(OBJ, EXPRESSION, THRESHOLD)
%  generates a new extrapolation mask from the PEV values of the cgexpr
%  subclass EXPRESSION. Cells that have corresponding PEV values less than
%  or equal to THRESHOLD will be in the mask.
%  If EXPRESSION does not support PEV, or if the table cannot identify a
%  single variable input for each axis the flag OK will be set to be false.
%
%  [OBJ, OK] = CREATEEXTRAPOLATIONMASKFROMPEV(OBJ, EXPRESSION, 'interactive')
%  will pop up a small dialog with PEV statistics that allows the user to
%  choose an appropriate threshold value.

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.

%  $Revision: 1.1.6.3 $    $Date: 2004/04/04 03:27:30 $ 

OK = pevcheck(expr) && hasinportperaxis(obj);
if OK
    % Set up the non-table inputs to their nominal values
    pExprVar = getinports(expr);
    pTblVar = getinports(obj);
    if length(pTblVar)>1
        pTblVar([1 2]) = pTblVar([2 1]);
    end
    ToNomValues = cgisindependentvars(pExprVar, pTblVar);
    passign(pExprVar(ToNomValues), pveceval(pExprVar(ToNomValues), @setpoint));
    
    if ischar(threshold) && strcmp(threshold, 'interactive')
        [threshold, OK] = i_getthreshvalue(expr, pTblVar);
        if ~OK
            % Cancel condition in UI
            % this is not an error
            OK = true;
            return
        end
    end

    % Set up table inports so that they match the table breakpoints
    OK = setinportsforcells(obj);
    if ~OK
        return
    end
    % Evaluate expression over the table cells and threshold it to get a
    % new mask
    dPEV = evaluategrid(expr, pTblVar, 'pev');
    obj = pSetExtrapolationMask(obj,(dPEV<=threshold));
end




function [threshold, OK] = i_getthreshvalue(expr, pTblVar)
% Evaluate PEV over a coarse grid to get a rough idea fo some statistics
% for the user.  The GUI actually uses PE values which are the sqrt of PEV

hFig = xregfigure('name', 'Create Mask From PE', ...
    'windowstyle', 'modal', ...
    'resize', 'off', ...
    'pointer', 'watch', ...
    'visible','off', ...
    'closerequestfcn', 'set(gcbf, ''visible'', ''off'');');
xregcenterfigure(hFig, [300 200]);

introstr = ['The new extrapolation mask will include table elements where the ', ...
    'PE of the associated model is less than the chosen threshold value.  ', ...
    'The PE data for the model has the following characteristics:'];
hIntro = uicontrol('parent', hFig, ...
    'style', 'text', ...
    'horizontalalignment', 'left', ...
    'string', introstr);

valuestr = {'Minimum value:', 'Maximum value:', 'Mean value:', 'Standard deviation:'};
for n = 1:4
    hLabel{n} = uicontrol('parent', hFig, ...
        'style', 'text', ...
        'horizontalalignment', 'left', ...
        'string', valuestr{n});
    
    hValue{n} = uicontrol('parent', hFig, ...
        'style', 'text', ...
        'horizontalalignment', 'left', ...
        'string', 'calculating...');
end
    
hValueInput = xregGui.clickedit('parent', hFig, ...
    'Value', 1, ...
    'min', 0, ...
    'dragincrement', 0.1);

hInput = xregGui.labelcontrol('parent', hFig, ...
    'string', 'PE threshold to apply:', ...
    'LabelSizeMode', 'absolute', ...
    'LabelSize', 120, ...
    'ControlSize', 70, ...
    'Border', [0 3 0 0], ...
    'Control', hValueInput);

OKbtn = uicontrol('parent', hFig, ...
    'string', 'OK', ...
    'callback', 'set(gcbf, ''tag'', ''ok'', ''visible'', ''off'');');
CANCbtn = uicontrol('parent', hFig, ...
    'string', 'Cancel', ...
    'callback', 'set(gcbf, ''visible'', ''off'');');
HELPbtn = cghelpbutton(hFig, 'CGMASKFROMPEV');

hGrid = xreggridbaglayout(hFig ,...
    'packstatus', 'off', ...
    'dimension', [4 2], ...
    'gapy', 2, ...
    'border', [10 0 0 0], ...
    'rowsizes', [15 15 15 15], ...
    'colsizes', [85 150], ...
    'elements', {hLabel{:}, hValue{:}});;

lyt = xreggridbaglayout(hFig, ...
    'dimension', [4 4], ...
    'rowsizes', [55 68 23 25], ...
    'colsizes', [-1 65 65 65], ...
    'gapx', 7, ...
    'gapy', 7, ...
    'border', [7 7 7 7], ...
    'mergeblock', {[1 1], [1 4]}, ...
    'mergeblock', {[2 2], [1 4]}, ...
    'mergeblock', {[3 3], [1 4]}, ...
    'elements', {hIntro, hGrid, hInput, [], ...
        [], [], [], OKbtn, ...
        [], [], [], CANCbtn, ...
        [], [], [], HELPbtn});
    
hFig.LayoutManager = lyt;
set(lyt, 'packstatus', 'on');

% Calculating PEV takes too long for this little dialog, so we pop it up
% before doing the lengthy calculation, just to keep the user happy.
hFig.visible = 'on';
drawnow('expose');

% Fill in the blanks with calculated PEV numbers
pveceval(pTblVar, @linspace, 21); 
dPE = sqrt(evaluategrid(expr, pTblVar, 'pev'));
values = [min(dPE(:)), max(dPE(:)), mean(dPE(:)), std(dPE(:))];
for n = 1:4
    set(hValue{n}, 'string', num2str(values(n)));
end
set(hFig, 'pointer', 'arrow');

waitfor(hFig, 'visible');

tg = get(hFig, 'tag');
OK = false;
threshold = 0;
if strcmp(tg, 'ok')
    % Need to square the output to make PEV instead of PE
    threshold = hValueInput.Value^2;
    OK = true;
end
delete(hFig);
