function [y,tau,ycol,tcol,f,fprime,logstruct]=sbvpcol(bvpfile,tau,y0,bvpopt,varargin)
%   SBVPCOL 1.0 (Rel. 1/2003) Solve singular boundary value problem for first order ODEs (fixed mesh)
%
%   [Y,TAU,YCOL,TCOL,F,FPRIME,LOG] = SBVPCOL(BVPFILE[,TAU,Y0,BVPOPT,PARAM1,PARAM2,...])
%   solves the boundary value problem
%
%      y' = f(t,y) , t \in (a,b) , R(y(a),y(b))=0
%
%   by the method of collocation. The right hand side f(t,y) may contain
%   a singularity of the form 
%
%      f(t,y) =  1/(t-a) * M(t) + g(t,y),
%
%   where M is a matrix which depends continuously on t and g is a smooth function.
%
%   BVPFILE is the function handle or name of an m-file that defines the 
%    function f, the boundary conditions and some Jacobians (for details see
%    the BVPFILEPattern at the end of this text).
%    SBVPCOL automatically detects whether the BVP is linear. In this case, the 
%    BVPFILE can (but need not) be coded such that it returns the inhomogenities 
%    of the differential equation and the boundary conditions only.
%   
%   [TAU is a strictly monotonous sequence that defines the mesh.
%    TAU should be a row vector. If TAU is empty or not specified, SBVPCOL evaluates 
%    BVPFILE('tau') to obtain it.]
%
%   [Y0 is an initial approximation of the solution of the BVP and should be a 
%    (dim x length(TAU))-matrix, where dim is the dimension of the system
%    to be solved. If Y0 is empty or not specified, SBVPCOL evaluates BVPFILE('y0',TAU)
%    to obtain it and uses the default initial approximation (all zeros) if this fails.
%    For linear problems, no initial approximation is necessary.]
%
%   [BVPOPT is a parameter struct that determines the tolerances, the collocation 
%    point distribution, etc. BVPOPT should be generated by SBVPSET (see SBVPSET 
%    for details). If BVPOPT is empty or not specified, SBVPCOL evaluates BVPFILE('bvpopt') 
%    to obtain it and uses the default options if this fails.]
%
%   [PARAM1,PARAM2 are parameters of the boundary value problem that are passed on 
%    to BVPFILE. See the BVPFILE Pattern below.]
%
%
%   OUTPUT ARGUMENTS:
%
%   TAU is the input mesh.
%
%   Y is the final approximation of the solution on the mesh TAU.
% 
%   TCOL is the final collocation grid. The collocation grid contains mesh points
%    and collocation points and is thus finer than TAU.
%
%   YCOL is the final approximation of the solution on TCOL.
%
%   F, FPRIME are not intended to be used by the user. They serve to 
%    reduce the number of evaluations of f and f' in SBVP.
%
%   LOG is a log-struct which contains information about the solution process.
%
%
%   BVPFILE Pattern:
%
%   function out=BVPFilePattern(flag,t,y,ya,yb,param1,param2,...)
%
%   switch flag
%   case 'f'       % rhs of the differential equation
%     out=<insert f(t,y) here>;
%   case 'df/dy'   % Jacobian of the rhs
%     out=<insert df/dy(t,y) here>;
%   case 'R'       % boundary condition
%     out=<R(ya,yb)>;
%   case 'dR/dya'  % Jacobian of the boundary condition w.r.t. ya
%     out=<dR/dya(ya,yb)>;
%   case 'dR/dyb'  % Jacobian of the boundary condition w.r.t. yb
%     out=<dR/dyb(ya,yb)>;
%   case 'tau'  (optional)
%     out=<mesh>;
%   case 'y0' (optional)
%     out=<initial approximation y0(t)>
%   case 'bvpopt' (optional)
%     out=<solution options for the BVP, see SBVPSET>
%   otherwise
%     error('unknown flag');
%   end
%
%   See also SBVP  SBVPSET  SBVPPLOT  SBVPPHAS2  SBVPPHAS3  FUNCTION_HANDLE

%   Copyright (c) 2003 Winfried Auzinger
%                      Guenter Kneisl
%                      Othmar Koch
%                      Ewa Weinmueller
%                      Vienna University of Technology



%################################################################################
%##################################### MAIN #####################################
%################################################################################



%********************************************************************************
%************************ CHECK ARGUMENT AVAILABILITY ***************************
%********************************************************************************

% ********* parameters for the bvpfile
parameters = varargin;

% ********* determine if an argument-check is necessary or has been done by SBVP
try
   argcheck = bvpopt.Private.Argcheck;
catch
   argcheck = 1;
end



if argcheck
   error(nargchk(1,Inf,nargin));
     
   if isstr(bvpfile) 
      if exist(bvpfile)
         bvpfile = eval(['@' bvpfile]);
      else
         error(['The bvpfile does not exist on the search path']);
      end
   elseif ~exist(func2str(bvpfile))
      error(['The bvpfile does not exist on the search path']);
   end
     
   % ********** handle the cases in which not all arguments are passed
   switch nargin  
   case 1  
      try
         tau=feval(bvpfile,'tau');
      catch
         error([' The mesh TAU must be specified in the bvpfile or passed as argument !']);      
      end
         
      try
         bvpopt = feval(bvpfile,'bvpopt');
      catch
         bvpopt = sbvpset;
         fprintf(' BVPOPT unspecified or incorrect - Using default options\n');
      end
   case {2,3}   
      try
         bvpopt = feval(bvpfile,'bvpopt');
      catch
         bvpopt = sbvpset;
         fprintf(' BVPOPT unspecified or incorrect - Using default options\n');
      end
   end

   % ********** handle the cases in which some arguments are empty
   if isempty(tau)
      try
         tau=feval(bvpfile,'tau');
      catch
         error([' The mesh TAU must be specified in the bvpfile or passed as argument !']);
      end
   end

   if isempty(bvpopt)
      try
         bvpopt = feval(bvpfile,'bvpopt');
      catch
         bvpopt = sbvpset;
         fprintf(' BVPOPT unspecified or incorrect - Using default options\n');
      end
   end
   
   % ********** Now build the final options structure
   
   defaultopt = sbvp('defaults');
   
   bvpopt.ZfOpt = optimset(defaultopt.ZfOpt,bvpopt.ZfOpt);
   
   bvpopt = sbvpset(defaultopt, bvpopt);
   
   % ***** Define the default value for TolX, the zerofinder tolerance
   if isempty(bvpopt.ZfOpt.TolX)
      bvpopt.ZfOpt.TolX = 1e-12;
   end
   
   bvpopt.Private.Preconditioner = 1;   
   
   
   % ***** Determine whether boundary conditions and differential equation are linear
   try
      dRdya = feval(bvpfile,'dR/dya',{},{},{},{},parameters{:});
      dRdyb = feval(bvpfile,'dR/dyb',{},{},{},{},parameters{:});
   
      if isnumeric(dRdya) & isnumeric(dRdyb)
         bvpopt.Private.BClinear = 1;
      else
         bvpopt.Private.BClinear = 0;
      end   
   catch
      bvpopt.Private.BClinear = 0;
   end         

   if bvpopt.Private.BClinear % if BC are nonlinear, the whole problem is nonlinear
      try 
         J = feval(bvpfile,'df/dy',(tau(1)+tau(end))/2,{},{},{},parameters{:});
         if isnumeric(J)
            bvpopt.Private.IsLinear = 1;
         else
            bvpopt.Private.IsLinear = 0;
         end
      catch
         bvpopt.Private.IsLinear = 0;
      end
   else
      bvpopt.Private.IsLinear = 0;
   end  
   
   
   
   bvpopt.Private.DefaultInitialApproximation = 0;

   % ********** an initial approximation is necessary for nonlinear f
   if ~bvpopt.Private.IsLinear   % an initial approximation is necessary
      if ~exist('y0')    % y0 has not been specified as an argument
         try
            y0 = feval(bvpfile,'y0',tau);
         catch
            y0 = get_default_initial_approximation(bvpfile,tau,bvpopt,parameters);
            bvpopt.Private.DefaultInitialApproximation = 1;         
         end
      elseif isempty(y0) % y0 has been specified as an argument, but is empty
         try
            y0=feval(bvpfile,'y0',tau);
         catch
            y0 = get_default_initial_approximation(bvpfile,tau,bvpopt,parameters);
            bvpopt.Private.DefaultInitialApproximation = 1;         
         end
      end
   else
      % ********** In the linear case, y0 will not be used anymore. 
      % ********** It is only defined to avoid special cases   
      y0 = get_default_initial_approximation(bvpfile,tau,bvpopt,parameters);
      bvpopt.Private.DefaultInitialApproximation = 1;
   end

   % *********** Check arguments TAU, Y0, BVPOPT and the BVPFILE 
   if isnumeric(bvpopt.ColPts)  % user-defined distribution of collocation points
      p = length(bvpopt.ColPts);
   
      if p > 8
         fprintf(' ERROR! Maximum number of collocation points is 8. \n');
         return
      end
      
      if lower(bvpopt.DegreeSelect(1)) ~= 'm'
         fprintf(' WARNING! ''DegreeSelect'' changed to ''manual'' to match collocation point distribution.\n',p);
      
         bvpopt.DegreeSelect = 'Manual';
      end
      
      
      if bvpopt.Degree ~= p
         fprintf(' WARNING! Collocation degree changed to %i to match collocation point distribution.\n',p);
      
         bvpopt.Degree = p;
      end
   
      if min(bvpopt.ColPts)<= 0 | max(bvpopt.ColPts) >= 1
         error(' Collocation point distribution must be given on the open interval (0,1).');
      end    
   elseif ~(isequal(lower(bvpopt.ColPts(1)),'e') | isequal(lower(bvpopt.ColPts(1)),'g'))
      error('Bad value for ColPts property.');  
   end

   % ***** Use 2 characters to identify the Basis property ('la' -> lagrange, 'le' -> legendre)
   if lower(bvpopt.Basis(1))=='m' % monomial
      bvpopt.Basis = 'mo';
   elseif lower(bvpopt.Basis(1))=='r' % Runge-Kutta
      bvpopt.Basis = 'ru';
   elseif length(bvpopt.Basis) >= 2
      if ~(isequal(lower(bvpopt.Basis(1:2)),'le') | isequal(lower(bvpopt.Basis(1:2)),'la'))
         error('Bad value for Basis property.');  
      end 
   else
      error('Bad value for Basis property.');  
   end
   
   if ~(isequal(lower(bvpopt.DegreeSelect(1)),'m') | isequal(lower(bvpopt.DegreeSelect(1)),'a'))
      error('Bad value for DegreeSelect property.');  
   end 
   
   
   if bvpopt.Degree > 8
      fprintf(' WARNING! Maximum collocation degree is 8.\n');
      fprintf(' Degree changed to 8 .\n');
   
      bvpopt.Degree = 8;
   end
            
   if ~isnumeric(tau) | ~isnumeric(y0) | size(tau,2)<3 | size(tau,1)~=1 | size(tau,2) ~= size(y0,2)
         error(' TAU and Y0 should be 1 x (N+1) and d x (N+1) matrices, respectively, N > 1 !');
   end
            
   if min(diff(tau))<=0
      error(' TAU must be a strictly monotonous sequence !');
   end

   check_bvpfile(bvpfile,tau,y0,bvpopt,parameters);

   if bvpopt.CheckJac
      check_bvpfile_jacobians(bvpfile,tau,y0,bvpopt,parameters);
   end
end % if argcheck


%********************************************************************************
%**************************** TO LOG, OR NOT TO LOG *****************************
%********************************************************************************


if nargout == 7   % [y,t,ycol,tcol,f,fprime,log]
   bvpopt.Log = 1;
    
   logstruct.bvpfile = func2str(bvpfile);
   logstruct.bvpopt = bvpopt;
   logstruct.tau = tau;
   
   if ~bvpopt.Private.IsLinear
      logstruct.y0 = y0;
   end
   
   if ~isempty(parameters)
      logstruct.parameters = parameters;
   end     
else
   bvpopt.Log = 0;
end


%********************************************************************************
%********************* SOLVE BVP FOR COEFFICIENTS a(j,i,k) **********************
%********************************************************************************

f = [];
fprime = [];

if bvpopt.Private.IsLinear
   
   % ********** evaluate residual and jacobian
   % ********** global constants are also generated. From this point, they are read-only
   [F,DF,f,fprime] = eval_res_and_jac_lin(bvpfile,tau,y0,bvpopt,parameters);
   
   % ********** solution a(j,i,k) is obtained after one "Newton step"
   global d_ p_ N_
   
   lastwarn('');   % initialize warning state
   
   % ***** quicker than \
   [L,U] = lu(DF);    
   a = reshape( U\(L\(-F)) , d_ , p_+1 , N_);
     
   % ********** check if everything was OK in the solution of the linear system
   if length(lastwarn)
      fprintf('\n');      
      error(' System matrix is close to singular. Use a refined mesh.');
   end    
   
   if bvpopt.Log
      logstruct.condestDF = condest(DF);
   end
else % the nonlinear case
   
   % ********** global constants are generated; from this point, they are read-only
   generate_global_constants(tau,y0,bvpopt);
   
   if lower(bvpopt.ZfMethod(1)) == 'n'
   
      % ********** initialize Zerofinder Display
      if bvpopt.ZfOpt.Display(1)=='i'  % display information every iteration step
         fprintf('\n F-COUNT   NORM_F   NORM_DELTA_X   NORM_X   STEPSIZE \n');
      end
   
      % ********** initialize log
      if bvpopt.Log
         logstruct.normF = [];
         logstruct.condestDF = [];
         logstruct.norm_delta_x = [];
         logstruct.lambda = [];
      
         [a,logstruct] = solve_nonlinear_bvp(bvpfile,tau,y0,bvpopt,parameters,logstruct);
      else
         a = solve_nonlinear_bvp(bvpfile,tau,y0,bvpopt,parameters);
      end
      
   else % Method = Fsolve

       global p_ d_ N_
      
      % ***** Get an initial approximation in terms of coefficients a(j,i,k)
      if bvpopt.Private.DefaultInitialApproximation
         a0 = zeros(d_,p_+1,N_);
      else
         a0 = y2a(tau,y0);
      end
      
      % ***** initialize the warning state
      lastwarn('');        
      
      % ***** Solve the nonlinear BVP
      [a,dummy,flag,logstruct] = ...
         fsolve(@eval_res_and_jac,a0,bvpopt.ZfOpt,bvpfile,tau,bvpopt,parameters);
      
      % ***** intercept numerically singular Jacobians
      if length(findstr(lastwarn,'singular'))
         fprintf('\n');
         if bvpopt.Private.BClinear
            error(' System matrix is close to singular. Try a refined mesh.');
         else
            error(' System matrix is close to singular. Try a refined mesh or another initial approximation.');
         end              
      end    

      % ***** determine whether anything has gone wrong
      if logstruct.iterations >= bvpopt.ZfOpt.MaxIter
         fprintf('\n Maximum number of iterations exceeded.\n');
      elseif flag == 0
         fprintf('\n Maximum number of function evaluations exceeded.\n');
      else
         if lower(bvpopt.ZfOpt.Display(1)) ~= 'o' % off
            fprintf('\n Fsolve terminated successfully. \n');
         end         
      end         
   end
end


%********************************************************************************
%****************** EVALUATE SOLUTION ON tau- and tcol-GRID *********************
%********************************************************************************

y = evaluate_y_at_meshpts(a,bvpopt);

if nargout >= 3
   global d_ p_ N_ t_
   
   % ********** generate collocation grid
   t2 = [t_ ; tau(2:end)];
   tcol = [tau(1) t2(:)'];
   
   % ********** calculate solution on collocation grid      
   ycol = evaluate_y_at_colpts(a,bvpopt);
   yt = zeros(d_,length(tcol)-1);  % y on t grid [tau1 t11 ... t1p tau2 ...tNp ]   
   
   yt_idx = reshape(1:(p_+1)*N_,p_+1,N_);
   ycol_idx = reshape(1:p_*N_,p_,N_);
   
   for k = 1:N_
      yt(:,yt_idx(:,k)) = [y(:,k) ycol(:,ycol_idx(:,k))];
   end   
   
   % return name is ycol
   ycol = [yt y(:,end)];
end





%################################################################################
%################################# SUBROUTINES ##################################
%################################################################################


%********************************************************************************
%****************************** GENERATE CONSTANTS ******************************
%********************************************************************************


function generate_global_constants(tau,y0,bvpopt)
global N_ p_ d_ t_ phi_ phi_prime_ phi_plus_ phi_minus_ Phi_ Phi_prime_ phi_inv_

% ********** define most used globals
N_ = length(tau)-1;
p_ = bvpopt.Degree;
d_ = size(y0,1);    % dimension of y

% ***** Get collocation distibution and colpts of all intervals
[rho,t_] = get_collocation_points(tau,bvpopt.ColPts);

% ***** Evaluate basis polynomials and their derivatives at the colpts
if lower(bvpopt.ColPts(1))=='e' &  bvpopt.Degree <= 8 
   if lower(bvpopt.Basis(1:2))=='la'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_lagrange_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='ru'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_rk_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='le'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_legendre_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='mo'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_monomial_constants(bvpopt);
   else
      coeff = get_basis(rho,bvpopt.Basis);
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_basis(coeff,rho);
   end  
elseif lower(bvpopt.ColPts(1))=='g' & bvpopt.Degree <= 8 
   if lower(bvpopt.Basis(1:2))=='la'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_lagrange_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='ru'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_rk_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='le'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_legendre_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='mo'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_monomial_constants(bvpopt);
   else
      coeff = get_basis(rho,bvpopt.Basis);
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_basis(coeff,rho);
   end
else  
   % ***** Get basis coefficients of interval [0,1]
   coeff = get_basis(rho,bvpopt.Basis);
   
   % ***** Evaluate basis polynomials and their derivatives at the colpts
   [phi_, phi_plus_, phi_minus_, phi_prime_pattern] = evaluate_basis(coeff,rho);
end

% ***** globalify the phi-terms
phi_ = phi;
phi_plus_ = phi_plus;
phi_minus_ = phi_minus;

% ***** Generate matrix for determining a from y (for initial approx.)
if ~(bvpopt.Private.IsLinear | bvpopt.Private.DefaultInitialApproximation)
   phi_inv_ = inv([phi_minus_ phi_]);
end

% ***** Generate phi_prime from phi_prime_pattern (= phi_prime on [0,1])
h=diff(tau);

if lower(bvpopt.Basis(1)) ~= 'r' % Runge-Kutta
   phi_prime_ = reshape( (phi_prime_pattern(:)*ones(1,N_)) .* (ones(p_*(p_+1),1) * (1./h)),p_+1,p_,N_);
   % ***** means
   %for k=1:N_
   %   phi_prime_(:,:,k)=phi_prime_pattern ./ h(k);
   %end
end



% ********** assemble constant parts of Jacobian 
% ********** (Phi, Phi_prime  in  DF = Phi_prime - Psi .* Phi)

% ***** make code a little bit more readable
p=p_;d=d_;N=N_;

% ***** assemble blocks of the Jacobian
Id = speye(d);

phi_block = zeros(p*d,(p+1)*d);
phi_prime_block = zeros(p*d,(p+1)*d);

phi_plus_block = zeros(d,(p+1)*d);
phi_minus_block = zeros(d,(p+1)*d);

phi_plus_diag_block = zeros(d,(p+1)*d);
phi_minus_diag_block = zeros(d,(p+1)*d);

i_idx = reshape(1:p*d,d,p);
one_to_d = 1:d;
for j=1:p+1
   j_idx = (j-1)*d + 1 :j*d;
   for i=1:p
      phi_block(i_idx(:,i) , j_idx) = phi_(j,i);
      phi_prime_block(i_idx(:,i), j_idx) = phi_prime_pattern(j,i) * Id;
   end
   phi_plus_diag_block(one_to_d, j_idx)  = phi_plus_(j) * Id;
   phi_minus_diag_block(one_to_d, j_idx) = phi_minus_(j) * Id;
   
   phi_plus_block(one_to_d, j_idx)  = phi_plus_(j);
   phi_minus_block(one_to_d, j_idx) = phi_minus_(j);
end

phi_plus_minus_block = [phi_plus_diag_block  -phi_minus_diag_block];


% ****** reserve space
dimF = N_*(p_+1)*d_;     % dimension of F in F(x)=0
Phi_prime_ = sparse([],[],[],dimF,dimF,N_*d_*nnz(phi_prime_pattern) + (N_-1)*d_*(nnz(phi_plus_) + nnz(phi_minus_)));
Phi_       = sparse([],[],[],dimF,dimF,d_^2*(nnz(phi_plus_) + nnz(phi_minus_)) + N_*d_^2*nnz(phi_));

% ***** indices
Psi_col_idx =reshape(1:dimF,d_*(p_+1),N_);

cc_row_idx = Psi_col_idx(1:d_,:);
Psi_row_idx = Psi_col_idx(d_+1:end,:);

cc_col_lo = [0 1:d*(p+1):(N-2)*d*(p+1)+1];
cc_col_hi = cc_col_lo + (2*d*(p+1)-1);


% ***** boundary conditions and first interval
if bvpopt.Private.Preconditioner
   Phi_(1:d,Psi_col_idx(:,1)) = -phi_minus_block / h(1);
   Phi_(1:d,Psi_col_idx(:,N_)) = -phi_plus_block /h(1);
else
   Phi_(1:d,Psi_col_idx(:,1)) = -phi_minus_block;
   Phi_(1:d,Psi_col_idx(:,N_)) = -phi_plus_block;
end

Phi_(Psi_row_idx(:,1), Psi_col_idx(:,1)) = phi_block;   
Phi_prime_(Psi_row_idx(:,1), Psi_col_idx(:,1)) = phi_prime_block ./ h(1);   


% ***** handle all other intervals
if bvpopt.Private.Preconditioner
   for k=2:N
      Phi_prime_( cc_row_idx(:,k), cc_col_lo(k) : cc_col_hi(k) ) = 1/h(k-1) * phi_plus_minus_block;      
      Phi_( Psi_row_idx(:,k),Psi_col_idx(:,k)) = phi_block;
      Phi_prime_( Psi_row_idx(:,k),Psi_col_idx(:,k)) = phi_prime_block ./ h(k);
   end
else
   for k=2:N
      Phi_prime_( cc_row_idx(:,k), cc_col_lo(k) : cc_col_hi(k) ) = phi_plus_minus_block;
      Phi_(Psi_row_idx(:,k),Psi_col_idx(:,k)) = phi_block;
      Phi_prime_(Psi_row_idx(:,k),Psi_col_idx(:,k)) = phi_prime_block ./ h(k);      
   end
end


%********************************************************************************
%************************* GET COLLOCATION POINTS *******************************
%********************************************************************************

function [rho,tcol] = get_collocation_points(tau,colpts)
global p_ N_

% ********** generate distribution of colpts
if isnumeric(colpts) % user-defined distribution
   rho = reshape(colpts,p_,1);
else
   switch lower(colpts(1))
   case 'e' % equidistant points
      rho = [1:p_]' ./ (p_+1);
   case 'g' % Gaussian points
      rho = get_gausspts(p_);
   end
end

% ********** generate colpts
h = diff(tau);
tcol = ones(p_,1) * tau(1:N_)  +  rho * h;


%********************************************************************************
%******************************* GET BASIS **************************************
%********************************************************************************

function coeff = get_basis(rho,basis)
global p_

% ********** reserve space
coeff = zeros(p_+1);

% ********** generate basis coefficients for interval [0,1]
switch lower(basis(1:2))
case 'la' % Lagrange basis
   rho0  = [0; rho];
   I     = eye(p_+1);
   
   for j=1:p_+1
      coeff(:,j) = polyfit(rho0,I(:,j),p_)';
   end
case 'ru' % Runge-Kutta basis   
   I = eye(p_);
   int = [p_:-1:1]';    % vector for integration
   
   coeff(p_+1,1) = 1;   % the constant polynomial
   
   for j=1:p_
      polj = polyfit(rho,I(:,j),p_-1)';
      coeff(:,j+1) = [polj ./ int ; 0];   % integrate polj
   end
case 'le'  % Legendre basis
   coeff(p_+1,1) = 1;   % the constant polynomial
   
   for j=1:p_
      coeff(p_+1-j:p_+1,j+1) = polyfit([get_gausspts(j)'  1],[zeros(1,j)  1],j)';
   end
case 'mo'  % monomial p_j(x) = x^(j-1)
   coeff = flipud(eye(p_+1));
otherwise
   error(' Unknown basis ! Check bvpopt !');
end



%********************************************************************************
%******************** EVALUATE BASIS AND BASIS DERIVATIVE ***********************
%********************************************************************************

function [phi,phi_plus,phi_minus,phi_prime_pattern] = evaluate_basis(coeff,rho);
global p_

% ********** reserve space
phi       = zeros(p_+1, p_);
phi_plus  = zeros(p_+1, 1);
phi_minus = zeros(p_+1, 1);
phi_prime_pattern = zeros(p_+1,p_);


% ********** some constants
dif = [p_:-1:1]';         % vector for differentiation
rho01 = [0 ; rho ; 1]';

% ********** evaluate polynomials
for j=1:p_+1
   poly_value = polyval(coeff(:,j),rho01);  % evaluate polynomial on [0 rho 1]
   
   phi_minus(j) = poly_value(1);
   phi(j,:)     = poly_value(2:p_+1);                             
   phi_plus(j)  = poly_value(p_+2);
   
   phi_prime_pattern(j,:) = polyval(coeff(1:p_,j) .* dif, rho'); % evaluate derivative
end



%********************************************************************************
%***************************** SOLVE NONLINEAR BVP ******************************
%********************************************************************************

function [new_a,logstruct]=solve_nonlinear_bvp(bvpfile,tau,y0,bvpopt,parameters,logstruct)
global d_ p_ N_

% ********** Express initial approximation in terms of polynomial coefficients a
if bvpopt.Private.DefaultInitialApproximation
   a = zeros(d_,p_+1,N_);
else
   a = y2a(tau,y0);
end


% ********** store some fields of bvpopt as variables for quick reference
xtol        = bvpopt.ZfOpt.TolX;
ftol        = bvpopt.ZfOpt.TolFun;
max_F_evals = bvpopt.ZfOpt.MaxFunEvals;
max_iter    = bvpopt.ZfOpt.MaxIter;
display     = bvpopt.ZfOpt.Display(1);
outputfcn   = bvpopt.OutputFcn;
outputsel   = bvpopt.OutputSel;
trace       = bvpopt.OutputTrace;
log         = bvpopt.Log;

% ********** some initializations
fcount = 1;   % number of function evaluations
itcount= 1;   % number of iterations
new_a  = zeros(size(a));
lambda = 1;   % initial stepsize, classical Newton

% ********** start damped newton iteration
[F,DF]=eval_res_and_jac(a,bvpfile,tau,bvpopt,parameters);
norm_F = max(abs(F));

while 1
   
   lastwarn('');                                   % initialize warning state 
   
   [L,U]=lu(DF);                                   % LU-decomposition of DF
   delta_x = U\(L\(- F));                          % Newton correction
   
   % ********** check if everything was OK in the solution of the linear system
   if length(lastwarn)
      fprintf('\n');
      if bvpopt.Private.BClinear
         error(' System matrix is close to singular. Try a refined mesh.');
      else
          error(' System matrix is close to singular. Try a refined mesh or another initial approximation.');
      end              
   end    
   
   norm_delta_x = max(abs(delta_x));               % and its norm
      
   new_a(:) = a(:) + lambda * delta_x;             % new approximation
   norm_x = max(abs(a(:)));                        % Inf-norm of x

   % ********** termination conditions
   if norm_x == 0 
      terminate = (norm_F < ftol) | (norm_delta_x < xtol);
   else
      terminate = (norm_F < ftol) | (norm_delta_x / norm_x < xtol);
   end
      
   if terminate % if a termination condition is met
      % ***** display statistics
      if display == 'i' % 'iter', display information every iteration step
         fprintf('   %i     %.2e     %.2e     %.2e    %1.3f\n',...
                  fcount,norm_F,norm_delta_x,norm_x,lambda);
      end        
      
      if display ~= 'o'          % off
         fprintf(' Newton zerofinder terminated successfully \n\n');
      end
      break;
   elseif fcount > max_F_evals    % max. number of function evaluations exceeded
      fprintf('\n Maximum number of function evaluations exceeded \n\n');
      break;
   elseif itcount > max_iter      % max. number of iterations exceeded   
      fprintf('\n Maximum number of iterations exceeded \n\n');
      break;
   end                            % else continue below with next Newton step
   
   while fcount <= max_F_evals
           
      new_F = eval_res(bvpfile,new_a,tau,bvpopt,parameters);   % new residual
      fcount = fcount +1;                             % increase number of function evaluations
              
      simplified_delta_x = U\(L\(-new_F));            % simplified delta_x
            
      if max(abs(simplified_delta_x)) <= (1-lambda/2) * norm_delta_x   % test monotonicity
        break;                % monotonicity condition satisfied, accept correction
      else
         lambda = lambda/2;   % try smaller stepsize
         new_a(:) = a(:) + lambda * delta_x;          % new approximation                     
      end
   end
   
   % ***** display statistics
   if display=='i' % 'iter', display information every iteration step
      fprintf('   %i     %.2e     %.2e     %.2e    %1.3f\n',...
               fcount-1,norm_F,norm_delta_x,norm_x,lambda);
   end
      
   % ***** update log
   if log
      logstruct.normF(itcount) = norm_F;
      logstruct.norm_delta_x(itcount) = norm_delta_x;
      logstruct.norm_x(itcount) = norm_x;
      logstruct.lambda(itcount) = lambda;
   end
      
   lambda = min([2*lambda 1]);     % start next step with doubled stepsize
   itcount = itcount +1;           % increase number of iterations         
      
   a = new_a;                      % new solution approximation   
   F = new_F;                      % new residual
   norm_F = max(abs(F));
   
   DF = eval_jac(bvpfile,a,tau,bvpopt,parameters);    % new Jacobian
end

% ********** finish log         
if log
   logstruct.normF(itcount) = norm_F;
   logstruct.norm_delta_x(itcount) = norm_delta_x;
   logstruct.norm_x(itcount) = norm_x;
   logstruct.condestDF = condest(DF);
   logstruct.itcount = itcount;
   logstruct.fcount  = fcount;
end


%********************************************************************************
%*********************** EVALUATE DISCRETIZATION RESIDUAL ***********************
%********************************************************************************

function F = eval_res(bvpfile,a,tau,bvpopt,parameters)
global N_ p_ d_ t_ phi_ phi_prime_ phi_plus_ phi_minus_ Phi_ Phi_prime_

% ********** f evaluated at the collocation points
[y,y_minus,y_plus,y_prime] = evaluate_y_terms(a,tau,bvpopt);
f = evaluate_f_at_colpts(bvpfile,y,bvpopt,parameters);
     
if bvpopt.Private.Preconditioner
   BC_and_CC = [feval(bvpfile,'R',0,0,y_minus(:,1),y_plus(:,N_),parameters{:}) ...
             y_plus(:,1:N_-1) - y_minus(:,2:N_)];
      
   h = diff(tau);       
   h = ones(d_,1) * [h(1) h(1:N_-1)];
       
   F_matrix = [BC_and_CC./h ; reshape(y_prime - f,d_*p_,N_)];
else   
   F_matrix = [feval(bvpfile,'R',0,0,y_minus(:,1),y_plus(:,N_),parameters{:})  y_plus(:,1:N_-1)-y_minus(:,2:N_) ;...
                reshape(y_prime - f,d_*p_,N_)];
end

F = F_matrix(:);




%********************************************************************************
%************************ EVALUATE RESIDUAL AND JACOBIAN ************************
%********************************************************************************

function [F,DF] = eval_res_and_jac(a,bvpfile,tau,bvpopt,parameters)
global N_ p_ d_ t_ phi_ phi_prime_ phi_plus_ phi_minus_ Phi_ Phi_prime_

% ********** This function is nothing but a combination of eval_res and eval_jac

% ***** do not calculate Jacobian if only F is required
if nargout == 1
   F = eval_res(bvpfile,a,tau,bvpopt,parameters);
   return
end


onesp1 = ones(1,p_+1);
onesp  = ones(1,p_);
dimF = N_*(p_+1)*d_;
dp1 = d_*(p_+1);


Psi_col_idx = reshape(1 : dimF, d_*(p_+1), N_);
Psi_row_idx = Psi_col_idx(d_+1:end,:);

fmat_idx = reshape(1:d_*p_,d_,p_);
fk_idx = reshape(1:d_^2*p_,d_^2,p_);
fprime_idx = reshape(1:d_^2*p_*N_,d_^2*p_,N_);

Psi = sparse([],[],[], dimF, dimF, N_*d_^2*(p_+1)*p_ + 2*d_^2*(p_+1));

[y,y_minus,y_plus,y_prime] = evaluate_y_terms(a,tau,bvpopt);

f      = evaluate_f_at_colpts(bvpfile,y,bvpopt,parameters);
fprime = evaluate_fprime_at_colpts(bvpfile,y,bvpopt,parameters);

dRdya   = feval(bvpfile, 'dR/dya', 0, 0, y_minus(:,1), y_plus(:,N_), parameters{:});
dRdyb   = feval(bvpfile, 'dR/dyb', 0, 0, y_minus(:,1), y_plus(:,N_), parameters{:});

Psi(1:d_,1:d_*(p_+1)) = reshape(dRdya(:) * onesp1 , d_ , d_*(p_+1));
Psi(1:d_,(N_-1)*(p_+1)*d_ +1 : N_*(p_+1)*d_) = reshape(dRdyb(:) * onesp1 , d_ , d_*(p_+1));

if d_==1
   fprime = fprime';
end


% *********** assemble residual
if bvpopt.Private.Preconditioner
   BC_and_CC = [feval(bvpfile,'R',0,0,y_minus(:,1),y_plus(:,N_),parameters{:}) ...
             y_plus(:,1:N_-1) - y_minus(:,2:N_)];
      
   h = diff(tau);       
   h = ones(d_,1) * [h(1) h(1:N_-1)];
       
   F_matrix = [BC_and_CC./h ; reshape(y_prime - f,d_*p_,N_)];
else   
   F_matrix = [feval(bvpfile,'R',0,0,y_minus(:,1),y_plus(:,N_),parameters{:})  y_plus(:,1:N_-1)-y_minus(:,2:N_) ;...
                reshape(y_prime - f,d_*p_,N_)];
end

F = F_matrix(:);



% *********** assemble Jacobian
for k=1:N_
   % *****  evaluate nonconstant part of the k-th interval in Jacobian 
   fprimek = fprime(fprime_idx(:,k));
   
   for j=1:p_
      fprime_matrix(fmat_idx(:,j),:) = reshape(fprimek(fk_idx(:,j)) * onesp1,d_,dp1);
   end
   
   Psi(Psi_row_idx(:,k) , Psi_col_idx(:,k)) = fprime_matrix;
end

% ********** assemble Jacobian from constant and nonconstant parts
DF = Phi_prime_ - Psi .* Phi_;


%********************************************************************************
%****************************** EVALUATE JACOBIAN *******************************
%********************************************************************************

function DF = eval_jac(bvpfile,a,tau,bvpopt,parameters)
global N_ p_ d_ t_ phi_ phi_prime_ phi_plus_ phi_minus_ Phi_ Phi_prime_

% ********** some constants
onesp1 = ones(1,p_+1);
onesp  = ones(1,p_);
dimF = N_*(p_+1)*d_;
dp1 = d_*(p_+1);

% ***** indices for Jacobian-evaluation
Psi_col_idx =reshape(1:dimF,d_*(p_+1),N_);
Psi_row_idx = Psi_col_idx(d_+1:end,:);

fmat_idx = reshape(1:d_*p_,d_,p_);
fk_idx = reshape(1:d_^2*p_,d_^2,p_);
fprime_idx = reshape(1:d_^2*p_*N_,d_^2*p_,N_);

% ********** nonconstant part of Jacobian
Psi = sparse([],[],[], dimF, dimF, N_*d_^2*(p_+1)*p_ + 2*d_^2*(p_+1));

% ********** evaluate ya and yb
ya = a(:,:,1) * phi_minus_;
yb = a(:,:,N_) * phi_plus_;

% ********** evaluate boundary terms
dRdya   = feval(bvpfile, 'dR/dya', 0, 0, ya, yb, parameters{:});
dRdyb   = feval(bvpfile, 'dR/dyb', 0, 0, ya, yb, parameters{:});

Psi(1:d_,Psi_col_idx(:,1)) = reshape(dRdya(:) * onesp1 , d_ , dp1);
Psi(1:d_,Psi_col_idx(:,N_)) = reshape(dRdyb(:) * onesp1 , d_ , dp1);

% ********** evaluate f'(t,y) on collocation grid
y      = evaluate_y_at_colpts(a,bvpopt);
fprime = evaluate_fprime_at_colpts(bvpfile,y,bvpopt,parameters);

% ********** this is necessary since fprime(1:l) is a row vector if fprime is scalar
% ********** and a column vector if fprime is a matrix
if d_==1
   fprime = fprime';
end


% **********  build nonconstant part Psi of the Jacobian
for k=1:N_
   % *****  evaluate nonconstant part of the k-th interval in Jacobian 
   fprimek = fprime(fprime_idx(:,k));
   for j=1:p_
      fprime_matrix(fmat_idx(:,j),:) = reshape(fprimek(fk_idx(:,j)) * onesp1,d_,dp1);
   end
   
   Psi(Psi_row_idx(:,k) , Psi_col_idx(:,k)) = fprime_matrix;
end

% ********** assemble Jacobian from constant and nonconstant parts
DF = Phi_prime_ - Psi .* Phi_;



function [F,DF,f,fprime] = eval_res_and_jac_lin(bvpfile,tau,y0,bvpopt,parameters)
global N_ p_ d_ t_ phi_ phi_plus_ phi_minus_

% ********** define most used globals
N_ = length(tau)-1;
p_ = bvpopt.Degree;
d_ = size(y0,1);    % dimension of y


% ***** Get collocation distibution and colpts of all intervals
[rho,t_] = get_collocation_points(tau,bvpopt.ColPts);

% ***** Evaluate basis polynomials and their derivatives at the colpts
if lower(bvpopt.ColPts(1))=='e' &  bvpopt.Degree <= 8 
   if lower(bvpopt.Basis(1:2))=='la'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_lagrange_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='ru'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_rk_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='le'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_legendre_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='mo'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_monomial_constants(bvpopt);
   else
      coeff = get_basis(rho,bvpopt.Basis);
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_basis(coeff,rho);
   end  
elseif lower(bvpopt.ColPts(1))=='g' & bvpopt.Degree <= 8 
   if lower(bvpopt.Basis(1:2))=='la'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_lagrange_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='ru'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_rk_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='le'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_legendre_constants(bvpopt);
   elseif lower(bvpopt.Basis(1:2))=='mo'
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_monomial_constants(bvpopt);
   else
      coeff = get_basis(rho,bvpopt.Basis);
      [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_basis(coeff,rho);
   end
else  
   % ***** Get basis coefficients of interval [0,1]
   coeff = get_basis(rho,bvpopt.Basis);
   
   % ***** Evaluate basis polynomials and their derivatives at the colpts
   [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_basis(coeff,rho);
end

% ***** globalify the phi-terms
phi_ = phi;
phi_plus_ = phi_plus;
phi_minus_ = phi_minus;

% ***** make code a little bit more readable
p=p_;d=d_;N=N_;

% ********** assemble blocks of the Jacobian
Id = speye(d);

phi_block = zeros(p*d,(p+1)*d);
phi_prime_block = zeros(p*d,(p+1)*d);

phi_plus_block = zeros(d,(p+1)*d);
phi_minus_block = zeros(d,(p+1)*d);

phi_plus_diag_block = zeros(d,(p+1)*d);
phi_minus_diag_block = zeros(d,(p+1)*d);

i_idx = reshape(1:p*d,d,p);
one_to_d = 1:d;
for j=1:p+1
   j_idx = (j-1)*d + 1 :j*d;
   for i=1:p
      phi_block(i_idx(:,i) , j_idx) = phi_(j,i);
      phi_prime_block(i_idx(:,i), j_idx) = phi_prime_pattern(j,i) * Id;
   end
   phi_plus_diag_block(one_to_d, j_idx)  = phi_plus_(j) * Id;
   phi_minus_diag_block(one_to_d, j_idx) = phi_minus_(j) * Id;
   
   phi_plus_block(one_to_d, j_idx)  = phi_plus_(j);
   phi_minus_block(one_to_d, j_idx) = phi_minus_(j);
end
phi_plus_minus_block = [phi_plus_diag_block  -phi_minus_diag_block];


% ********** define some constants
onesp1 = ones(1,p+1);
onesp  = ones(1,p);
zerosd = zeros(d_,1);

h  = diff(tau);
dimF = N*(p+1)*d;
d2p = d^2*p; 
dp1 = d * (p+1);

% ***** indices for Jacobian-evaluation
Psi_col_idx =reshape(1:dimF,d_*(p_+1),N_);

cc_row_idx = Psi_col_idx(1:d_,:);
Psi_row_idx = Psi_col_idx(d_+1:end,:);

cc_col_lo = [0  1:d*(p+1):(N-2)*d*(p+1)+1];
cc_col_hi = cc_col_lo + (2*d*(p+1)-1);

fmat_idx = reshape(1:d*p,d,p);
fk_idx = reshape(1:d^2*p,d^2,p);
fprime_idx = reshape(1:d_^2*p_*N_,d_^2*p_,N_);

% ********** reserve space
DF = sparse([],[],[],dimF,dimF, (d^2 + (N-1)*d) * (nnz(phi_minus) + nnz(phi_plus)) + ...  % BC and CC
                                N*d^2*nnz(phi) + N*d*nnz(phi_prime_pattern));   % this is not exact
                             
% ********** do all the bvpfile evaluations
y      = zeros(d,N*p);
f      = evaluate_f_at_colpts(bvpfile,y,bvpopt,parameters);
fprime = evaluate_fprime_at_colpts(bvpfile,y,bvpopt,parameters);

if d==1
   fprime = fprime';
end

% ********** start assembling F and DF
% ***** build F
if bvpopt.Private.Preconditioner
   F_matrix = [1/h(1) * feval(bvpfile,'R',0,0,zerosd,zerosd,parameters{:}) zeros(d_,N-1);
               reshape(-f,d_*p_,N_)];
else
   F_matrix = [feval(bvpfile,'R',0,0,zerosd,zerosd,parameters{:}) zeros(d_,N-1);
               reshape(-f,d_*p_,N_)];
end
F = F_matrix(:);

                             
% ***** evaluate boundary matrices; in the linear case, they must not depend on y
dRdya   = feval(bvpfile, 'dR/dya', [], [], {}, {}, parameters{:});
dRdyb   = feval(bvpfile, 'dR/dyb', [], [], {}, {}, parameters{:});


if bvpopt.Private.Preconditioner
   % ***** boundary terms of the Jacobian
   DF(cc_row_idx(:,1),Psi_col_idx(:,1)) = (phi_minus_block / h(1)) .* reshape(dRdya(:) * onesp1 , d , d*(p+1)) ;
   DF(cc_row_idx(:,1),Psi_col_idx(:,N)) = (phi_plus_block /h(1)) .* reshape(dRdyb(:) * onesp1 , d , d*(p+1));
  
   % ***** first interval of the Jacobian
   fprime_matrix = zeros(p*d,(p+1)*d);
   for j=1:p                              % [f'(t1,y1) ... f'(t1,y1); ... ;f'(tp,yp) ... f'(tp,yp)]
      fprime_matrix(fmat_idx(:,j),:) = reshape(fprime(fk_idx(:,j)) * onesp1,d,(p+1)*d);
   end

   DF(Psi_row_idx(:,1),Psi_col_idx(:,1)) = ...
     (phi_prime_block./ h(1)) - (phi_block .* fprime_matrix);   
             
   % ***** all the other intervals 
   for k=2:N
    
      % ***** Continuity Conditions between (k-1)-th and k-th interval
      DF( cc_row_idx(:,k), cc_col_lo(k) : cc_col_hi(k) ) = 1/h(k-1) * phi_plus_minus_block;
     
      % ***** Jacobian terms on k-th interval
      fprimek = fprime(fprime_idx(:,k));
   
      for j=1:p
         fprime_matrix(fmat_idx(:,j),:) = reshape(fprimek(fk_idx(:,j)) * onesp1,d,dp1);
      end
         
      DF(Psi_row_idx(:,k),Psi_col_idx(:,k)) = ...
        (phi_prime_block./ h(k)) - (phi_block .* fprime_matrix);
   end   
else
   
   % ***** boundary terms of the Jacobian
   DF(cc_row_idx(:,1),Psi_col_idx(:,1)) = (phi_minus_block) .* reshape(dRdya(:) * onesp1 , d , d*(p+1)) ;
   DF(cc_row_idx(:,1),Psi_col_idx(:,N)) = (phi_plus_block) .* reshape(dRdyb(:) * onesp1 , d , d*(p+1));
  
   % ***** first interval of the Jacobian
   fprime_matrix = zeros(p*d,(p+1)*d);
   for j=1:p                              % [f'(t1,y1) ... f'(t1,y1); ... ;f'(tp,yp) ... f'(tp,yp)]
      fprime_matrix(fmat_idx(:,j),:) = reshape(fprime(fk_idx(:,j)) * onesp1,d,(p+1)*d);
   end

   DF(Psi_row_idx(:,1),Psi_col_idx(:,1)) = ...
     (phi_prime_block./ h(1)) - (phi_block .* fprime_matrix);   
   % ***** all the other intervals 
   for k=2:N
            
      % ***** Continuity Conditions between (k-1)-th and k-th interval
      DF( cc_row_idx(:,k), cc_col_lo(k) : cc_col_hi(k) ) = phi_plus_minus_block;

      % ***** Jacobian terms on k-th interval
      fprimek = fprime((k-1)*d2p +1 : k * d2p);
   
      for j=1:p
         fprime_matrix(fmat_idx(:,j),:) = reshape(fprimek(fk_idx(:,j))' * onesp1,d,(p+1)*d);
      end
      DF(Psi_row_idx(:,k),Psi_col_idx(:,k)) = ...
        (phi_prime_block./ h(k)) - (phi_block .* fprime_matrix);   
   end
end






%********************************************************************************
%******************************** LITTLE HELPERS ********************************
%********************************************************************************


function [y,y_minus,y_plus,y_prime] = evaluate_y_terms(a,tau,bvpopt)
global N_ p_ d_ phi_ phi_minus_ phi_plus_ phi_prime_

basis = lower(bvpopt.Basis(1:2));

if basis == 'la' % Lagrange Basis
   y = reshape(a,d_,(p_+1)*N_);
   
   y_minus = y(:,1:p_+1:end);
   y(:,1:p_+1:end) = [];
   
   y_plus = zeros(d_,N_);
   y_prime = zeros(d_,N_ * p_);
   
   p_idx = reshape(1:N_*p_, p_, N_);
   
   for k=1:N_   
      y_plus(:,k) = a(:,:,k) * phi_plus_;
      y_prime(:,p_idx(:,k)) = a(:,:,k) * phi_prime_(:,:,k);
   end
elseif basis == 'mo'
   b = reshape(a,d_,(p_+1)*N_);
   y_minus = b(:,1:p_+1:end);
   
   y = zeros(d_,N_ * (p_+1));
   y_prime = zeros(d_,N_ * p_);

   p1_idx = reshape(1:N_*(p_+1), (p_+1), N_);
   p_idx = reshape(1:N_*p_, p_, N_);
   
   phi_and_phi_plus = [phi_ phi_plus_];

   for k=1:N_   
      y(:,p1_idx(:,k)) = a(:,:,k) * phi_and_phi_plus;
      y_prime(:,p_idx(:,k)) = a(:,:,k) * phi_prime_(:,:,k);
   end
   
   y_plus = y(:,p_+1:p_+1:end);
   y(:,p_+1:p_+1:end) = [];
elseif basis == 'ru'
   h=diff(tau);
   h_matrix = reshape( ones(d_*p_,1) * h , d_, p_*N_);
   
   % ***** bring into derivative form
   b = reshape(a,d_,(p_+1)*N_);
   
   % *****
   y_minus = b(:,1:p_+1:end);
   
   % ***** delete values at (left) meshpoint, a on collocation points
   b(:,1:p_+1:end) = [];
   
   % ***** divide by intervallengths
   y_prime = b ./ h_matrix;
   
   
   y = zeros(d_,N_ * (p_+1));
   p1_idx = reshape(1:N_*(p_+1), (p_+1), N_);
   
   phi_and_phi_plus = [phi_ phi_plus_];
   
   for k=1:N_   
      y(:,p1_idx(:,k)) = a(:,:,k) * phi_and_phi_plus;
   end
   
   y_plus = y(:,p_+1:p_+1:end);
   y(:,p_+1:p_+1:end) = [];

else
   y = zeros(d_,N_ * (p_+1));
   y_prime = zeros(d_,N_ * p_);
   
   p2_idx = reshape(1:N_*(p_+2), (p_+2), N_);
   p_idx = reshape(1:N_*p_, p_, N_);
   
   phi_all = [phi_minus_ phi_ phi_plus_];

   for k=1:N_   
      y(:,p2_idx(:,k)) = a(:,:,k) * phi_all;
      y_prime(:,p_idx(:,k)) = a(:,:,k) * phi_prime_(:,:,k);
   end
   
   y_minus = y(:,1:p_+2:end);
   y_plus = y(:,p_+2:p_+2:end);
   
   y(:,1:p_+2:end) = [];
   y(:,p_+1:p_+1:end) = [];   
end


function y = evaluate_y_at_colpts(a,bvpopt)
global N_ p_ d_ phi_

if lower(bvpopt.Basis(1:2)) == 'la' % Lagrange Basis
   y = reshape(a,d_,(p_+1)*N_);   
   y(:,1:p_+1:end) = [];
else
   y = zeros(d_,N_ * p_);
   col_idx = reshape(1:N_*p_, p_, N_);

   for k=1:N_   
      y(:,col_idx(:,k)) = a(:,:,k) * phi_;
   end
end



function f = evaluate_f_at_colpts(bvpfile,y,bvpopt,parameters)
global d_ p_ N_ t_

if bvpopt.fVectorized
   f = feval(bvpfile, 'f', t_(:)', y,0,0,parameters{:});
else
   f = zeros(d_,p_*N_);
   
   for l=1:N_*p_
      f(:,l) = feval(bvpfile, 'f', t_(l)', y(:,l),0,0,parameters{:});
   end      
end



function fprime = evaluate_fprime_at_colpts(bvpfile,y,bvpopt,parameters);
global d_ p_ N_ t_

if bvpopt.JacVectorized
   fprime = feval(bvpfile, 'df/dy', t_(:)', y,0,0,parameters{:});
else
   fprime = zeros(d_,d_,p_*N_);
   
   for l=1:N_*p_
      fprime(:,:,l) = feval(bvpfile, 'df/dy', t_(l)', y(:,l),0,0,parameters{:});
   end      
end
fprime = reshape(fprime, d_, d_*p_*N_);




function a=y2a(tau,y)
global p_ d_ N_ t_ phi_inv_

a=zeros(d_,p_+1,N_);
ycol= interp1(tau,y',t_(:),'spline')';

ycol_idx = reshape(1:p_*N_,p_,N_);
for k=1:N_
   a(:,:,k)=[y(:,k) ycol(:,ycol_idx(:,k))] * phi_inv_;
end


function y = evaluate_y_at_meshpts(a,bvpopt)
global N_ d_ p_ phi_minus_ phi_plus_

basis = lower(bvpopt.Basis(1:2));

if basis == 'la' | basis == 'ru' | basis == 'mo'
   % ***** reshape a to mesh form
   b = reshape(a,d_,(p_+1)*N_);
   
   y = b(:,1:p_+1:end);
   y = [y  a(:,:,N_)*phi_plus_];
else
   y = zeros(d_,N_+1);
   for k=1:N_
      y(:,k)=a(:,:,k)*phi_minus_;
   end
   y(:,N_+1) = a(:,:,N_)*phi_plus_;
end

%********************************************************************************
%******************************** CHECK BVPFILE *********************************
%********************************************************************************


function check_bvpfile(bvpfile,tau,y0,bvpopt,parameters);

d = size(y0,1);

t1 = tau(1) + 0.1 * (tau(2)-tau(1));
tN = tau(end) -0.1 * (tau(end)-tau(end-1));

ya = y0(:,1);
yb = y0(:,end);

% ***** Check f
try 
   f = feval(bvpfile,'f',t1,ya,0,0,parameters{:});
catch
   error([' Error in evaluating the right hand side f(t,y). Check the bvpfile ! ']);
end

if ~all(size(f)==size(ya))
   error([' y and f(t,y) do not match in dimension. Check the bvpfile ! ']);
end

if bvpopt.fVectorized
   try
      f = feval(bvpfile,'f',[t1 tN],[ya yb],0,0,parameters{:});
      if size(f,2)~=2
         error([' The bvpfile is not properly f-vectorized.']);
      end
   catch
      error([' The bvpfile is not f-vectorized. Unset ''fVectorized'' in bvpopt.']);
   end
end

if bvpopt.JacVectorized
   try
      fprime = reshape( feval(bvpfile,'df/dy',[t1 tN],[ya yb],0,0,parameters{:}) , d, d, 2);
      if any(size(fprime) - [d d 2]) 
         error([' The bvpfile is not properly Jacobian-vectorized.']);
      end
   catch
      error([' The bvpfile is not Jacobian-vectorized.  Unset ''JacVectorized'' in bvpopt.']);
   end
end


% ***** Check R
try 
   R = feval(bvpfile,'R',0,0,ya,yb, parameters{:});
catch
   error([' Error in evaluating the boundary condition R(ya,yb). Check the bvpfile ! ']);
end

if ~all(size(R)==size(ya))
   error([' y and R(ya,yb) do not match in dimension. Check the bvpfile ! ']);
end


% ***** Check df/dy
try 
   df = feval(bvpfile,'df/dy',t1,ya,0,0,parameters{:});
catch
   error([' Error in evaluating the Jacobian df/dy. Check the bvpfile ! ']);
end

if ~all(size(df)==d)
   error([' y and df/dy do not match in dimension. Check the bvpfile ! ']);
end

% ***** Check dR/dya
try 
   dRdya = feval(bvpfile,'dR/dya',0,0,ya,yb,parameters{:});
catch
   error([' Error in evaluating the Jacobian dR/dya. Check the bvpfile ! ']);
end

if ~all(size(dRdya)==d)
   error([' y and dR/dya do not match in dimension. Check the bvpfile ! ']);
end


% ***** Check dR/dyb
try 
   dRdyb = feval(bvpfile,'dR/dyb',0,0,ya,yb,parameters{:});
catch
   error([' Error in evaluating the Jacobian dR/dyb. Check the bvpfile ! ']);
end

if ~all(size(dRdyb)==d)
   error([' y and dR/dyb do not match in dimension. Check the bvpfile ! ']);
end


%********************************************************************************
%************************** CHECK BVPFILE JACOBIANS *****************************
%********************************************************************************

function check_bvpfile_jacobians(bvpfile,tau,y0,bvpopt,parameters);
% checks if Jacobians in bvpfile match finite difference approximations

fprintf(' Check Jacobians ...\n');

t1 = tau(1) + 0.1 * (tau(2)-tau(1));
tN = tau(end) -0.1 * (tau(end)-tau(end-1));

ya = y0(:,1);
yb = y0(:,end);
yad = ya;     % perturbed ya, for finite difference approximation
ybd = yb;

%********************************* Check df/dy **********************************

f = feval(bvpfile,'f',t1,ya,0,0,parameters{:});
Dff = zeros(length(ya));
for j=1:length(ya)
   
   yad(j)=ya(j) + 1e-8;
   
   Dff(:,j) = (feval(bvpfile,'f',t1,yad,0,0,parameters{:}) - f) * 1e8;
   
   yad(j)=ya(j);
end

Df = feval(bvpfile,'df/dy',t1,ya,0,0,parameters{:});

m=max(abs(Df(:)-Dff(:)));
normf = norm(f);

if ((normf ~= 0) & (m/normf > 1e-7)) | ((normf == 0) & (m > 1e-7))
   fprintf('\n WARNING ! Jacobian df/dy does not match finite difference approximation ! \n');
   fprintf(' df/dy - df/dy_finite_diff :\n\n');
   disp(Df-Dff);
else
   fprintf(' Maximum difference between Jacobian df/dy and finite difference \n');
   fprintf([' approximation is ' num2str(m) ' .\n']);
end


%********************************* Check dR/dya *********************************

R = feval(bvpfile,'R',0,0,ya,yb,parameters{:});
DRf = zeros(length(ya));
for j=1:length(ya)
   yad(j)=ya(j) + 1e-4;
   DRf(:,j) = (feval(bvpfile,'R',0,0,yad,yb,parameters{:}) - R) * 1e4;
   yad(j)=ya(j);   
end

DR = feval(bvpfile,'dR/dya',0,0,ya,yb,parameters{:});

m=max(abs(DR(:)-DRf(:)));
normR = norm(R);

if ((normR ~= 0) & (m/normR > 1e-7)) | ((normR == 0) & (m > 1e-7))
   fprintf('\n WARNING ! Jacobian dR/dya does not match finite difference approximation ! \n');
   fprintf(' dR/dya - dR/dya_finite_diff :\n\n');
   disp(DR-DRf);
else
   fprintf(' Maximum difference between Jacobian dR/dya and finite difference \n');
   fprintf([' approximation is ' num2str(m) ' .\n']);
end


%********************************* Check dR/dyb *********************************

for j=1:length(ya)
   ybd(j)=yb(j) + 1e-4;
   DRf(:,j) = (feval(bvpfile,'R',0,0,ya,ybd,parameters{:}) - R) * 1e4;
   ybd(j)=yb(j);   
end

DR = feval(bvpfile,'dR/dyb',0,0,ya,yb,parameters{:});

m=max(abs(DR(:)-DRf(:)));
if ((normR ~= 0) & (m/normR > 1e-7)) | ((normR == 0) & (m > 1e-7))
   fprintf('\n WARNING ! Jacobian dR/dyb does not match finite difference approximation ! \n');
   fprintf(' dR/dyb - dR/dyb_finite_diff :\n\n');
   disp(DR-DRf);   
else
   fprintf(' Maximum difference between Jacobian dR/dyb and finite difference \n');
   fprintf([' approximation is ' num2str(m) ' .\n\n']);
end


%********************************************************************************
%********************** GET DEFAULT INITIAL APPROXIMATION ***********************
%********************************************************************************


function  y0 = get_default_initial_approximation(bvpfile,tau,bvpopt,parameters);

if bvpopt.Private.IsLinear
   DR = feval(bvpfile,'dR/dya',0,0,0,0,parameters{:});
else       % In the nonlinear case, we have to use trial and error
   
   success = 0;
   for i=1:100
      try
         DR = feval(bvpfile,'dR/dya',0,0,zeros(i,1),zeros(i,1),parameters{:});
         success = 1;
      end
      
      if success
         break;
      end      
   end
   
   if ~success  % the dimensions from 1 to 100 have been tried unsuccessfully
      error([' Could not determine the dimension of the system of diff. eq.'...
             ' Please check the bvpfile or provide an initial approximation.']);
   end
end

if bvpopt.Display & (~bvpopt.Private.IsLinear)
   fprintf(' Used default initial approximation (all zeros) \n'); 
end

% ***** default initial approximation
y0 = zeros(size(DR,1),length(tau));






%********************************************************************************
%************************* PHI-TERMS IN DOUBLE PRECISION ************************
%********************************************************************************

function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_lagrange_constants(bvpopt)
Id = eye(bvpopt.Degree+1);

phi_minus = Id(:,1);
phi = Id(:,2:end);

switch bvpopt.Degree
case 1 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +2.000000000000000e+000];
   phi_prime_pattern = [...
      -2.000000000000000e+000 ;...
      +2.000000000000000e+000 ];
case 2 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -3.000000000000000e+000 ;...
      +3.000000000000000e+000];
   phi_prime_pattern = [...
      -1.500000000000000e+000 +1.500000000000000e+000 ;...
      +0.000000000000000e+000 -6.000000000000000e+000 ;...
      +1.500000000000000e+000 +4.500000000000000e+000 ];
case 3 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +4.000000000000000e+000 ;...
      -6.000000000000000e+000 ;...
      +4.000000000000000e+000];
   phi_prime_pattern = [...
      -1.333333333333333e+000 +6.666666666666666e-001 -1.333333333333333e+000 ;...
      -2.000000000000000e+000 -4.000000000000000e+000 +6.000000000000000e+000 ;...
      +4.000000000000000e+000 +2.000000000000000e+000 -1.200000000000000e+001 ;...
      -6.666666666666666e-001 +1.333333333333333e+000 +7.333333333333333e+000 ];
case 4 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -5.000000000000000e+000 ;...
      +1.000000000000000e+001 ;...
      -1.000000000000000e+001 ;...
      +5.000000000000000e+000];
   phi_prime_pattern = [...
      -1.250000000000000e+000 +4.166666666666667e-001 -4.166666666666667e-001 +1.250000000000000e+000 ;...
      -4.166666666666667e+000 -3.333333333333334e+000 +2.500000000000000e+000 -6.666666666666667e+000 ;...
      +7.500000000000000e+000 +0.000000000000000e+000 -7.500000000000000e+000 +1.500000000000000e+001 ;...
      -2.500000000000000e+000 +3.333333333333334e+000 +4.166666666666667e+000 -2.000000000000000e+001 ;...
      +4.166666666666667e-001 -4.166666666666667e-001 +1.250000000000000e+000 +1.041666666666667e+001 ];
case 5 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +6.000000000000000e+000 ;...
      -1.500000000000000e+001 ;...
      +2.000000000000000e+001 ;...
      -1.500000000000000e+001 ;...
      +6.000000000000000e+000];
   phi_prime_pattern = [...
      -1.200000000000000e+000 +3.000000000000000e-001 -2.000000000000000e-001 +3.000000000000000e-001 -1.200000000000000e+000 ;...
      -6.500000000000000e+000 -3.000000000000000e+000 +1.500000000000000e+000 -2.000000000000000e+000 +7.500000000000000e+000 ;...
      +1.200000000000000e+001 -2.000000000000000e+000 -6.000000000000000e+000 +6.000000000000000e+000 -2.000000000000000e+001 ;...
      -6.000000000000000e+000 +6.000000000000000e+000 +2.000000000000000e+000 -1.200000000000000e+001 +3.000000000000000e+001 ;...
      +2.000000000000000e+000 -1.500000000000000e+000 +3.000000000000000e+000 +6.500000000000000e+000 -3.000000000000000e+001 ;...
      -3.000000000000000e-001 +2.000000000000000e-001 -3.000000000000000e-001 +1.200000000000000e+000 +1.370000000000000e+001 ];
case 6 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -7.000000000000000e+000 ;...
      +2.100000000000000e+001 ;...
      -3.500000000000000e+001 ;...
      +3.500000000000000e+001 ;...
      -2.100000000000000e+001 ;...
      +7.000000000000000e+000];
   phi_prime_pattern = [...
      -1.166666666666667e+000 +2.333333333333333e-001 -1.166666666666667e-001 +1.166666666666667e-001 -2.333333333333333e-001 +1.166666666666667e+000 ;...
      -8.983333333333333e+000 -2.800000000000000e+000 +1.050000000000000e+000 -9.333333333333334e-001 +1.750000000000000e+000 -8.400000000000000e+000 ;...
      +1.750000000000000e+001 -4.083333333333333e+000 -5.250000000000000e+000 +3.500000000000000e+000 -5.833333333333333e+000 +2.625000000000000e+001 ;...
      -1.166666666666667e+001 +9.333333333333334e+000 +0.000000000000000e+000 -9.333333333333334e+000 +1.166666666666667e+001 -4.666666666666666e+001 ;...
      +5.833333333333333e+000 -3.500000000000000e+000 +5.250000000000000e+000 +4.083333333333333e+000 -1.750000000000000e+001 +5.250000000000000e+001 ;...
      -1.750000000000000e+000 +9.333333333333334e-001 -1.050000000000000e+000 +2.800000000000000e+000 +8.983333333333333e+000 -4.200000000000000e+001 ;...
      +2.333333333333333e-001 -1.166666666666667e-001 +1.166666666666667e-001 -2.333333333333333e-001 +1.166666666666667e+000 +1.715000000000000e+001 ];
case 7 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +8.000000000000000e+000 ;...
      -2.800000000000000e+001 ;...
      +5.600000000000000e+001 ;...
      -7.000000000000000e+001 ;...
      +5.600000000000000e+001 ;...
      -2.800000000000000e+001 ;...
      +8.000000000000000e+000];
   phi_prime_pattern = [...
      -1.142857142857143e+000 +1.904761904761905e-001 -7.619047619047618e-002 +5.714285714285714e-002 -7.619047619047618e-002 +1.904761904761905e-001 -1.142857142857143e+000 ;...
      -1.160000000000000e+001 -2.666666666666667e+000 +8.000000000000000e-001 -5.333333333333333e-001 +6.666666666666666e-001 -1.600000000000000e+000 +9.333333333333334e+000 ;...
      +2.400000000000000e+001 -6.266666666666667e+000 -4.800000000000000e+000 +2.400000000000000e+000 -2.666666666666667e+000 +6.000000000000000e+000 -3.360000000000000e+001 ;...
      -2.000000000000000e+001 +1.333333333333333e+001 -2.000000000000000e+000 -8.000000000000000e+000 +6.666666666666667e+000 -1.333333333333333e+001 +7.000000000000000e+001 ;...
      +1.333333333333333e+001 -6.666666666666667e+000 +8.000000000000000e+000 +2.000000000000000e+000 -1.333333333333333e+001 +2.000000000000000e+001 -9.333333333333333e+001 ;...
      -6.000000000000000e+000 +2.666666666666667e+000 -2.400000000000000e+000 +4.800000000000000e+000 +6.266666666666667e+000 -2.400000000000000e+001 +8.400000000000000e+001 ;...
      +1.600000000000000e+000 -6.666666666666666e-001 +5.333333333333333e-001 -8.000000000000000e-001 +2.666666666666667e+000 +1.160000000000000e+001 -5.600000000000000e+001 ;...
      -1.904761904761905e-001 +7.619047619047618e-002 -5.714285714285714e-002 +7.619047619047618e-002 -1.904761904761905e-001 +1.142857142857143e+000 +2.074285714285714e+001 ];
case 8 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -9.000000000000000e+000 ;...
      +3.600000000000000e+001 ;...
      -8.400000000000000e+001 ;...
      +1.260000000000000e+002 ;...
      -1.260000000000000e+002 ;...
      +8.400000000000000e+001 ;...
      -3.600000000000000e+001 ;...
      +9.000000000000000e+000];
   phi_prime_pattern = [...
      -1.125000000000000e+000 +1.607142857142857e-001 -5.357142857142857e-002 +3.214285714285714e-002 -3.214285714285714e-002 +5.357142857142857e-002 -1.607142857142857e-001 +1.125000000000000e+000 ;...
      -1.433571428571429e+001 -2.571428571428572e+000 +6.428571428571429e-001 -3.428571428571429e-001 +3.214285714285715e-001 -5.142857142857142e-001 +1.500000000000000e+000 -1.028571428571429e+001 ;...
      +3.150000000000000e+001 -8.550000000000001e+000 -4.500000000000000e+000 +1.800000000000000e+000 -1.500000000000000e+000 +2.250000000000000e+000 -6.300000000000000e+000 +4.200000000000000e+001 ;...
      -3.150000000000000e+001 +1.800000000000000e+001 -4.050000000000000e+000 -7.200000000000000e+000 +4.500000000000000e+000 -6.000000000000000e+000 +1.575000000000000e+001 -1.008000000000000e+002 ;...
      +2.625000000000000e+001 -1.125000000000000e+001 +1.125000000000000e+001 +0.000000000000000e+000 -1.125000000000000e+001 +1.125000000000000e+001 -2.625000000000000e+001 +1.575000000000000e+002 ;...
      -1.575000000000000e+001 +6.000000000000000e+000 -4.500000000000000e+000 +7.200000000000000e+000 +4.050000000000000e+000 -1.800000000000000e+001 +3.150000000000000e+001 -1.680000000000000e+002 ;...
      +6.300000000000000e+000 -2.250000000000000e+000 +1.500000000000000e+000 -1.800000000000000e+000 +4.500000000000000e+000 +8.550000000000001e+000 -3.150000000000000e+001 +1.260000000000000e+002 ;...
      -1.500000000000000e+000 +5.142857142857142e-001 -3.214285714285715e-001 +3.428571428571429e-001 -6.428571428571429e-001 +2.571428571428572e+000 +1.433571428571429e+001 -7.200000000000000e+001 ;...
      +1.607142857142857e-001 -5.357142857142857e-002 +3.214285714285714e-002 -3.214285714285714e-002 +5.357142857142857e-002 -1.607142857142857e-001 +1.125000000000000e+000 +2.446071428571429e+001 ];
end



function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_rk_constants(bvpopt)
Id = eye(bvpopt.Degree+1);

phi_minus = Id(:,1);
phi_prime_pattern = Id(:,2:end);

switch bvpopt.Degree
case 1 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +1.000000000000000e+000];
   phi = [...
      +1.000000000000000e+000 ;...
      +5.000000000000000e-001 ];
case 2 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +5.000000000000000e-001 ;...
      +5.000000000000000e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +5.000000000000000e-001 +6.666666666666666e-001 ;...
      -1.666666666666667e-001 +0.000000000000000e+000 ];
case 3 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +6.666666666666666e-001 ;...
      -3.333333333333333e-001 ;...
      +6.666666666666666e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.791666666666666e-001 +5.833333333333333e-001 +5.625000000000000e-001 ;...
      -3.333333333333333e-001 -1.666666666666666e-001 +0.000000000000000e+000 ;...
      +1.041666666666666e-001 +8.333333333333330e-002 +1.875000000000000e-001 ];
case 4 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +4.583333333333333e-001 ;...
      +4.166666666666666e-002 ;...
      +4.166666666666666e-002 ;...
      +4.583333333333333e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.583333333333333e-001 +5.333333333333333e-001 +5.250000000000000e-001 +5.333333333333333e-001 ;...
      -4.916666666666667e-001 -3.333333333333333e-001 -2.250000000000000e-001 -2.666666666666667e-001 ;...
      +3.083333333333334e-001 +2.666666666666667e-001 +3.750000000000000e-001 +5.333333333333333e-001 ;...
      -7.500000000000000e-002 -6.666666666666667e-002 -7.500000000000000e-002 +0.000000000000000e+000 ];
case 5 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +5.500000000000000e-001 ;...
      -7.000000000000000e-001 ;...
      +1.300000000000000e+000 ;...
      -7.000000000000000e-001 ;...
      +5.500000000000000e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.400462962962963e-001 +4.981481481481482e-001 +4.937500000000000e-001 +4.962962962962963e-001 +4.918981481481481e-001 ;...
      -6.421296296296296e-001 -4.925925925925926e-001 -4.125000000000000e-001 -4.296296296296296e-001 -4.050925925925926e-001 ;...
      +6.055555555555555e-001 +5.444444444444444e-001 +6.500000000000000e-001 +7.555555555555555e-001 +6.944444444444444e-001 ;...
      -2.949074074074074e-001 -2.703703703703704e-001 -2.875000000000000e-001 -2.074074074074074e-001 -5.787037037037037e-002 ;...
      +5.810185185185185e-002 +5.370370370370370e-002 +5.625000000000000e-002 +5.185185185185185e-002 +1.099537037037037e-001 ];
case 6 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +4.243055555555556e-001 ;...
      -3.145833333333333e-001 ;...
      +3.902777777777778e-001 ;...
      +3.902777777777778e-001 ;...
      -3.145833333333333e-001 ;...
      +4.243055555555556e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.243055555555556e-001 +4.714285714285714e-001 +4.687500000000000e-001 +4.698412698412698e-001 +4.687500000000000e-001 +4.714285714285714e-001 ;...
      -7.860119047619047e-001 -6.444444444444445e-001 -5.812500000000000e-001 -5.904761904761905e-001 -5.828373015873016e-001 -6.000000000000000e-001 ;...
      +9.902777777777778e-001 +9.111111111111111e-001 +1.012500000000000e+000 +1.092063492063492e+000 +1.066468253968254e+000 +1.114285714285714e+000 ;...
      -7.240079365079365e-001 -6.761904761904762e-001 -7.017857142857142e-001 -6.222222222222222e-001 -5.208333333333334e-001 -6.000000000000000e-001 ;...
      +2.854166666666667e-001 +2.682539682539682e-001 +2.758928571428572e-001 +2.666666666666667e-001 +3.298611111111111e-001 +4.714285714285714e-001 ;...
      -4.712301587301587e-002 -4.444444444444444e-002 -4.553571428571429e-002 -4.444444444444444e-002 -4.712301587301587e-002 +0.000000000000000e+000 ];
case 7 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +4.867724867724868e-001 ;...
      -1.009523809523810e+000 ;...
      +2.323809523809524e+000 ;...
      -2.602116402116402e+000 ;...
      +2.323809523809524e+000 ;...
      -1.009523809523810e+000 ;...
      +4.867724867724868e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.107163525132275e-001 +4.501653439153439e-001 +4.483816964285715e-001 +4.489417989417989e-001 +4.485470403439154e-001 +4.491071428571429e-001 +4.473234953703704e-001 ;...
      -9.244543650793651e-001 -7.898809523809524e-001 -7.379464285714286e-001 -7.436507936507937e-001 -7.403273809523809e-001 -7.446428571428572e-001 -7.315972222222222e-001 ;...
      +1.458227926587302e+000 +1.362202380952381e+000 +1.459319196428571e+000 +1.523015873015873e+000 +1.509021577380952e+000 +1.524107142857143e+000 +1.482335069444444e+000 ;...
      -1.422486772486773e+000 -1.344973544973545e+000 -1.378571428571429e+000 -1.301058201058201e+000 -1.223544973544974e+000 -1.257142857142857e+000 -1.179629629629630e+000 ;...
      +8.414744543650794e-001 +7.997023809523810e-001 +8.147879464285714e-001 +8.007936507936508e-001 +8.644903273809523e-001 +9.616071428571429e-001 +8.655815972222222e-001 ;...
      -2.779265873015873e-001 -2.648809523809524e-001 -2.691964285714286e-001 -2.658730158730159e-001 -2.715773809523809e-001 -2.196428571428571e-001 -8.506944444444443e-002 ;...
      +3.944899140211640e-002 +3.766534391534392e-002 +3.822544642857143e-002 +3.783068783068783e-002 +3.839079034391534e-002 +3.660714285714286e-002 +7.605613425925926e-002 ];
case 8 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +3.988839285714286e-001 ;...
      -6.256696428571429e-001 ;...
      +1.108705357142857e+000 ;...
      -3.819196428571429e-001 ;...
      -3.819196428571429e-001 ;...
      +1.108705357142857e+000 ;...
      -6.256696428571429e-001 ;...
      +3.988839285714286e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +3.988839285714286e-001 +4.326866549088771e-001 +4.314236111111111e-001 +4.317460317460318e-001 +4.315705834803057e-001 +4.317460317460318e-001 +4.314236111111111e-001 +4.326866549088771e-001 ;...
      -1.058356297766020e+000 -9.298941798941799e-001 -8.859871031746032e-001 -8.898295120517342e-001 -8.881035052910052e-001 -8.896825396825396e-001 -8.869277263374485e-001 -8.973544973544974e-001 ;...
      +2.006059854497355e+000 +1.894179894179894e+000 +1.987276785714286e+000 +2.040211640211640e+000 +2.031456679894180e+000 +2.038095238095238e+000 +2.027488425925926e+000 +2.065608465608466e+000 ;...
      -2.447528108465609e+000 -2.334420928865373e+000 -2.375570436507937e+000 -2.300529100529101e+000 -2.237769143151088e+000 -2.256349206349206e+000 -2.231655092592593e+000 -2.312992357436802e+000 ;...
      +1.931072714579659e+000 +1.849735449735450e+000 +1.874429563492064e+000 +1.855849500293945e+000 +1.918609457671958e+000 +1.993650793650794e+000 +1.952501286008231e+000 +2.065608465608466e+000 ;...
      -9.569031084656084e-001 -9.187830687830688e-001 -9.293898809523810e-001 -9.227513227513228e-001 -9.315062830687830e-001 -8.785714285714286e-001 -7.854745370370371e-001 -8.973544973544974e-001 ;...
      +2.716848544973545e-001 +2.612580834803057e-001 +2.640128968253968e-001 +2.624338624338624e-001 +2.641598691945915e-001 +2.603174603174603e-001 +3.042245370370371e-001 +4.326866549088771e-001 ;...
      -3.380272633744856e-002 -3.253968253968254e-002 -3.286210317460318e-002 -3.268665490887713e-002 -3.286210317460318e-002 -3.253968253968254e-002 -3.380272633744856e-002 +0.000000000000000e+000 ];
end



function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_legendre_constants(bvpopt)
   
seq = [1 -1 1 -1 1 -1 1 -1 1]';

phi_minus = seq(1:bvpopt.Degree+1);
phi_plus = ones(bvpopt.Degree+1,1);

switch bvpopt.Degree
case 1 
   phi = [...
      +1.000000000000000e+000 ;...
      +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 ;...
      +2.000000000000000e+000 ];
case 2 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -3.333333333333333e-001 +3.333333333333333e-001 ;...
      -3.333333333333333e-001 -3.333333333333333e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -2.000000000000000e+000 +2.000000000000000e+000 ];
case 3 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -5.000000000000000e-001 +0.000000000000000e+000 +5.000000000000000e-001 ;...
      -1.250000000000000e-001 -5.000000000000000e-001 -1.250000000000000e-001 ;...
      +4.375000000000000e-001 +0.000000000000000e+000 -4.375000000000000e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -3.000000000000000e+000 +0.000000000000000e+000 +3.000000000000000e+000 ;...
      +7.500000000000000e-001 -3.000000000000000e+000 +7.500000000000000e-001 ];
case 4 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -6.000000000000000e-001 -2.000000000000000e-001 +2.000000000000000e-001 +6.000000000000000e-001 ;...
      +4.000000000000000e-002 -4.400000000000000e-001 -4.400000000000000e-001 +4.000000000000000e-002 ;...
      +3.600000000000000e-001 +2.800000000000000e-001 -2.800000000000000e-001 -3.600000000000000e-001 ;...
      -4.080000000000000e-001 +2.320000000000000e-001 +2.320000000000000e-001 -4.080000000000000e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -3.600000000000000e+000 -1.200000000000000e+000 +1.200000000000000e+000 +3.600000000000000e+000 ;...
      +2.400000000000000e+000 -2.400000000000000e+000 -2.400000000000000e+000 +2.400000000000000e+000 ;...
      +1.440000000000000e+000 +2.720000000000000e+000 -2.720000000000000e+000 -1.440000000000000e+000 ];
case 5 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -6.666666666666666e-001 -3.333333333333333e-001 +0.000000000000000e+000 +3.333333333333333e-001 +6.666666666666666e-001 ;...
      +1.666666666666667e-001 -3.333333333333333e-001 -5.000000000000000e-001 -3.333333333333333e-001 +1.666666666666667e-001 ;...
      +2.592592592592592e-001 +4.074074074074074e-001 +0.000000000000000e+000 -4.074074074074074e-001 -2.592592592592592e-001 ;...
      -4.274691358024692e-001 +1.234567901234568e-002 +3.750000000000000e-001 +1.234567901234568e-002 -4.274691358024692e-001 ;...
      +3.055555555555556e-001 -3.333333333333333e-001 +0.000000000000000e+000 +3.333333333333333e-001 -3.055555555555556e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -4.000000000000000e+000 -2.000000000000000e+000 +0.000000000000000e+000 +2.000000000000000e+000 +4.000000000000000e+000 ;...
      +3.666666666666667e+000 -1.333333333333333e+000 -3.000000000000000e+000 -1.333333333333333e+000 +3.666666666666667e+000 ;...
      -3.703703703703704e-001 +3.703703703703704e+000 +0.000000000000000e+000 -3.703703703703704e+000 +3.703703703703704e-001 ;...
      -4.027777777777778e+000 -1.111111111111111e+000 +3.750000000000000e+000 -1.111111111111111e+000 -4.027777777777778e+000 ];
case 6 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -7.142857142857143e-001 -4.285714285714286e-001 -1.428571428571429e-001 +1.428571428571429e-001 +4.285714285714286e-001 +7.142857142857143e-001 ;...
      +2.653061224489796e-001 -2.244897959183674e-001 -4.693877551020408e-001 -4.693877551020408e-001 -2.244897959183674e-001 +2.653061224489796e-001 ;...
      +1.603498542274053e-001 +4.460641399416910e-001 +2.069970845481050e-001 -2.069970845481050e-001 -4.460641399416910e-001 -1.603498542274053e-001 ;...
      -3.994169096209913e-001 -1.661807580174927e-001 +3.002915451895044e-001 +3.002915451895044e-001 -1.661807580174927e-001 -3.994169096209913e-001 ;...
      +3.852561432736360e-001 -2.286547271970013e-001 -2.428154935443565e-001 +2.428154935443565e-001 +2.286547271970013e-001 -3.852561432736360e-001 ;...
      -1.716546676979830e-001 +3.181412506693639e-001 -1.866484203010650e-001 -1.866484203010650e-001 +3.181412506693639e-001 -1.716546676979830e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -4.285714285714286e+000 -2.571428571428572e+000 -8.571428571428571e-001 +8.571428571428571e-001 +2.571428571428572e+000 +4.285714285714286e+000 ;...
      +4.653061224489796e+000 -2.448979591836735e-001 -2.693877551020408e+000 -2.693877551020408e+000 -2.448979591836735e-001 +4.653061224489796e+000 ;...
      -2.040816326530612e+000 +3.673469387755102e+000 +2.040816326530612e+000 -2.040816326530612e+000 -3.673469387755102e+000 +2.040816326530612e+000 ;...
      -2.536443148688047e+000 -3.236151603498542e+000 +2.711370262390671e+000 +2.711370262390671e+000 -3.236151603498542e+000 -2.536443148688047e+000 ;...
      +6.434818825489379e+000 -1.356934610578926e+000 -3.301124531445231e+000 +3.301124531445231e+000 +1.356934610578926e+000 -6.434818825489379e+000 ];
case 7 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -7.500000000000000e-001 -5.000000000000000e-001 -2.500000000000000e-001 +0.000000000000000e+000 +2.500000000000000e-001 +5.000000000000000e-001 +7.500000000000000e-001 ;...
      +3.437500000000000e-001 -1.250000000000000e-001 -4.062500000000000e-001 -5.000000000000000e-001 -4.062500000000000e-001 -1.250000000000000e-001 +3.437500000000000e-001 ;...
      +7.031250000000000e-002 +4.375000000000000e-001 +3.359375000000000e-001 +0.000000000000000e+000 -3.359375000000000e-001 -4.375000000000000e-001 -7.031250000000000e-002 ;...
      -3.500976562500000e-001 -2.890625000000000e-001 +1.577148437500000e-001 +3.750000000000000e-001 +1.577148437500000e-001 -2.890625000000000e-001 -3.500976562500000e-001 ;...
      +4.163818359375000e-001 -8.984375000000000e-002 -3.397216796875000e-001 +0.000000000000000e+000 +3.397216796875000e-001 +8.984375000000000e-002 -4.163818359375000e-001 ;...
      -2.807769775390625e-001 +3.232421875000000e-001 +2.427673339843750e-002 -3.125000000000000e-001 +2.427673339843750e-002 +3.232421875000000e-001 -2.807769775390625e-001 ;...
      +3.418350219726563e-002 -2.231445312500000e-001 +2.799186706542969e-001 +0.000000000000000e+000 -2.799186706542969e-001 +2.231445312500000e-001 -3.418350219726563e-002 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -4.500000000000000e+000 -3.000000000000000e+000 -1.500000000000000e+000 +0.000000000000000e+000 +1.500000000000000e+000 +3.000000000000000e+000 +4.500000000000000e+000 ;...
      +5.437500000000000e+000 +7.500000000000000e-001 -2.062500000000000e+000 -3.000000000000000e+000 -2.062500000000000e+000 +7.500000000000000e-001 +5.437500000000000e+000 ;...
      -3.515625000000000e+000 +3.125000000000000e+000 +3.203125000000000e+000 +0.000000000000000e+000 -3.203125000000000e+000 -3.125000000000000e+000 +3.515625000000000e+000 ;...
      -8.642578125000000e-001 -4.453125000000000e+000 +7.763671875000000e-001 +3.750000000000000e+000 +7.763671875000000e-001 -4.453125000000000e+000 -8.642578125000000e-001 ;...
      +5.644775390625000e+000 +1.148437500000000e+000 -4.270751953125000e+000 +0.000000000000000e+000 +4.270751953125000e+000 -1.148437500000000e+000 -5.644775390625000e+000 ;...
      -8.164459228515625e+000 +3.951171875000000e+000 +1.407562255859375e+000 -4.375000000000000e+000 +1.407562255859375e+000 +3.951171875000000e+000 -8.164459228515625e+000 ];
case 8 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -7.777777777777778e-001 -5.555555555555556e-001 -3.333333333333333e-001 -1.111111111111111e-001 +1.111111111111111e-001 +3.333333333333333e-001 +5.555555555555556e-001 +7.777777777777778e-001 ;...
      +4.074074074074074e-001 -3.703703703703704e-002 -3.333333333333333e-001 -4.814814814814815e-001 -4.814814814814815e-001 -3.333333333333333e-001 -3.703703703703704e-002 +4.074074074074074e-001 ;...
      -9.602194787379970e-003 +4.046639231824417e-001 +4.074074074074074e-001 +1.632373113854595e-001 -1.632373113854595e-001 -4.074074074074074e-001 -4.046639231824417e-001 +9.602194787379970e-003 ;...
      -2.924859015393995e-001 -3.656454808718183e-001 +1.234567901234568e-002 +3.293705227861606e-001 +3.293705227861606e-001 +1.234567901234568e-002 -3.656454808718183e-001 -2.924859015393995e-001 ;...
      +4.171620179850633e-001 +4.191434232586496e-002 -3.333333333333333e-001 -1.964639536655998e-001 +1.964639536655998e-001 +3.333333333333333e-001 -4.191434232586496e-002 -4.171620179850633e-001 ;...
      -3.511038854736462e-001 +2.620140335427639e-001 +1.934156378600823e-001 -2.344550006491784e-001 -2.344550006491784e-001 +1.934156378600823e-001 +2.620140335427639e-001 -3.511038854736462e-001 ;...
      +1.495826128080696e-001 -3.062585185059740e-001 +1.659807956104253e-001 +2.167772778790747e-001 -2.167772778790747e-001 -1.659807956104253e-001 +3.062585185059740e-001 -1.495826128080696e-001 ;...
      +8.907458944433885e-002 +8.975701076047116e-002 -2.729766803840878e-001 +1.599861926765572e-001 +1.599861926765572e-001 -2.729766803840878e-001 +8.975701076047116e-002 +8.907458944433885e-002 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -4.666666666666667e+000 -3.333333333333334e+000 -2.000000000000000e+000 -6.666666666666666e-001 +6.666666666666666e-001 +2.000000000000000e+000 +3.333333333333334e+000 +4.666666666666667e+000 ;...
      +6.074074074074074e+000 +1.629629629629630e+000 -1.333333333333333e+000 -2.814814814814815e+000 -2.814814814814815e+000 -1.333333333333333e+000 +1.629629629629630e+000 +6.074074074074074e+000 ;...
      -4.801097393689986e+000 +2.331961591220851e+000 +3.703703703703704e+000 +1.618655692729767e+000 -1.618655692729767e+000 -3.703703703703704e+000 -2.331961591220851e+000 +4.801097393689986e+000 ;...
      +8.093278463648834e-001 -4.951989026063100e+000 -1.111111111111111e+000 +3.113854595336077e+000 +3.113854595336077e+000 -1.111111111111111e+000 -4.951989026063100e+000 +8.093278463648834e-001 ;...
      +4.376467001981405e+000 +3.254077122389880e+000 -3.629629629629630e+000 -2.703551287913428e+000 +2.703551287913428e+000 +3.629629629629630e+000 -3.254077122389880e+000 -4.376467001981405e+000 ;...
      -8.319373175949917e+000 +1.860375846048762e+000 +3.917695473251029e+000 -2.981975421542561e+000 -2.981975421542561e+000 +3.917695473251029e+000 +1.860375846048762e+000 -8.319373175949917e+000 ;...
      +8.863945386223493e+000 -5.933678432789341e+000 +1.349794238683128e+000 +3.799767048458813e+000 -3.799767048458813e+000 -1.349794238683128e+000 +5.933678432789341e+000 -8.863945386223493e+000 ];
end



function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_legendre_constants(bvpopt)
   
seq = [1 -1 1 -1 1 -1 1 -1 1]';

phi_minus = seq(1:bvpopt.Degree+1);
phi_plus = ones(bvpopt.Degree+1,1);
switch bvpopt.Degree
case 1 
   phi = [...
      +1.000000000000000e+000 ;...
      +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 ;...
      +2.000000000000000e+000 ];
case 2 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -5.773502691896257e-001 +5.773502691896257e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -3.464101615137754e+000 +3.464101615137754e+000 ];
case 3 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -7.745966692414834e-001 +0.000000000000000e+000 +7.745966692414834e-001 ;...
      +4.000000000000000e-001 -5.000000000000000e-001 +4.000000000000000e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -4.647580015448900e+000 +0.000000000000000e+000 +4.647580015448900e+000 ;...
      +6.000000000000000e+000 -3.000000000000000e+000 +6.000000000000000e+000 ];
case 4 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -8.611363115940526e-001 -3.399810435848563e-001 +3.399810435848563e-001 +8.611363115940526e-001 ;...
      +6.123336207187138e-001 -3.266193350044281e-001 -3.266193350044281e-001 +6.123336207187138e-001 ;...
      -3.047469849552062e-001 +4.117279996728996e-001 -4.117279996728996e-001 +3.047469849552062e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -5.166817869564316e+000 -2.039886261509138e+000 +2.039886261509138e+000 +5.166817869564316e+000 ;...
      +8.123336207187139e+000 -1.266193350044281e+000 -1.266193350044281e+000 +8.123336207187139e+000 ;...
      -9.433275658937202e+000 +3.724305733911456e+000 -3.724305733911456e+000 +9.433275658937202e+000 ];
case 5 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -9.061798459386640e-001 -5.384693101056831e-001 +0.000000000000000e+000 +5.384693101056831e-001 +9.061798459386640e-001 ;...
      +7.317428697781312e-001 -6.507620311146455e-002 -5.000000000000000e-001 -6.507620311146455e-002 +7.317428697781312e-001 ;...
      -5.010311710446620e-001 +4.173821037266681e-001 +0.000000000000000e+000 -4.173821037266681e-001 +5.010311710446620e-001 ;...
      +2.457354590949120e-001 -3.445008911936774e-001 +3.750000000000000e-001 -3.445008911936774e-001 +2.457354590949120e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -5.437079075631984e+000 -3.230815860634098e+000 +0.000000000000000e+000 +3.230815860634098e+000 +5.437079075631984e+000 ;...
      +9.317428697781311e+000 +1.349237968885355e+000 -3.000000000000000e+000 +1.349237968885355e+000 +9.317428697781311e+000 ;...
      -1.245151547025725e+001 +2.612533591539255e+000 +0.000000000000000e+000 -2.612533591539255e+000 +1.245151547025725e+001 ;...
      +1.374066696148973e+001 -4.851778072600840e+000 +3.750000000000000e+000 -4.851778072600840e+000 +1.374066696148973e+001 ];
case 6 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -9.324695142031521e-001 -6.612093864662645e-001 -2.386191860831969e-001 +2.386191860831969e-001 +6.612093864662645e-001 +9.324695142031521e-001 ;...
      +8.042490923773935e-001 +1.557967791266409e-001 -4.145913260494890e-001 -4.145913260494890e-001 +1.557967791266409e-001 +8.042490923773935e-001 ;...
      -6.282499246436888e-001 +2.691157697445991e-001 +3.239618653539352e-001 -3.239618653539352e-001 -2.691157697445991e-001 +6.282499246436888e-001 ;...
      +4.220050092706227e-001 -4.282458620971207e-001 +1.756623404298038e-001 +1.756623404298038e-001 -4.282458620971207e-001 +4.220050092706227e-001 ;...
      -2.057123110596226e-001 +2.943957149254374e-001 -3.346190207410408e-001 +3.346190207410408e-001 -2.943957149254374e-001 +2.057123110596226e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -5.594817085218912e+000 -3.967256318797587e+000 -1.431715116499182e+000 +1.431715116499182e+000 +3.967256318797587e+000 +5.594817085218912e+000 ;...
      +1.004249092377394e+001 +3.557967791266409e+000 -2.145913260494890e+000 -2.145913260494890e+000 +3.557967791266409e+000 +1.004249092377394e+001 ;...
      -1.439031603023055e+001 -1.996355423732001e-001 +3.103750998455912e+000 -3.103750998455912e+000 +1.996355423732001e-001 +1.439031603023055e+001 ;...
      +1.763858109064514e+001 -4.150457726481763e+000 +1.016008867241579e+000 +1.016008867241579e+000 -4.150457726481763e+000 +1.763858109064514e+001 ;...
      -1.891598687354225e+001 +6.277070185986423e+000 -4.257867457846986e+000 +4.257867457846986e+000 -6.277070185986423e+000 +1.891598687354225e+001 ];
case 7 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -9.491079123427585e-001 -7.415311855993945e-001 -4.058451513773972e-001 +0.000000000000000e+000 +4.058451513773972e-001 +7.415311855993945e-001 +9.491079123427585e-001 ;...
      +8.512087439074441e-001 +3.248027488246654e-001 -2.529345696551864e-001 -5.000000000000000e-001 -2.529345696551864e-001 +3.248027488246654e-001 +8.512087439074441e-001 ;...
      -7.137429816013211e-001 +9.293517802976894e-002 +4.416505487687413e-001 +0.000000000000000e+000 -4.416505487687413e-001 -9.293517802976894e-002 +7.137429816013211e-001 ;...
      +5.470768866990370e-001 -3.642021439280334e-001 -1.239721069452908e-001 +3.750000000000000e-001 -1.239721069452908e-001 -3.642021439280334e-001 +5.470768866990370e-001 ;...
      -3.636286180055610e-001 +4.117729032288174e-001 -2.627561776973775e-001 +0.000000000000000e+000 +2.627561776973775e-001 -4.117729032288174e-001 +3.636286180055610e-001 ;...
      +1.768277250069266e-001 -2.562927034630833e-001 +2.988136770947962e-001 -3.125000000000000e-001 +2.988136770947962e-001 -2.562927034630833e-001 +1.768277250069266e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -5.694647474056551e+000 -4.449187113596366e+000 -2.435070908264383e+000 +0.000000000000000e+000 +2.435070908264383e+000 +4.449187113596366e+000 +5.694647474056551e+000 ;...
      +1.051208743907444e+001 +5.248027488246653e+000 -5.293456965518637e-001 -3.000000000000000e+000 -5.293456965518637e-001 +5.248027488246653e+000 +1.051208743907444e+001 ;...
      -1.568704921647505e+001 -3.148094621179602e+000 +3.748036774497995e+000 +0.000000000000000e+000 -3.748036774497995e+000 +3.148094621179602e+000 +1.568704921647505e+001 ;...
      +2.035947139965711e+001 -1.307611102457947e+000 -2.760843621567099e+000 +3.750000000000000e+000 -2.760843621567099e+000 -1.307611102457947e+000 +2.035947139965711e+001 ;...
      -2.368687881259739e+001 +5.910909249854383e+000 -2.032599134844309e+000 +0.000000000000000e+000 +2.032599134844309e+000 -5.910909249854383e+000 +2.368687881259739e+001 ;...
      +2.495699224983720e+001 -7.971221392498114e+000 +5.008311982897602e+000 -4.375000000000000e+000 +5.008311982897602e+000 -7.971221392498114e+000 +2.495699224983720e+001 ];
case 8 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      -9.602898564975362e-001 -7.966664774136267e-001 -5.255324099163290e-001 -1.834346424956498e-001 +1.834346424956498e-001 +5.255324099163290e-001 +7.966664774136267e-001 +9.602898564975362e-001 ;...
      +8.832349127380881e-001 +4.520162143519550e-001 -8.572352919130334e-002 -4.495275978987397e-001 -4.495275978987397e-001 -8.572352919130334e-002 +4.520162143519550e-001 +8.832349127380881e-001 ;...
      -7.734093083464301e-001 -6.906595709360683e-002 +4.254390947482833e-001 +2.597213186845724e-001 -2.597213186845724e-001 -4.254390947482833e-001 +6.906595709360683e-002 +7.734093083464301e-001 ;...
      +6.372937644666751e-001 -2.427227284567785e-001 -3.269759103939743e-001 +2.537723957515990e-001 +2.537723957515990e-001 -3.269759103939743e-001 -2.427227284567785e-001 +6.372937644666751e-001 ;...
      -4.828486810505165e-001 +4.033170755970802e-001 -3.104568708555091e-002 -2.915682225895844e-001 +2.915682225895844e-001 +3.104568708555091e-002 -4.033170755970802e-001 +4.828486810505165e-001 ;...
      +3.189921291104835e-001 -3.867979150966186e-001 +3.023917023728713e-001 -1.134235232243430e-001 -1.134235232243430e-001 +3.023917023728713e-001 -3.867979150966186e-001 +3.189921291104835e-001 ;...
      -1.550188128903497e-001 +2.265762383999965e-001 -2.685203140877153e-001 +2.885549685956876e-001 -2.885549685956876e-001 +2.685203140877153e-001 -2.265762383999965e-001 +1.550188128903497e-001 ;...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 +2.000000000000000e+000 ;...
      -5.761739138985218e+000 -4.779998864481761e+000 -3.153194459497974e+000 -1.100607854973899e+000 +1.100607854973899e+000 +3.153194459497974e+000 +4.779998864481761e+000 +5.761739138985218e+000 ;...
      +1.083234912738088e+001 +6.520162143519550e+000 +1.142764708086967e+000 -2.495275978987397e+000 -2.495275978987397e+000 +1.142764708086967e+000 +6.520162143519550e+000 +1.083234912738088e+001 ;...
      -1.658946945583524e+001 -5.746922263792256e+000 +2.802952866977993e+000 +2.535490606610115e+000 -2.535490606610115e+000 -2.802952866977993e+000 +5.746922263792256e+000 +1.658946945583524e+001 ;...
      +2.230363688778103e+001 +2.151153031297537e+000 -4.742801679004572e+000 +2.072627144541386e+000 +2.072627144541386e+000 -4.742801679004572e+000 +2.151153031297537e+000 +2.230363688778103e+001 ;...
      -2.721214043894660e+001 +3.126053399343508e+000 +2.119947751095873e+000 -3.879010290360741e+000 +3.879010290360741e+000 -2.119947751095873e+000 -3.126053399343508e+000 +2.721214043894660e+001 ;...
      +3.059743224465360e+001 -7.905592761214546e+000 +3.119382582690082e+000 -8.763844592915333e-001 -8.763844592915333e-001 +3.119382582690082e+000 -7.905592761214546e+000 +3.059743224465360e+001 ;...
      -3.186270482565709e+001 +9.923340551343404e+000 -5.935661671535586e+000 +4.777638767509888e+000 -4.777638767509888e+000 +5.935661671535586e+000 -9.923340551343404e+000 +3.186270482565709e+001 ];
end
   
function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_equi_monomial_constants(bvpopt)
   
phi_minus = [1 ; zeros(bvpopt.Degree,1)];
phi_plus  = ones(bvpopt.Degree+1,1);

switch bvpopt.Degree
case 1 
   phi = [...
      +1.000000000000000e+000 ;...
      +5.000000000000000e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 ;...
      +1.000000000000000e+000 ];
case 2 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +3.333333333333333e-001 +6.666666666666666e-001 ;...
      +1.111111111111111e-001 +4.444444444444444e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +6.666666666666666e-001 +1.333333333333333e+000 ];
case 3 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.500000000000000e-001 +5.000000000000000e-001 +7.500000000000000e-001 ;...
      +6.250000000000000e-002 +2.500000000000000e-001 +5.625000000000000e-001 ;...
      +1.562500000000000e-002 +1.250000000000000e-001 +4.218750000000000e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +5.000000000000000e-001 +1.000000000000000e+000 +1.500000000000000e+000 ;...
      +1.875000000000000e-001 +7.500000000000000e-001 +1.687500000000000e+000 ];
case 4 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.000000000000000e-001 +4.000000000000000e-001 +6.000000000000000e-001 +8.000000000000000e-001 ;...
      +4.000000000000000e-002 +1.600000000000000e-001 +3.600000000000000e-001 +6.400000000000000e-001 ;...
      +8.000000000000000e-003 +6.400000000000000e-002 +2.160000000000000e-001 +5.120000000000000e-001 ;...
      +1.600000000000000e-003 +2.560000000000000e-002 +1.296000000000000e-001 +4.096000000000000e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.000000000000000e-001 +8.000000000000000e-001 +1.200000000000000e+000 +1.600000000000000e+000 ;...
      +1.200000000000000e-001 +4.800000000000000e-001 +1.080000000000000e+000 +1.920000000000000e+000 ;...
      +3.200000000000000e-002 +2.560000000000000e-001 +8.640000000000000e-001 +2.048000000000000e+000 ];
case 5 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.666666666666667e-001 +3.333333333333333e-001 +5.000000000000000e-001 +6.666666666666666e-001 +8.333333333333334e-001 ;...
      +2.777777777777778e-002 +1.111111111111111e-001 +2.500000000000000e-001 +4.444444444444444e-001 +6.944444444444444e-001 ;...
      +4.629629629629630e-003 +3.703703703703704e-002 +1.250000000000000e-001 +2.962962962962963e-001 +5.787037037037037e-001 ;...
      +7.716049382716000e-004 +1.234567901234568e-002 +6.250000000000000e-002 +1.975308641975309e-001 +4.822530864197531e-001 ;...
      +1.286008230452700e-004 +4.115226337448560e-003 +3.125000000000000e-002 +1.316872427983539e-001 +4.018775720164609e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +3.333333333333333e-001 +6.666666666666666e-001 +1.000000000000000e+000 +1.333333333333333e+000 +1.666666666666667e+000 ;...
      +8.333333333333333e-002 +3.333333333333333e-001 +7.500000000000000e-001 +1.333333333333333e+000 +2.083333333333334e+000 ;...
      +1.851851851851852e-002 +1.481481481481481e-001 +5.000000000000000e-001 +1.185185185185185e+000 +2.314814814814815e+000 ;...
      +3.858024691358020e-003 +6.172839506172840e-002 +3.125000000000000e-001 +9.876543209876543e-001 +2.411265432098765e+000 ];
case 6 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.428571428571429e-001 +2.857142857142857e-001 +4.285714285714286e-001 +5.714285714285714e-001 +7.142857142857143e-001 +8.571428571428571e-001 ;...
      +2.040816326530612e-002 +8.163265306122448e-002 +1.836734693877551e-001 +3.265306122448979e-001 +5.102040816326531e-001 +7.346938775510205e-001 ;...
      +2.915451895043730e-003 +2.332361516034985e-002 +7.871720116618076e-002 +1.865889212827988e-001 +3.644314868804665e-001 +6.297376093294461e-001 ;...
      +4.164931278633900e-004 +6.663890045814240e-003 +3.373594335693461e-002 +1.066222407330279e-001 +2.603082049146189e-001 +5.397750937109538e-001 ;...
      +5.949901826619861e-005 +1.903968584518360e-003 +1.445826143868626e-002 +6.092699470458737e-002 +1.859344320818707e-001 +4.626643660379604e-001 ;...
      +8.499859752314087e-006 +5.439910241481000e-004 +6.196397759436970e-003 +3.481542554547850e-002 +1.328103086299076e-001 +3.965694566039660e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.857142857142857e-001 +5.714285714285714e-001 +8.571428571428571e-001 +1.142857142857143e+000 +1.428571428571429e+000 +1.714285714285714e+000 ;...
      +6.122448979591837e-002 +2.448979591836735e-001 +5.510204081632654e-001 +9.795918367346939e-001 +1.530612244897959e+000 +2.204081632653061e+000 ;...
      +1.166180758017493e-002 +9.329446064139942e-002 +3.148688046647231e-001 +7.463556851311953e-001 +1.457725947521866e+000 +2.518950437317785e+000 ;...
      +2.082465639316950e-003 +3.331945022907122e-002 +1.686797167846731e-001 +5.331112036651395e-001 +1.301541024573095e+000 +2.698875468554769e+000 ;...
      +3.569941095971900e-004 +1.142381150711013e-002 +8.674956863211757e-002 +3.655619682275242e-001 +1.115606592491224e+000 +2.775986196227762e+000 ];
case 7 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.250000000000000e-001 +2.500000000000000e-001 +3.750000000000000e-001 +5.000000000000000e-001 +6.250000000000000e-001 +7.500000000000000e-001 +8.750000000000000e-001 ;...
      +1.562500000000000e-002 +6.250000000000000e-002 +1.406250000000000e-001 +2.500000000000000e-001 +3.906250000000000e-001 +5.625000000000000e-001 +7.656250000000000e-001 ;...
      +1.953125000000000e-003 +1.562500000000000e-002 +5.273437500000000e-002 +1.250000000000000e-001 +2.441406250000000e-001 +4.218750000000000e-001 +6.699218750000000e-001 ;...
      +2.441406250000000e-004 +3.906250000000000e-003 +1.977539062500000e-002 +6.250000000000000e-002 +1.525878906250000e-001 +3.164062500000000e-001 +5.861816406250000e-001 ;...
      +3.051757812500000e-005 +9.765625000000000e-004 +7.415771484375000e-003 +3.125000000000000e-002 +9.536743164062500e-002 +2.373046875000000e-001 +5.129089355468750e-001 ;...
      +3.814697265625000e-006 +2.441406250000000e-004 +2.780914306640630e-003 +1.562500000000000e-002 +5.960464477539063e-002 +1.779785156250000e-001 +4.487953186035156e-001 ;...
      +4.768371582031250e-007 +6.103515625000000e-005 +1.042842864990230e-003 +7.812500000000000e-003 +3.725290298461914e-002 +1.334838867187500e-001 +3.926959037780762e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.500000000000000e-001 +5.000000000000000e-001 +7.500000000000000e-001 +1.000000000000000e+000 +1.250000000000000e+000 +1.500000000000000e+000 +1.750000000000000e+000 ;...
      +4.687500000000000e-002 +1.875000000000000e-001 +4.218750000000000e-001 +7.500000000000000e-001 +1.171875000000000e+000 +1.687500000000000e+000 +2.296875000000000e+000 ;...
      +7.812500000000000e-003 +6.250000000000000e-002 +2.109375000000000e-001 +5.000000000000000e-001 +9.765625000000000e-001 +1.687500000000000e+000 +2.679687500000000e+000 ;...
      +1.220703125000000e-003 +1.953125000000000e-002 +9.887695312500000e-002 +3.125000000000000e-001 +7.629394531250000e-001 +1.582031250000000e+000 +2.930908203125000e+000 ;...
      +1.831054687500000e-004 +5.859375000000000e-003 +4.449462890625000e-002 +1.875000000000000e-001 +5.722045898437500e-001 +1.423828125000000e+000 +3.077453613281250e+000 ;...
      +2.670288085937500e-005 +1.708984375000000e-003 +1.946640014648438e-002 +1.093750000000000e-001 +4.172325134277344e-001 +1.245849609375000e+000 +3.141567230224609e+000 ];
case 8 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.111111111111111e-001 +2.222222222222222e-001 +3.333333333333333e-001 +4.444444444444444e-001 +5.555555555555556e-001 +6.666666666666666e-001 +7.777777777777778e-001 +8.888888888888888e-001 ;...
      +1.234567901234568e-002 +4.938271604938272e-002 +1.111111111111111e-001 +1.975308641975309e-001 +3.086419753086420e-001 +4.444444444444444e-001 +6.049382716049383e-001 +7.901234567901234e-001 ;...
      +1.371742112482850e-003 +1.097393689986283e-002 +3.703703703703704e-002 +8.779149519890261e-002 +1.714677640603567e-001 +2.962962962962963e-001 +4.705075445816186e-001 +7.023319615912208e-001 ;...
      +1.524157902758700e-004 +2.438652644413960e-003 +1.234567901234568e-002 +3.901844231062338e-002 +9.525986892242036e-002 +1.975308641975309e-001 +3.659503124523701e-001 +6.242950769699741e-001 ;...
      +1.693508780843029e-005 +5.419228098697700e-004 +4.115226337448560e-003 +1.734152991583261e-002 +5.292214940134465e-002 +1.316872427983539e-001 +2.846280207962879e-001 +5.549289573066436e-001 ;...
      +1.881676423158921e-006 +1.204272910821700e-004 +1.371742112482850e-003 +7.707346629258940e-003 +2.940119411185814e-002 +8.779149519890261e-002 +2.213773495082239e-001 +4.932701842725721e-001 ;...
      +2.090751581287690e-007 +2.676162024048243e-005 +4.572473708276200e-004 +3.425487390781750e-003 +1.633399672881008e-002 +5.852766346593507e-002 +1.721823829508408e-001 +4.384623860200641e-001 ;...
      +2.323057312541878e-008 +5.947026720107206e-006 +1.524157902758700e-004 +1.522438840347440e-003 +9.074442627116710e-003 +3.901844231062338e-002 +1.339196311839873e-001 +3.897443431289459e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.222222222222222e-001 +4.444444444444444e-001 +6.666666666666666e-001 +8.888888888888888e-001 +1.111111111111111e+000 +1.333333333333333e+000 +1.555555555555556e+000 +1.777777777777778e+000 ;...
      +3.703703703703704e-002 +1.481481481481481e-001 +3.333333333333333e-001 +5.925925925925926e-001 +9.259259259259259e-001 +1.333333333333333e+000 +1.814814814814815e+000 +2.370370370370370e+000 ;...
      +5.486968449931410e-003 +4.389574759945130e-002 +1.481481481481481e-001 +3.511659807956105e-001 +6.858710562414266e-001 +1.185185185185185e+000 +1.882030178326475e+000 +2.809327846364883e+000 ;...
      +7.620789513793600e-004 +1.219326322206981e-002 +6.172839506172840e-002 +1.950922115531169e-001 +4.762993446121018e-001 +9.876543209876543e-001 +1.829751562261850e+000 +3.121475384849870e+000 ;...
      +1.016105268505800e-004 +3.251536859218620e-003 +2.469135802469136e-002 +1.040491794949957e-001 +3.175328964080679e-001 +7.901234567901234e-001 +1.707768124777727e+000 +3.329573743839862e+000 ;...
      +1.317173496211245e-005 +8.429910375752000e-004 +9.602194787379970e-003 +5.395142640481258e-002 +2.058083587830070e-001 +6.145404663923182e-001 +1.549641446557567e+000 +3.452891289908005e+000 ;...
      +1.672601265030152e-006 +2.140929619238600e-004 +3.657978966620940e-003 +2.740389912625401e-002 +1.306719738304806e-001 +4.682213077274806e-001 +1.377459063606726e+000 +3.507699088160513e+000 ];
end


function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_monomial_constants(bvpopt)
   
phi_minus = [1 ; zeros(bvpopt.Degree,1)];
phi_plus  = ones(bvpopt.Degree+1,1);

switch bvpopt.Degree
case 1 
   phi = [...
      +1.000000000000000e+000 ;...
      +5.000000000000000e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 ;...
      +1.000000000000000e+000 ];
case 2 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.113248654051871e-001 +7.886751345948129e-001 ;...
      +4.465819873852045e-002 +6.220084679281462e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.226497308103742e-001 +1.577350269189626e+000 ];
case 3 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.127016653792583e-001 +5.000000000000000e-001 +8.872983346207417e-001 ;...
      +1.270166537925831e-002 +2.500000000000000e-001 +7.872983346207417e-001 ;...
      +1.431498841332480e-003 +1.250000000000000e-001 +6.985685011586675e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.254033307585166e-001 +1.000000000000000e+000 +1.774596669241483e+000 ;...
      +3.810499613777493e-002 +7.500000000000000e-001 +2.361895003862225e+000 ];
case 4 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +6.943184420297371e-002 +3.300094782075719e-001 +6.699905217924281e-001 +9.305681557970263e-001 ;...
      +4.820780989426010e-003 +1.089062557068339e-001 +4.488872992916901e-001 +8.659570925834786e-001 ;...
      +3.347157145944800e-004 +3.594009661935264e-002 +3.007502358784333e-001 +8.058320946447625e-001 ;...
      +2.323992934801126e-005 +1.186057253208228e-002 +2.014998074653874e-001 +7.498816861956313e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.388636884059474e-001 +6.600189564151437e-001 +1.339981043584856e+000 +1.861136311594053e+000 ;...
      +1.446234296827804e-002 +3.267187671205016e-001 +1.346661897875070e+000 +2.597871277750436e+000 ;...
      +1.338862858377940e-003 +1.437603864774106e-001 +1.203000943513733e+000 +3.223328378579050e+000 ];
case 5 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.691007703066800e-002 +2.307653449471585e-001 +5.000000000000000e-001 +7.692346550528415e-001 +9.530899229693320e-001 ;...
      +2.200555327023210e-003 +5.325264442858103e-002 +2.500000000000000e-001 +5.917219545342641e-001 +9.083804012656872e-001 ;...
      +1.032282199009100e-004 +1.228886486090988e-002 +1.250000000000000e-001 +4.551730335833579e-001 +8.657682066691647e-001 ;...
      +4.842443747290209e-006 +2.835844138636880e-003 +6.250000000000000e-002 +3.501348714778497e-001 +8.251549534036109e-001 ;...
      +2.271594092020603e-007 +6.544145508689200e-004 +3.125000000000000e-002 +2.693358770832348e-001 +7.864468709772102e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +9.382015406133601e-002 +4.615306898943169e-001 +1.000000000000000e+000 +1.538469310105683e+000 +1.906179845938664e+000 ;...
      +6.601665981069620e-003 +1.597579332857431e-001 +7.500000000000000e-001 +1.775165863602792e+000 +2.725141203797062e+000 ;...
      +4.129128796036200e-004 +4.915545944363951e-002 +5.000000000000000e-001 +1.820692134333432e+000 +3.463072826676659e+000 ;...
      +2.421221873645104e-005 +1.417922069318441e-002 +3.125000000000000e-001 +1.750674357389249e+000 +4.125774767018054e+000 ];
case 6 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +3.376524289842399e-002 +1.693953067668677e-001 +3.806904069584016e-001 +6.193095930415985e-001 +8.306046932331322e-001 +9.662347571015760e-001 ;...
      +1.140091627989570e-003 +2.869476995464123e-002 +1.449251859501534e-001 +3.835443720333503e-001 +6.899041564209058e-001 +9.336096058311416e-001 ;...
      +3.849547074552752e-005 +4.860759359071150e-003 +5.517162801788591e-002 +2.375327089573696e-001 +5.730376302042494e-001 +9.020860507179512e-001 ;...
      +1.299808920211911e-006 +8.233898227497800e-004 +2.100330952268654e-002 +1.471062853184570e-001 +4.759677450468416e-001 +8.716268961001796e-001 ;...
      +4.388836391249339e-008 +1.394783716134200e-004 +7.995758449664809e-003 +9.110433369443489e-002 +3.953410428634975e-001 +8.421962022365577e-001 ;...
      +1.481901267919765e-009 +2.362698154679778e-005 +3.043908538143970e-003 +5.642178782462645e-002 +3.283721256301020e-001 +8.137592428999101e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +6.753048579684796e-002 +3.387906135337355e-001 +7.613808139168031e-001 +1.238619186083197e+000 +1.661209386466265e+000 +1.932469514203152e+000 ;...
      +3.420274883968710e-003 +8.608430986392369e-002 +4.347755578504601e-001 +1.150633116100051e+000 +2.069712469262717e+000 +2.800828817493425e+000 ;...
      +1.539818829821100e-004 +1.944303743628460e-002 +2.206865120715436e-001 +9.501308358294784e-001 +2.292150520816997e+000 +3.608344202871805e+000 ;...
      +6.499044601059557e-006 +4.116949113748900e-003 +1.050165476134327e-001 +7.355314265922851e-001 +2.379838725234208e+000 +4.358134480500898e+000 ;...
      +2.633301834749603e-007 +8.368702296805000e-004 +4.797455069798885e-002 +5.466260021666093e-001 +2.372046257180986e+000 +5.053177213419346e+000 ];
case 7 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.544604382862074e-002 +1.292344072003028e-001 +2.970774243113014e-001 +5.000000000000000e-001 +7.029225756886985e-001 +8.707655927996972e-001 +9.745539561713793e-001 ;...
      +6.475011465280900e-004 +1.670153200441367e-002 +8.825499603543702e-002 +2.500000000000000e-001 +4.941001474128342e-001 +7.582327176038081e-001 +9.497554134892866e-001 ;...
      +1.647634255363590e-005 +2.158412587927290e-003 +2.621856690481175e-002 +1.250000000000000e-001 +3.473141482675951e-001 +6.602429618244053e-001 +9.255878956111684e-001 ;...
      +4.192577347551879e-007 +2.789411712944500e-004 +7.788944325215000e-003 +6.250000000000000e-002 +2.441349556733845e-001 +5.749168540448563e-001 +9.020353454522058e-001 ;...
      +1.066845069406876e-008 +3.604879691599690e-005 +2.313919518239000e-003 +3.125000000000000e-002 +1.716079718575817e-001 +5.006178152229063e-001 +8.790821145168639e-001 ;...
      +2.714698639447530e-010 +4.658744899722962e-006 +6.874132505420900e-004 +1.562500000000000e-002 +1.206271175868450e-001 +4.359207686386633e-001 +8.567129525019112e-001 ;...
      +6.907834056087892e-012 +6.020701354131310e-007 +2.042149579085000e-004 +7.812500000000000e-003 +8.479152419204861e-002 +3.795848065173453e-001 +8.349129971640005e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +5.089208765724148e-002 +2.584688144006055e-001 +5.941548486226028e-001 +1.000000000000000e+000 +1.405845151377397e+000 +1.741531185599395e+000 +1.949107912342759e+000 ;...
      +1.942503439584260e-003 +5.010459601324101e-002 +2.647649881063111e-001 +7.500000000000000e-001 +1.482300442238503e+000 +2.274698152811424e+000 +2.849266240467860e+000 ;...
      +6.590537021454358e-005 +8.633650351709141e-003 +1.048742676192470e-001 +5.000000000000000e-001 +1.389256593070380e+000 +2.640971847297621e+000 +3.702351582444674e+000 ;...
      +2.096288673775939e-006 +1.394705856472270e-003 +3.894472162607502e-002 +3.125000000000000e-001 +1.220674778366922e+000 +2.874584270224281e+000 +4.510176727261029e+000 ;...
      +6.401070416441255e-008 +2.162927814959800e-004 +1.388351710943401e-002 +1.875000000000000e-001 +1.029647831145490e+000 +3.003706891337437e+000 +5.274492687101184e+000 ;...
      +1.900289047613271e-009 +3.261121429806073e-005 +4.811892753794630e-003 +1.093750000000000e-001 +8.443898231079151e-001 +3.051445380470643e+000 +5.996990667513378e+000 ];
case 8 
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.985507175123188e-002 +1.016667612931866e-001 +2.372337950418355e-001 +4.082826787521751e-001 +5.917173212478250e-001 +7.627662049581645e-001 +8.983332387068134e-001 +9.801449282487681e-001 ;...
      +3.942238742465700e-004 +1.033613035184579e-002 +5.627987350995162e-002 +1.666947457690518e-001 +3.501293882647016e-001 +5.818122834262806e-001 +8.070026077654725e-001 +9.606840803717828e-001 ;...
      +7.827343309214190e-006 +1.050840897176370e-003 +1.335148797724029e-002 +6.805857733650128e-002 +2.071776237141289e-001 +4.437867474271081e-001 +7.249572662788011e-001 +9.416096290257349e-001 ;...
      +1.554124630259726e-007 +1.068355906503500e-004 +3.167424162296150e-003 +2.778713826700882e-002 +1.225905885266142e-001 +3.385055331457027e-001 +6.512532089402732e-001 +9.229139022797780e-001 ;...
      +3.085725604416358e-009 +1.086162849226551e-005 +7.514200545287200e-004 +1.134500724651143e-002 +7.253897465316248e-002 +2.582005808748878e-001 +5.850424044055206e-001 +9.045893805298036e-001 ;...
      +6.126730328030015e-011 +1.104266591178432e-006 +1.782622312063900e-004 +4.631969949068530e-003 +4.292256776783317e-002 +1.969466771919318e-001 +5.255630379304326e-001 +8.866286934739820e-001 ;...
      +1.216466702634844e-012 +1.122672079293786e-007 +4.228982562171749e-005 +1.891153098705270e-003 +2.539802682066047e-002 +1.502242695408105e-001 +4.721307460086373e-001 +8.690246171483551e-001 ;...
      +2.415303366379929e-014 +1.141384342960868e-008 +1.003257582389749e-005 +7.721250530698700e-004 +1.502845239530163e-002 +1.145859959702564e-001 +4.241307421550030e-001 +8.517700710212877e-001 ];
   phi_prime_pattern = [...
      +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 +0.000000000000000e+000 ;...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +3.971014350246377e-002 +2.033335225863733e-001 +4.744675900836710e-001 +8.165653575043502e-001 +1.183434642495650e+000 +1.525532409916329e+000 +1.796666477413627e+000 +1.960289856497536e+000 ;...
      +1.182671622739700e-003 +3.100839105553737e-002 +1.688396205298549e-001 +5.000842373071555e-001 +1.050388164794105e+000 +1.745436850278842e+000 +2.421007823296418e+000 +2.882052241115348e+000 ;...
      +3.130937323685676e-005 +4.203363588705470e-003 +5.340595190896116e-002 +2.722343093460051e-001 +8.287104948565155e-001 +1.775146989708432e+000 +2.899829065115204e+000 +3.766438516102939e+000 ;...
      +7.770623151298628e-007 +5.341779532517400e-004 +1.583712081148077e-002 +1.389356913350441e-001 +6.129529426330709e-001 +1.692527665728513e+000 +3.256266044701365e+000 +4.614569511398890e+000 ;...
      +1.851435362649815e-008 +6.516977095359307e-005 +4.508520327172340e-003 +6.807004347906859e-002 +4.352338479189749e-001 +1.549203485249327e+000 +3.510254426433123e+000 +5.427536283178822e+000 ;...
      +4.288711229621011e-010 +7.729866138249027e-006 +1.247835618444740e-003 +3.242378964347968e-002 +3.004579743748322e-001 +1.378626740343522e+000 +3.678941265513028e+000 +6.206400854317874e+000 ;...
      +9.731733621078753e-012 +8.981376634350287e-007 +3.383186049737400e-004 +1.512922478964219e-002 +2.031842145652838e-001 +1.201794156326484e+000 +3.777045968069098e+000 +6.952196937186841e+000 ];
end










function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_rk_constants(bvpopt)
Id = eye(bvpopt.Degree+1);

phi_minus = Id(:,1);
phi_prime_pattern = Id(:,2:end);

switch bvpopt.Degree
case 1 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +1.000000000000000e+000];
   phi = [...
      +1.000000000000000e+000 ;...
      +5.000000000000000e-001 ];
case 2 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +5.000000000000000e-001 ;...
      +5.000000000000000e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.500000000000000e-001 +5.386751345948129e-001 ;...
      -3.867513459481288e-002 +2.500000000000000e-001 ];
case 3 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +2.777777777777778e-001 ;...
      +4.444444444444444e-001 ;...
      +2.777777777777778e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +1.388888888888889e-001 +3.002631949808646e-001 +2.679883337624694e-001 ;...
      -3.597666752493890e-002 +2.222222222222222e-001 +4.804211119693834e-001 ;...
      +9.789444015308331e-003 -2.248541720308681e-002 +1.388888888888889e-001 ];
case 4 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +1.739274225687269e-001 ;...
      +3.260725774312731e-001 ;...
      +3.260725774312731e-001 ;...
      +1.739274225687269e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +8.696371128436346e-002 +1.881181174998681e-001 +1.671919219741888e-001 +1.774825722545226e-001 ;...
      -2.660418008499879e-002 +1.630362887156366e-001 +3.539530060337440e-001 +3.134451147418684e-001 ;...
      +1.262746268940472e-002 -2.788042860247090e-002 +1.630362887156366e-001 +3.526767575162719e-001 ;...
      -3.555149685795680e-003 +6.735500594538160e-003 -1.419069493114114e-002 +8.696371128436346e-002 ];
case 5 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +1.184634425280945e-001 ;...
      +2.393143352496832e-001 ;...
      +2.844444444444444e-001 ;...
      +2.393143352496832e-001 ;...
      +1.184634425280945e-001];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +5.923172126404727e-002 +1.281510056700453e-001 +1.137762880042246e-001 +1.212324369268642e-001 +1.168753295602285e-001 ;...
      -1.957036435907604e-002 +1.196571676248416e-001 +2.600046516806415e-001 +2.289960545789999e-001 +2.449081289104954e-001 ;...
      +1.125440081864296e-002 -2.459211461964220e-002 +1.422222222222222e-001 +3.090365590640866e-001 +2.731900436258015e-001 ;...
      -5.593793660812180e-003 +1.031828067068336e-002 -2.069031643095828e-002 +1.196571676248416e-001 +2.588846996087593e-001 ;...
      +1.588112967866000e-003 -2.768994398769600e-003 +4.687154523869940e-003 -9.687563141950741e-003 +5.923172126404727e-002 ];
case 6 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +8.566224618958516e-002 ;...
      +1.803807865240693e-001 ;...
      +2.339569672863455e-001 ;...
      +2.339569672863455e-001 ;...
      +1.803807865240693e-001 ;...
      +8.566224618958516e-002];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +4.283112309479259e-002 +9.267349143037885e-002 +8.224792261284387e-002 +8.773787197445152e-002 +8.430668513410011e-002 +8.647502636084993e-002 ;...
      -1.476372599719741e-002 +9.019039326203465e-002 +1.960321623332450e-001 +1.723907946244070e-001 +1.852679794521070e-001 +1.775263532089700e-001 ;...
      +9.325050706477749e-003 -2.030010229323959e-002 +1.169784836431728e-001 +2.544394950320016e-001 +2.235938110460991e-001 +2.396258253358291e-001 ;...
      -5.668858049483510e-003 +1.036315624024642e-002 -2.048252774565610e-002 +1.169784836431728e-001 +2.542570695795851e-001 +2.246319165798678e-001 ;...
      +2.854433315099340e-003 -4.887192928037670e-003 +7.989991899662340e-003 -1.565137580917570e-002 +9.019039326203465e-002 +1.951445125212667e-001 ;...
      -8.127801712647600e-004 +1.355561055485060e-003 -2.075625784866330e-003 +3.414323576741300e-003 -7.011245240793690e-003 +4.283112309479259e-002 ];
case 7 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +6.474248308443485e-002 ;...
      +1.398526957446383e-001 ;...
      +1.909150252525595e-001 ;...
      +2.089795918367347e-001 ;...
      +1.909150252525595e-001 ;...
      +1.398526957446383e-001 ;...
      +6.474248308443485e-002];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +3.237124154221742e-002 +7.004354137872608e-002 +6.215393578734986e-002 +6.633292861768469e-002 +6.366576746880694e-002 +6.548633327460678e-002 +6.428437356068539e-002 ;...
      -1.145101728318387e-002 +6.992634787231918e-002 +1.520055220578310e-001 +1.335957692238823e-001 +1.438062759034488e-001 +1.372068518779083e-001 +1.414595147816845e-001 ;...
      +7.633203872423540e-003 -1.659000657884777e-002 +9.545751262627975e-002 +2.077018807659708e-001 +1.822024626540843e-001 +1.963121171844556e-001 +1.877399664788738e-001 ;...
      -5.133733563225340e-003 +9.349622783443329e-003 -1.837524421545184e-002 +1.044897959183674e-001 +2.273548360521865e-001 +1.996299690532914e-001 +2.141133253999600e-001 ;...
      +3.175058773685640e-003 -5.397091931896140e-003 +8.712562598475179e-003 -1.678685551341131e-002 +9.545751262627975e-002 +2.075050318314072e-001 +1.832818213801359e-001 ;...
      -1.606819037046110e-003 +2.645843866730040e-003 -3.953580158810440e-003 +6.256926520756050e-003 -1.215282631319266e-002 +6.992634787231918e-002 +1.513037130278222e-001 ;...
      +4.581095237494500e-004 -7.438501901719200e-004 +1.076715615627920e-003 -1.590445533249850e-003 +2.588547297084980e-003 -5.301058294291230e-003 +3.237124154221742e-002 ];
case 8 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      +5.061426814518813e-002 ;...
      +1.111905172266872e-001 ;...
      +1.568533229389436e-001 ;...
      +1.813418916891810e-001 ;...
      +1.813418916891810e-001 ;...
      +1.568533229389436e-001 ;...
      +1.111905172266872e-001 ;...
      +5.061426814518813e-002];
   phi = [...
      +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 +1.000000000000000e+000 ;...
      +2.530713407259406e-002 +5.475932176755432e-002 +4.858753599891288e-002 +5.186552097058123e-002 +4.975503156092328e-002 +5.123307384043864e-002 +5.017146584084589e-002 +5.089177647230505e-002 ;...
      -9.105943305970079e-003 +5.559525861334362e-002 +1.208595249971732e-001 +1.061934901483484e-001 +1.143883315370480e-001 +1.089648024514024e-001 +1.127554521376362e-001 +1.102177595626280e-001 ;...
      +6.280831147030470e-003 -1.363979623578167e-002 +7.842666146947182e-002 +1.706711342745536e-001 +1.496121163777214e-001 +1.614967888010481e-001 +1.537135699534800e-001 +1.587709981935806e-001 ;...
      -4.483015613054750e-003 +8.149708858360550e-003 -1.597510336187843e-002 +9.067094584459050e-002 +1.973629330102060e-001 +1.729701589689548e-001 +1.865572437783281e-001 +1.782634003208542e-001 ;...
      +3.078491368326780e-003 -5.215352089147150e-003 +8.371732720226160e-003 -1.602104132102501e-002 +9.067094584459050e-002 +1.973169950510594e-001 +1.731921828308204e-001 +1.858249073022358e-001 ;...
      -1.917675254636950e-003 +3.139752985463670e-003 -4.643465862104480e-003 +7.241206561222270e-003 -1.381781133560998e-002 +7.842666146947182e-002 +1.704931191747253e-001 +1.505724917919132e-001 ;...
      +9.727576640592600e-004 -1.564934910948940e-003 +2.225714775284900e-003 -3.197814310360770e-003 +4.997027078338830e-003 -9.669007770485931e-003 +5.559525861334362e-002 +1.202964605326573e-001 ;...
      -2.775083271169200e-004 +4.428023043422400e-004 -6.188056952505200e-004 +8.592365842648500e-004 -1.251252825393100e-003 +2.026732146275250e-003 -4.145053622366190e-003 +2.530713407259406e-002 ];
end   
   




function [phi, phi_plus, phi_minus, phi_prime_pattern] = evaluate_gauss_lagrange_constants(bvpopt)
Id = eye(bvpopt.Degree+1);

phi_minus = Id(:,1);
phi = Id(:,2:end);

switch bvpopt.Degree
case 1 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +2.000000000000000e+000];
   phi_prime_pattern = [...
      -2.000000000000000e+000 ;...
      +2.000000000000000e+000 ];
case 2 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -1.732050807568877e+000 ;...
      +1.732050807568877e+000];
   phi_prime_pattern = [...
      -3.464101615137754e+000 +3.464101615137754e+000 ;...
      +3.000000000000000e+000 -6.464101615137754e+000 ;...
      +4.641016151377546e-001 +3.000000000000000e+000 ];
case 3 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +1.666666666666667e+000 ;...
      -1.333333333333333e+000 ;...
      +1.666666666666667e+000];
   phi_prime_pattern = [...
      -6.000000000000000e+000 +3.000000000000000e+000 -6.000000000000000e+000 ;...
      +5.000000000000000e+000 -5.727486121839514e+000 +1.016397779494322e+001 ;...
      +1.163977794943222e+000 +2.000000000000000e+000 -9.163977794943223e+000 ;...
      -1.639777949432225e-001 +7.274861218395141e-001 +5.000000000000000e+000 ];
case 4 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -1.640705321739257e+000 ;...
      +1.214393969798578e+000 ;...
      -1.214393969798578e+000 ;...
      +1.640705321739257e+000];
   phi_prime_pattern = [...
      -9.433275658937202e+000 +3.724305733911456e+000 -3.724305733911456e+000 +9.433275658937202e+000 ;...
      +7.738612787525830e+000 -7.201340999706891e+000 +6.343622218624971e+000 -1.556386959855492e+001 ;...
      +2.045089650303909e+000 +2.261387212474169e+000 -5.971556459482020e+000 +1.189278387805684e+001 ;...
      -4.370708023957989e-001 +1.448782034533681e+000 +2.261387212474169e+000 -1.350080272596495e+001 ;...
      +8.664402350326167e-002 -2.331339812124166e-001 +1.090852762294336e+000 +7.738612787525830e+000 ];
case 5 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +1.627766710890126e+000 ;...
      -1.161100044223459e+000 ;...
      +1.066666666666667e+000 ;...
      -1.161100044223459e+000 ;...
      +1.627766710890126e+000];
   phi_prime_pattern = [...
      -1.374066696148973e+001 +4.851778072600840e+000 -3.750000000000000e+000 +4.851778072600840e+000 -1.374066696148973e+001 ;...
      +1.118330013267038e+001 -9.447599601516149e+000 +6.420116503559337e+000 -8.015920784810970e+000 +2.242091502590609e+001 ;...
      +3.131312162011811e+000 +2.816699867329622e+000 -6.220120454669751e+000 +6.190522354953042e+000 -1.619339023999924e+001 ;...
      -7.587317959808074e-001 +2.217886332274818e+000 +2.000000000000000e+000 -7.393116276382380e+000 +1.541544322156985e+001 ;...
      +2.391012233536861e-001 -5.571226202937973e-001 +1.865995288831780e+000 +2.816699867329622e+000 -1.908560117865736e+001 ;...
      -5.431476056533892e-002 +1.183579496046674e-001 -3.159913377213645e-001 +1.550036766309847e+000 +1.118330013267038e+001 ];
case 6 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -1.620385924480338e+000 ;...
      +1.132262857215017e+000 ;...
      -9.961577575451025e-001 ;...
      +9.961577575451025e-001 ;...
      -1.132262857215017e+000 ;...
      +1.620385924480338e+000];
   phi_prime_pattern = [...
      -1.891598687354225e+001 +6.277070185986423e+000 -4.257867457846986e+000 +4.257867457846986e+000 -6.277070185986423e+000 +1.891598687354225e+001 ;...
      +1.532559943877135e+001 -1.227449151016906e+001 +7.315253604827740e+000 -7.050846636197058e+000 +1.024428508749222e+001 -3.068867482146993e+001 ;...
      +4.428784593210073e+000 +3.553646711862092e+000 -7.214666938638728e+000 +5.512032930006336e+000 -7.415731497907975e+000 +2.157160573829670e+001 ;...
      -1.135792531200901e+000 +3.104594335912446e+000 +2.120753849366560e+000 -6.817584258367276e+000 +7.149201047056501e+000 -1.925696288835294e+001 ;...
      +4.136558226524937e-001 -8.962488866310469e-001 +2.576076559634157e+000 +2.120753849366560e+000 -9.357546496337900e+000 +1.997909959690134e+001 ;...
      -1.537363938179938e-001 +3.084380741837899e-001 -6.910077565416665e-001 +2.393641765174059e+000 +3.553646711862092e+000 -2.584665393768878e+001 ;...
      +3.747594392723113e-002 -7.300891114463975e-002 +1.514581391989235e-001 -4.158651078296060e-001 +2.103215333821489e+000 +1.532559943877135e+001 ];
case 7 
   phi_plus = [...
      -1.000000000000000e+000 ;...
      +1.615777648573457e+000 ;...
      -1.114796800118191e+000 ;...
      +9.561620086875917e-001 ;...
      -9.142857142857143e-001 ;...
      +9.561620086875917e-001 ;...
      -1.114796800118191e+000 ;...
      +1.615777648573457e+000];
   phi_prime_pattern = [...
      -2.495699224983720e+001 +7.971221392498114e+000 -5.008311982897602e+000 +4.375000000000000e+000 -5.008311982897602e+000 +7.971221392498114e+000 -2.495699224983720e+001 ;...
      +2.016247512645396e+001 -1.562938350372217e+001 +8.625187972409476e+000 -7.258551263394934e+000 +8.182614584790622e+000 -1.292982669406074e+001 +4.035246077218913e+001 ;...
      +5.939649595901784e+000 +4.443146050695284e+000 -8.605076196977837e+000 +5.727243007023915e+000 -5.956895021669846e+000 +9.086438359314942e+000 -2.793020953980242e+001 ;...
      -1.571345006576919e+000 +4.125140303481284e+000 +2.394378822850753e+000 -7.245304978834096e+000 +5.830119814503291e+000 -8.131847279980262e+000 +2.412919609601501e+001 ;...
      +6.117568698401676e-001 -1.270151542895604e+000 +3.351834730017059e+000 +2.000000000000000e+000 -7.930862828666295e+000 +8.558125387465308e+000 -2.342957835540561e+001 ;...
      -2.662682556100125e-001 +5.100682216357629e-001 -1.041362168801785e+000 +3.062096190825881e+000 +2.394378822850753e+000 -1.174691936182578e+001 +2.543427284698192e+001 ;...
      +1.082344391094175e-001 -2.001462579243737e-001 +3.736448491420074e-001 -8.500070065068291e-001 +3.021826024450000e+000 +4.443146050695284e+000 -3.376162469659479e+001 ;...
      -2.751051928120109e-002 +5.010533623170008e-002 -9.029602574207080e-002 +1.895240508860624e-001 -5.328694133609241e-001 +2.749662145893132e+000 +2.016247512645396e+001 ];
case 8 
   phi_plus = [...
      +1.000000000000000e+000 ;...
      -1.612707485876788e+000 ;...
      +1.103381368520433e+000 ;...
      -9.310282570216814e-001 ;...
      +8.663860519078103e-001 ;...
      -8.663860519078103e-001 ;...
      +9.310282570216814e-001 ;...
      -1.103381368520433e+000 ;...
      +1.612707485876788e+000];
   phi_prime_pattern = [...
      -3.186270482565709e+001 +9.923340551343404e+000 -5.935661671535586e+000 +4.777638767509888e+000 -4.777638767509888e+000 +5.935661671535586e+000 -9.923340551343404e+000 +3.186270482565709e+001 ;...
      +2.569261129630982e+001 -1.949249456998672e+001 +1.023940120319752e+001 -7.937981368275349e+000 +7.814155748651835e+000 -9.633178632040007e+000 +1.604021892340721e+001 -5.140631755826197e+001 ;...
      +7.664818137298730e+000 +5.474614538917796e+000 -1.029567243097482e+001 +6.305836182582979e+000 -5.718074614704410e+000 +6.788235570678770e+000 -1.109128684254554e+001 +3.523749930369194e+001 ;...
      -2.066766305200644e+000 +5.284903919706359e+000 +2.763134370160088e+000 -8.098569741480342e+000 +5.663512202529704e+000 -6.118083250364832e+000 +9.575972238554758e+000 -2.985316461685423e+001 ;...
      +8.349678360326501e-001 -1.686816817555106e+000 +4.220376391636044e+000 +2.069639794612294e+000 -7.900816392771287e+000 +6.547722401847212e+000 -9.325673567435354e+000 +2.799672577206134e+001 ;...
      -3.913227350563617e-001 +7.282297254202682e-001 -1.405147920784982e+000 +3.761536803546699e+000 +2.069639794612294e+000 -9.362950872698274e+000 +1.028426065957019e+001 -2.844037087303763e+001 ;...
      +1.880860790263934e-001 -3.370617812049381e-001 +5.918145100446552e-001 -1.215395508135759e+000 +3.650453047086396e+000 +2.763134370160088e+000 -1.452381437705618e+001 +3.173184484302848e+001 ;...
      -8.078444839581887e-002 +1.420577647099491e-001 -2.389370724655555e-001 +4.465170131130761e-001 -1.034278580991646e+000 +3.746373932761608e+000 +5.474614538917796e+000 -4.282153299259485e+001 ;...
      +2.109496564232081e-002 -3.677333135100941e-002 +6.069262072263903e-002 -1.092219434734880e-001 +2.330475630970016e-001 -6.669151918801526e-001 +3.489048977930523e+000 +2.569261129630982e+001 ];
end

function gausspts = get_gausspts(order)

allgausspts = {[0.5];...
            [.21132486540518712 .78867513459481288];...
            [.11270166537925831 .5                 .88729833462074169];...
            [.06943184420297371 .33000947820757187 .66999052179242813 .93056815579702629];...
            [.04691007703066800 .23076534494715845 .5                 .76923465505284155 .953089922969332];...
            [.03376524289842399 .16939530676686774 .38069040695840155 .61930959304159845 .83060469323313226 .96623475710157601];...
            [.02544604382862074 .12923440720030278 .29707742431130142 .5                 .70292257568869858 .87076559279969722 .97455395617137926];...
            [.01985507175123188 .10166676129318663 .23723379504183551 .4082826787521751  .5917173212478249  .76276620495816449 .89833323870681337 .98014492824876812];...
            [.01591988024618696 .08198444633668210 .1933142836497048  .33787328829809554 .5                 .66212671170190446 .8066857163502952  .9180155536633179 .98408011975381304];...
            [.01304673574141414 .06746831665550775 .1602952158504878  .2833023029353764  .42556283050918439 .57443716949081561 .7166976970646236  .8397047841495122  .93253168334449226 .98695326425858586];...
            [.01088567092697150 .05646870011595235 .13492399721297534 .24045193539659409 .36522842202382751 .5                 .63477157797617249 .75954806460340591 .86507600278702466 .94353129988404765 .9891143290730285 ];...
            [.00921968287664037 .04794137181476257 .11504866290284766 .20634102285669128 .3160842505009099  .43738329574426554 .56261670425573446 .6839157494990901  .79365897714330872 .88495133709715234 .95205862818523743 .99078031712335963]};
               
gausspts = allgausspts{order}';               
