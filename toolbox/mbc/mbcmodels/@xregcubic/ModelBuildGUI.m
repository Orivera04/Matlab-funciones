function varargout= ModelBuildGUI(m,action,varargin)
% This routine will build the small model building
% window that allows the user to select the 
% number of models they would like to build

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.
%   $Revision: 1.4.4.3 $  $Date: 2004/02/09 07:45:17 $



switch lower(action)
case 'create'
   [varargout{1:4}] = i_create(m, varargin{1});
case 'build'
   i_build;
end

function [minK,maxK,om,ok]= i_create(m, numObs)

fH= findobj('name','Model Building Dialog');
if ~isempty(fH)
   figure(fH)
   return
end
ScrPos= get(0,'screensize');
fPos= [ScrPos(3:4)/2-[125 200] 250 400];
fH= xregfigure('name','Model Building Dialog',...
   'units','pixels',...
   'position',fPos,...
   'menubar','none',...
   'WindowStyle','modal',...
   'resize','off',...
   'numbertitle','off',...
   'visible','off');
fH= double(fH);

bgc= get(fH,'color');

str= ['This dialog will allow creation of a family ',...
      'of Polynomial models. ',...
      sprintf('\n\n'),...
      'A model of order ''k'' will include ',...
      'only those terms in each input factor, including cross terms, ',...
      'with order less than or equal to ''k''. ',...
      sprintf('\n\n'),...
      'Specify the initial order of polynomial and the ',...
      'final order using the controls below. ',...
      sprintf('\n\n'),...
      'The stepwise setting will be applied to all models created.'];
% create a text object
t= uicontrol('parent',fH,...
   'style','text',...
   'backgroundcolor',bgc,...
   'string',str,...
   'HorizontalAlignment','Left');

% Create a FrameTitleLayout to store this
textFr= xregframetitlelayout(fH,...
   'Title','Model build information',...
   'Center',t,...
   'TitleColor',bgc,...
   'packstatus','off');

% Create 2 text and 2 push controls
strT= {'Minimum order of polynomial:',...
      'Maximum order of polynomial:'};

% using the numObs, find the highest order poly we can build
mtest = m;
nf= nfactors(m);
for i=1:20
   set(mtest,'order',i*ones(1,nf));
   set(mtest,'maxinteract',i);
   max_order=i-1;
   if numParams(mtest)>numObs
      break
   end
end

strE={1,max_order};
for i=1:2
   t(i)= uicontrol('parent',fH,...
      'style','text',...
      'backgroundcolor',bgc,...
      'string',strT{i},...
      'horizontalalignment','left');
   ud.e{i}= xregGui.clickedit(fH,'min',1,'max',max_order,...
      'dragincrement',1,...
      'backgroundcolor',[1 1 1],...
      'value',strE{i},...
      'rule','int');
end

%% Offer some stepwise choices
spwtxt=xreguicontrol('style','text',...
   'parent',fH,...
   'string','Stepwise:',...
   'horizontalalignment','left');

FitOptions=xreguicontrol('style','popupmenu',...
   'parent',fH,...
   'backgroundcolor','w',...
   'string',{'None','Minimize PRESS','Forward Selection','Backward Selection'},...
   'tag','stepwiseui');

% Create a 2x2 gridlayout To store min/max knot selection
knotGrd= xreggridbaglayout(fH,...
   'border',[0 5 0 5],...
   'dimension',[8,3],...
   'colsizes',[-1 60 50],...
   'rowsizes',[3 17 10 3 17 10 3 17],...
   'elements',{[],t(1),[],[],t(2),[],[],spwtxt,...
      [],[],[],[],[],[],FitOptions,[],...
      ud.e{1},[],[],ud.e{2},[],[],[],[]},...
   'mergeblock',{[2 2],[1 2]},...
   'mergeblock',{[1 2],[3 3]},...
   'mergeblock',{[5 5],[1 2]},...
   'mergeblock',{[4 5],[3 3]},...
   'mergeblock',{[7 8],[2 3]});
knotFr= xregframetitlelayout(fH,...
   'Center',knotGrd,...
   'Title','Model build options',...
   'TitleColor',bgc);

% create a 2x1 gridlayout to store other two layouts
globalGrd= xreggridlayout(fH,...
   'correctalg','on',...
   'dimension',[2 1],...
   'rowsizes',[-1 120],...
   'gapy',20,...
   'elements',{textFr knotFr},...
   'position',[10 55 fPos(3)-20 fPos(4)-65],...
   'packstatus','on');




% build the OK and Cancel buttons
p= uicontrol('parent',fH,...
   'style','push',...
   'position',[fPos(3)/2-70 15 70 25],...
   'backgroundcolor',bgc,...
   'string','Build',...
   'callback',{@i_build,fH});
p= uicontrol('parent',fH,...
   'style','push',...
   'position',[fPos(3)/2+10 15 70 25],...
   'backgroundcolor',bgc,...
   'string','Cancel',...
   'Callback',{@i_Cancel,fH});

set(fH,'userdata',ud,'visible','on');


%% finished creating - now wait for button press
set(fH,'tag','null');
drawnow
waitfor(fH,'tag');

tg=get(fH,'tag');
switch lower(tg)
case 'ok'
   %num_knots= get(m,'max_knots');
   minK= get(ud.e{1},'value');
   maxK= get(ud.e{2},'value');
   
   %% sort out stepwise
   om = i_stepwise(m,FitOptions);
   ok=1;
   close(fH);
otherwise
   minK=[];
   maxK=[];
   om = [];
   ok=0;
   close(fH);
end

%----------------------------------------------------
% function i_stepwise
%----------------------------------------------------
function om = i_stepwise(m, hnd)

opt= get(hnd,'value');
switch opt
case 1
   om= 'leastsq';
case 2
   om= minpress(m);
case 3
   om= forwardselect(m);
case 4
   om= backwardselect(m);
end

%----------------------------------------------------
% function i_build
%----------------------------------------------------
function i_build(h,evt,fH)
set(fH,'tag','ok');

%----------------------------------------------------
% function i_Cancel
%----------------------------------------------------
function i_Cancel(src,null,fH)
set(fH,'tag','cancel');
