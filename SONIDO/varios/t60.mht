From: <Guardado por Microsoft Internet Explorer 5>
Subject: 
Date: Wed, 13 Aug 2008 12:58:30 -0600
MIME-Version: 1.0
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mathworks.com/matlabcentral/files/1212/t60.m
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3D"MSHTML 6.00.2900.3314" name=3DGENERATOR></HEAD>
<BODY><PRE>function [rt,iidc] =3D t60(impulse,S_Rate,flag)

%[{rt,iidc}] =3D t60(impulse,S_Rate,{flag})
%
%Returns an estimate of t60, a measure of reverberation time=20
%(in ms) and optionally, the integrated impulse decay curve=20
%of the impulse response, using S_Rate as the sample rate
%
%Optional flag is 1 to plot. Default is no plot, unless no output
%arguments are specified
%
%Pass only the segment of the recording after the offset=20
%of the impulse
%
%Reference:
%	Schroeder, M.R. (1965). New method of measuring reverberation
%time. Journal of the Acoustical Society of America, 37, 409-412.
%
%Version history:
%
%04-2001 First version
%05-2002 Fixed some bugs. Now accepts a column or row vector.
%			Also, fixed error in which the input vector was being
%			squared twice. Finally, fixed a bug that generated=20
%			an error if the rt was longer than 1.5 s.=20
%			Thanks to Olivier Deille for his helpful suggestions.=20
%
%Christopher Brown, cbrown@phi.luc.edu

if nargin=3D=3D2
	if nargout=3D=3D0
		flag =3D 1;
	else
		flag =3D 0;
	end
elseif nargin=3D=3D3
else
	error('Wrong number of input arguements. ''help t60'' for details');
end

if size(impulse,2)=3D=3D1
impulse =3D impulse.';
end

begin =3D round(S_Rate * .05);	%assume slope extends to at least 50 ms
										%adjust this number if needed

if length(impulse)/S_Rate &lt; 1.5	%if impulse is not at least 1.5 sec
   T =3D length(impulse);				%then use the whole waveform
   warning(['input vector less than 1.5 s in duration']);
else
   T =3D round(S_Rate * 1.5); 		%otherwise, use first 1.5 sec
end

iidc(length(impulse):-1:1) =3D cumsum(impulse(length(impulse):-1:1).^2);

y =3D iidc(1:T);
y =3D 10 * log10(y/max(abs(y)));	%generate y
xtime =3D linspace(1,(T/(S_Rate/1000)),T);	%generate x

%calculate r2's
sampsize =3D 1:length(xtime);
Exy2 =3D (cumsum(xtime.*y) - ((cumsum(xtime).*cumsum(y))./sampsize)).^2;
Ex2 =3D cumsum(xtime.^2) - (((cumsum(xtime)).^2)./sampsize);
totss =3D cumsum(y.^2) - (((cumsum(y)).^2)./sampsize);
regss =3D Exy2(begin:T)./Ex2(begin:T);
r2 =3D regss ./ totss(begin:T);

r3 =3D find(r2 =3D=3D max(r2));		%find all of the points along slope =
where r2 is max
stop =3D begin + r3(length(r3));%stop is the largest r2 that's furthest =
from t0

mx =3D mean(xtime(1:stop)); my =3D mean(y(1:stop));
mx2 =3D mean(xtime(1:stop).^2); my2 =3D mean(y(1:stop).^2);
sdx =3D sqrt(mx2 - mx.^2); sdy =3D sqrt(my2 - my.^2);
mxy =3D mean(xtime(1:stop).*y(1:stop));
r =3D (mxy - (mx.*my))/(sdx.*sdy);
slope =3D (r * sdy)/sdx;
yintercept =3D -(slope * mx) + my;

rt =3D round(abs(60/slope(1))-yintercept);

if flag =3D=3D 1

	clear xtime;
	xtime =3D linspace(1,rt,rt*(S_Rate/1000));	%regenerate x
	if length(y)&lt;length(xtime)
		difference =3D length(xtime)-length(y);
		pad(1:difference) =3D nan;
		y =3D [y,pad];
	else
		y =3D y(1:length(xtime));
	end

	figure;
	plot(xtime,y,'b-','LineWidth',1.5);
	title('Integrated Impulse Decay Curve');
	ylim([-70 0]);
	xlim([0 rt*1.1]);
	xlabel('Time (ms)'), ylabel('dB')
	xlimits =3D xlim; ylimits =3D ylim;
	=
line([xlimits(1),xlimits(2)],[-60,-60],'Color',[.4,.4,.4],'LineWidth',.5)=
;
	text(.6 * xlimits(2),-8,['T_6_0 (ms) =3D =
',num2str(rt)],'FontSize',10,'color','k');
	linestart =3D (xlimits(1) * slope) + yintercept;
	line([xlimits(1),rt],[linestart,-60],'Color','r','LineWidth',.5);
end</PRE></BODY></HTML>
