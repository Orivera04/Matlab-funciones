function drawRandGraph(Vtx, Edg, direct, VtxLoc, userEdg, addedEdge, ax_handle)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Filename:     drawGraph.m
% 
% Description:  This function draws a random graph. Associated with each
%               node is the (x,y) location of the node. Each row of VtxLoc
%               matrix corresponds with (x,y) location of each node. 
%
% Input:        drawRandGraph(Vtx, Edg, direct, VtxLoc, userEdg, addedEdge)
%               - vargin{1} = number of vertices
%               - vargin{2} = edges for the graph entered as a matrix. Same
%                 format as specified in getEdges.m file. Basically if
%                 graph has edges {1,2} and {1,3} vargin{2} = [1 2;1 3]
%               - vargin{3} = 0 if graph is undirected 
%               - vargin{4} = VtxLoc: location of each vertex (x,y) given
%                 as a matrix
%               - vargin{5} = userEdg   :these are edges that are not random
%               - vargin{6} = addedEdge :these are random edges that are
%                 generated by genRandUndirectedGraphEdg.m based on user
%                 input distance threshold. This function merely draws the
%                 graph, it does not define the random graph
%               - vargin{7} = optional input -> handle of axes to plot
%                 graph on. If empty, then this function creates a new
%                 figure and draws graph on it
%
% Output:       none, draws the graph
%
% 7/1/03 Jasmine Sandhu - sandhu@aa.washington.edu 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   $Revision: 1.2 $   
%   $Date: 2004/10/30 20:45:57 $
%
%   Version History:
%   ----------------
%   $Log: drawRandGraph.m,v $
%   Revision 1.2  2004/10/30 20:45:57  jasmine
%   Function takes an input of axes handle -- if user does not enter an axes handle, the function creates a figure to draw graph
%
%   Revision 1.1  2004/10/30 18:11:37  jasmine
%   Created Graph Theory folder in STB repository
%
%

if( isempty(VtxLoc))
   %--- this must not be empty. If VtxLoc is not important use drawGraph.m function.
   error('User must input all 6 options and VtxLoc cannot be empty');
end
%% Draw window for plotting graph
screen_size = get(0,'ScreenSize');
figure_size = [450 450];  % [width height]
figure_pos  = [10, (screen_size(4)/2 + (screen_size(4)/2 - figure_size(1) - 50))];
plot_size   = [425 425];  % [width height]

%% Note following values were computed to obtain the plot in approx..center of figure
plot_pos    = (figure_size - plot_size)./2;

if( isempty(ax_handle))
    %--- create a figure & axes since user did not provide a handle of existing
    %axes to plot on
    graphW = figure('NumberTitle' ,'off',...
        'Position'    , [figure_pos     figure_size], ...
        'Units'       ,'pixels',...
        'Menubar'     ,'figure',...
        'Color'       ,[0.8 0.8 0.8],...
        'Name'        ,'Random Graph with random node locations',...
        'Resize'      ,'off', ...
        'Tag'         ,'RandGraphWin');

    GR   = axes('Units', 'pixels', 'Parent', graphW);
    set( GR, 'Box', 'on','GridLineStyle', 'none', ...
        'Position', [plot_pos       plot_size], ...
        'XTick',[0 1],'YTick',[0 1],'XTickLabel','','YTickLabel','', ...
        'Xlim',[0 1], 'Ylim', [0 1], ...
        'XMinorTick', 'off', 'YMinorTick','off'); hold on;
else
   axes(ax_handle) 
end

% each node is evenly spaced out on a circle of radius 0.4 plotted on
plot(VtxLoc(:,1), VtxLoc(:,2),'r.'); hold on
ind1 = 1; ind2 = 1; ind3 = 1;

if direct == 0
    % Draw Edges -- undirected graph
    for ind = 1:size(Edg, 1)
        xVal= [VtxLoc(Edg(ind,1),1), VtxLoc(Edg(ind,2),1)];
        yVal= [VtxLoc(Edg(ind,1),2), VtxLoc(Edg(ind,2),2)];

        % Since addedEdge and userEdg are both sorted, all values of Edg
        % must belong to either addedEdg or userEdg
        if( ind1 <= size(userEdg,1) & userEdg(ind1,:) == Edg(ind,:) )
            plot(xVal, yVal,'-g', 'LineWidth', 2); hold on;
            ind1 = ind1 + 1;
        else if( ind2 <= size(addedEdge,1) & addedEdge(ind2,:) == Edg(ind,:) )
                % if it does not belong to firstChk, it must belong to secndChk
                plot(xVal, yVal,'-b', 'LineWidth', 2); hold on;
                ind2 = ind2 + 1;
            else
                errordlg('Problem: Found an edge drawRandGraph that does not belong in userEdg or addedEdge');
                keyboard
            end                        
        end
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end
else
    % Draw Edges -- directed graph
    % Currently graph is always assumed to be static, following is never used
    strt= VtxLoc(Edg(:,1),:);
    stp = VtxLoc(Edg(:,2),:);
    arrow('start',strt, 'stop', stp, 'Length', 15, 'BaseAngle', 30, 'TipAngle', 20,'Width', 2, ...
          'EdgeColor', 'g','FaceColor', 'g'); hold on;
end

for ind = 1:Vtx;
    %% Labelling the graph nodes
    str1 = num2cell(ind);
    if( VtxLoc(ind,1) >= 0.5)
        if( VtxLoc(ind,2) >= 0.5 )
            % Quadrant I
            text( VtxLoc(ind, 1) + 0.01, VtxLoc(ind, 2) + .01, str1, ...
                  'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        else
            % Quadrant IV
            text( VtxLoc(ind, 1) + 0.01, VtxLoc(ind, 2) - .01, str1, ...
                  'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        end
        %%%%%%%%%%%
    else
        if( VtxLoc(ind,2) >= 0.5 )
            % Quadrant II
            text( VtxLoc(ind, 1) - 0.01, VtxLoc(ind, 2) + .01, str1, ...
                  'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        else  
            % Quadrant III
            text( VtxLoc(ind, 1) - 0.01, VtxLoc(ind, 2) - .01, str1, ...
                  'Margin', 1,'BackgroundColor', [.8 .8 .8]);
        end
        %%%%%%%%%%%
    end
    %% End Labelling the graph nodes
end