function [out] = sltranslate(saveAsVersion)
%SLTRANSLATE Returns information used by save_system to save models.
%   SLTRANSLATE is an internal function used by save_system for saving
%   to a previous version. It is not meant to be called directly.
%
%   limitations of R13 verison 1.0.1 save as:
%       Lapse Rate Model will be saved as ISA Atmosphere Model
%       Customer will have to do a manual replacement in R13 of
%          COESA Atmosphere Model
%          Wind Shear Model
%          Discrete Turbulence Model
%          Dryden Wind Turbulence Model (Continuous (+q -r))
%          6DoF (Euler Angles)
%          6DoF (Quaternion)
%          3DoF (Body Axis)
%       due to changes in number of port and in values of mask parameters
%
%   Copyright 1990-2004 The MathWorks, Inc.

out = [];

% Check for valid versions
validVersions = {'SAVEAS_R13SP1', 'SAVEAS_R13', 'SAVEAS_R12', 'SAVEAS_R12P1'};
if ~any(strcmp(saveAsVersion, validVersions))
   error('aeroblk:sltranslate.m',['Invalid version in sltranslate.m', ...
      saveAsVersion]);
end

% The structure of the output data is as follows:
% o All the data is encapulated in a MATLAB struct data type.
% o The struct has the following fields:
%   - A field storing a list of old and new reference block locations
%     The format of this is a cell array containing a list of cell arrays.
%     Each sub cell array has the current and old reference block name.
%   - A field consisting of new blocks that have been added.
%     The format of this field is a cell array containing the name of the block
%     followed by a 1x2 vector containing the number of input and output ports.
%   - A field containing all new block parameters. The format of this
%     is a cell array of block names (strings) followed by a cell array
%     of param names.
%   - A field containing all new block parameters that are common across all
%     blocks. These parameters can also be specified on a block by block basis

if strcmp(saveAsVersion, 'SAVEAS_R13')

   RefMap = {{'aerolibpropulsion2/Turbofan Engine System',...
      'aerolibpropulsion/Turbofan Engine System'},...
      {'aerolibprivatev1p5/COESA Atmosphere Model',...
      'aerolibatmos/COESA Atmosphere Model'},...
      {'aerolibatmos2/ISA Atmosphere Model', ...
      'aerolibatmos/ISA Atmosphere Model'}, ...
      {'aerolibprivatev1p5/Dryden Wind Turbulence Model',...
      'aerolibwind/Dryden Wind Turbulence Model'},...
      {'aerolibprivatev1p5/Discrete Wind Gust Model',...
      'aerolibwind/Discrete Wind Gust Model'},...
      {'aerolibprivatev1p5/Wind Shear Model',...
      'aerolibwind/Wind Shear Model'},...
      {'aerolibutil/3x3 Cross Product',...
      'aerolibtransform/3x3 Cross Product'},...
      {'aerolibtransform2/Quaternions to Euler Angles',...
      'aerolibtransform/Quaternions to Euler Angles'},...
      {'aerolibtransform2/Euler Angles to Quaternions',...
      'aerolibtransform/Euler Angles to Quaternions'},...
      {sprintf('aerolibtransform2/Quaternions to \nDirection Cosine Matrix'),...
      sprintf('aerolibtransform/Quaternions to \nDirection Cosine Matrix')},...
      {sprintf('aerolibtransform2/Direction Cosine Matrix \nto Quaternions'),...
      sprintf('aerolibtransform/Direction Cosine Matrix \nto Quaternions')},...
      {sprintf('aerolibtransform2/Euler Angles to \nDirection Cosine Matrix'),...
      sprintf('aerolibtransform/Euler Angles to \nDirection Cosine Matrix')},...
      {sprintf('aerolibtransform2/Direction Cosine Matrix to\nEuler Angles'),...
      sprintf('aerolibtransform/Direction Cosine Matrix to\nEuler Angles')},...
      {sprintf('aerolibasang/Incidence \n& Airspeed'),...
      sprintf('aerolib3dof/Incidence \n& Airspeed')},...
      {'aerolibprivatev1p5/3DoF (Body Axes)',...
      sprintf('aerolib3dof/ Equations of Motion\n(Body Axes)')},...
      {'aerolibprivatev1p5/6DoF (Quaternion)',...
      'aerolib6dof/6DoF (Quaternion)'},...
      {'aerolibprivatev1p5/6DoF (Euler Angles)',...
      'aerolib6dof/6DoF (Euler Angles)'},...
      {'aerolibgravity2/WGS84 Gravity Model',...
      'aerolibgravity/WGS84 Gravity Model'},...
      };

   NewBlocks = {sprintf('aerolibguid/Calculate\nRange'),[2 1],...
      sprintf('aerolibadyn/Aerodynamic\nForces and Moments'),[4 2],...
      sprintf('aerolibbdyn/Estimate\nCenter of Gravity'),[2 2],...
      sprintf('aerolibbdyn/Estimate\nInertia Tensor'),[2 2],...
      sprintf('aerolibbdyn/Moments about CG \ndue to Forces'),[3 1],...
      'aerolibbdyn/Symmetric Inertia Tensor',[6 1],...
      'aerolibasang/Dynamic Pressure',[2 1],...
      'aerolibasang/Mach Number',[2 1],...
      'aerolibasang/Ideal Airspeed Correction',[3 1],...
      'aerolibasang/Relative Ratio',[-1 -1],...
      sprintf('aerolibasang/Incidence, Sideslip,\n& Airspeed'),[1 3],...
      sprintf('aerolibutil/Invert \n3x3 Matrix'),[1 1],...
      sprintf('aerolibutil/Determinant of\n3x3 Matrix'),[1 1],...
      sprintf('aerolibutil/Adjoint of\n3x3 Matrix'),[1 1],...
      'aerolibutil/Create 3x3 Matrix',[9 1],...
      'aerolibutil/SinCos',[1 2],...
      'aerolibatmos2/Pressure Altitude',[1 1],...
      'aerolibatmos2/COESA Atmosphere Model',[1 4],...
      'aerolibgravity2/World Magnetic Model 2000',[-1 -1],...
      'aerolib6dof2/6DoF (Euler Angles)',[-1 -1],...
      'aerolib3dof2/3DoF (Body Axes)',[-1 -1],...
      'aerolibwind2/Horizontal Wind Model',[-1 1],...
      'aerolibwind2/Wind Shear Model',[2 1],...
      'aerolibwind2/Discrete Wind Gust Model',[1 1],...
      cat(2,sprintf('aerolibwind2/Dryden Wind Turbulence Model \n'), ...
      '(Continuous (+q -r))'),[3 2],...
      };

   NewBlockParams = {'aerolibgravity2/WGS84 Gravity Model',{'action'},...
      'aerolibatmos2/ISA Atmosphere Model',{'custom','g',...
      'gamma','R','L','h_trop','h_strat','rho0','P0','T0'},...
      };

   NewCommonBlockParams = {};
else
   RefMap = {};
   NewBlocks = {};
   NewBlockParams = {};
   NewCommonBlockParams = {};
end

out.RefMap = RefMap;
out.NewBlocks = NewBlocks;
out.NewBlockParams = NewBlockParams;
out.NewCommonBlockParams = NewCommonBlockParams;



