function workbench(dist_called,rownum, std_state)

% Displays the appropriate workbench for any primary & standard model

global Scale Primary_state Next_process Last_process Current_process new_model_title

% The following variables are being declared globally here so that
% they can be initialized prior to calling the compute module for the first time
global state_vector P trans_dist fpt occ_times lim_occ cost total_cost longrun_cost
if std_state ~= 0
   state_vector = [] ;
   P = [] ;
end

trans_dist = [] ;
fpt = [] ;
occ_times = [] ;
lim_occ = [] ;
cost = [] ;
total_cost = [] ;
longrun_cost = [] ;

% If this is not the correct procedure to be executing, return to caller
if strcmp(lower(Next_process), 'workbench') ~= 1
  return
else
   Last_process = Current_process;
   Current_process = 'workbench';
   Next_process = 'quit' ;
   end

% initialize workbench menu items for all models
workbench_menu_items = { {'Mean and Variance' 'CDF and PMF/PDF' ...
                          'Plot of CDF' 'Plot of PMF/PDF'} ...
                         {'Transition Matrix' 'Transient Distribution' 'Occupancy Times'...
                          'Limiting/Occupancy Distribution' 'Cost Models' ...
                          'First Passage Times'} ...
                         {'Rate Matrix' 'Transient Distribution' 'Occupancy Times Matrix'...
                          'Limiting/Occupancy Distribution' 'Cost Models' ...
                          'First Passage Times'} ...
                         {'Transition Matrix' 'Sojourn Time Vector' ...
                          'Limiting/Occupancy Distribution' 'Cost Models'} ...
                         {'Compute All Results for this Model'} ...
                         {'Optimal Long Run Cost/Revenue Rate' 'Plot of Objective Function'} ...
                         {'Cost Matrix' 'Transition Probability Matrices' ...
                            'Sojourn Time Matrix' 'Optimal Policy and Cost Rate'} } ;
      
%%% NOTE: These were the previous workbench items for Queueing Systems:
%%%                         {'Mean No. in System' 'Mean No. in Queue'...
%%%                          'Mean Waiting Time' 'Mean Queueing Time' 'Limiting Distribution' ...
%%%                          'Mean No. of Busy Servers' 'Fraction Lost'} ...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% select the appropriate set based upon the primary model chosen
work_menu = workbench_menu_items{rownum} ;
m = size(work_menu, 2) ;

% retrieve the labels of the currently selected Primary and Standard model ;
model = Primary_state(rownum).model ;
primary_model = sprintf('Standard %s', model) ;
if std_state > 0
model = Primary_state(rownum).std_model_array{std_state} ;
std_model = sprintf('Workbench for %s Model', model) ;
else
   std_model = sprintf('Workbench for %',new_model_title);
   end;

% display the workbench menu main figure
workfig = figure('Name', primary_model, ...
                 'NumberTitle','off', ...
                 'Units','normalized', ...
                 'Color',[0.76 0.76 0.76], ...
                 'Position',[.3 .5-.1*(m/2) .4 .1*m+.1], ...
                 'Menubar','none') ;

% add exit, return to main, previous screen, and title
exit = exit_menu(workfig) ;
exit = return_to_main(workfig) ;
exit = previous_screen(workfig) ;
help_msg_id = [110 120 130 140 150 160 170 ];
exit = help_msg(workfig,help_msg_id(rownum));


uicontrol('Parent',workfig, ...
          'Units','normalized', ...
        	 'Position',[.1 .72 .8 .25], ...
          'Style','text', ...
          'Fontname','time roman', ...
          'Fontsize',Scale*12, ...
          'String', std_model) ;

% add workbench menu items for this particular model set
for k = 1:m
  uicontrol('Parent', workfig, ...
            'Units','normalized', ...
            'Fontname','time roman', ...
            'Fontsize',Scale*12, ...
            'String', work_menu(k), ...
            'Position',[.1 .01+(.55/m)*(m-k) .8 .55/m], ...
            'Callback', [sprintf('compute(%i, %i, %i,%i);', rownum, std_state, k,dist_called)]) ;
end

uiwait(workfig)
