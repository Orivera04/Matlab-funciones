function matrix_input = add_nonsq_matrix_input(title_name,varname,varlabel,column_labels,...
   row_labels,matrix_size,init_value)

% INPUT PLATFORM FOR THE PARNMETERS OF THE STANDARD MATRIX INPUT
global Scale NMValue NMHLabel_handle NMVLabel_handle NMValue_handle NMHLabel NMVLabel cancel_win
global step1 step2
step1 = 0; step2 = 0;
%initialize variables
valid_input = 0;
% max size of a matrix on screen at one time = 10X10
matrix_size1 = matrix_size(1);
matrix_size2=matrix_size(2);
num_disp1 = min(matrix_size1,10) ;
num_disp2 = min(matrix_size2,10);
num_disp = [num_disp1 num_disp2];
if isempty(column_labels)
   NMHLabel = [1:matrix_size1];
  else
   NMHLabel = row_labels;
  end
if isempty(row_labels)
   NMVLabel = [1:matrix_size2];
else
   NMVLabel = column_labels;
end


while(valid_input == 0)
   NMValue = init_value;

   % Display the main figure
   aminputfig = figure('Name', title_name, ...
                  'NumberTitle','off', ...
                  'Units','normalized', ...
                  'Color',[0.76 0.76 0.76], ...
                  'Position',[.5-.04*10 .07 .08*10 .08*10], ...
                  'Menubar','none',...
                  'Tag','aminputfig');

uicontrol('Parent',aminputfig, ...
          'Units','normalized', ...
        	 'Position',[.1 .85 .8 .15], ...
          'Style','text', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Fontname','time roman', ...
          'Fontsize',Scale*20, ...
          'HorizontalAlignment','left',...
          'String', sprintf('%s :', varlabel)) ;
       for k =1:num_disp1
    NMHLabel_handle(k) = uicontrol('Parent',aminputfig, ...
	                                'Units','normalized', ...
                                   'BackgroundColor',[0.76 0.76 0.76], ...
                                   'Position',[.05  .75-.06*k .08 .06], ...
                                   'HorizontalAlignment','center',...
                                   'Fontsize',Scale*12, ...
                                   'String', sprintf('%d', NMHLabel(k)), ...
	                                'Style','text', ...
                                   'Tag', sprintf('MatrixLabel%d', k), ...
                                   'UserData', [k])' ;
                             end
                             

     for k = 1:num_disp2
     NMVLabel_handle(k) = uicontrol('Parent',aminputfig, ...
	                                'Units','normalized', ...
                                   'BackgroundColor',[0.76 0.76 0.76], ...
                                   'Position',[.05+.08*k .75 .08 .06], ...
                                   'HorizontalAlignment','center',...
                                   'Fontsize',Scale*12, ...
                                   'String', sprintf('%d', NMVLabel(k)), ...
	                                'Style','text', ...
                                   'Tag', sprintf('MatrixLabel%d', k), ...
                                   'UserData', [k])' ;
     

     for s=1:num_disp1
    % Display labels for each matrix element
        % Display entry fields for parameters 
    NMValue_handle(s,k) = uicontrol('Parent',aminputfig, ...
	                                'Units','normalized', ...
                                   'BackgroundColor',[1 1 1], ...
                                   'Position',[.05+.08*k .75- .06*s .08 .06], ...
                                   'HorizontalAlignment','center',...
                                   'Fontsize',Scale*12, ...
                                   'String', NMValue(s,k), ...
	                                'Style','edit', ...
                                   'Tag', sprintf('MatrixValue%d_%d', s,k), ...
                                   'UserData', [s k]) ;
    end %for s
end  % for k


% Sliders
  if matrix_size2 > num_disp2

    if matrix_size2 - num_disp2 == 1
      eachstep2 = .99 ;
    else 
      eachstep2 = 1 / (matrix_size2 - num_disp2); 
    end

    uicontrol('Parent',aminputfig, ...
	           'Units','normalized', ...
	           'Position',[.13 .82 .08*num_disp2 .05], ...
	           'Style','slider', ...
              'SliderStep', [eachstep2 1], ...
              'Value', 0, ...
              'Callback', sprintf('updat_and_hscroll([%i,%i])',num_disp1,num_disp2), ...
              'Tag','NMHSlider1') ;
                     
    end  % if
        if matrix_size1 > num_disp1

    if matrix_size1 - num_disp1 == 1
      eachstep1 = .99 ;
    else 
      eachstep1 = 1 / (matrix_size1 - num_disp1); 
    end

                         
    uicontrol('Parent',aminputfig, ...
       'Units','normalized', ...
              'Position',[.025 .15 .03 .06*num_disp1], ...
	           'Style','slider', ...
              'SliderStep', [eachstep1 1], ...
              'Value', 1, ...
              'Callback', sprintf('updat_and_vscroll([%i,%i])',num_disp1,num_disp2), ...
              'Tag', 'MVSlider1') ;

    end               
% OK button
uicontrol('Parent',aminputfig, ...
          'Units','normalized', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Callback', 'uiresume(gcbf)',...
          'FontName','time roman', ...
	       'Fontsize',Scale*18, ...
	       'Position',[.45 .05 .08 .06], ...
          'String','OK') ;
       %CANCEL button
uicontrol('Parent',aminputfig, ...
          'Units','normalized', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Callback', ['set_cancel;uiresume(gcbf);'],...
          'FontName','time roman', ...
          'Fontsize',Scale*14, ...
          'Position',[.55 .05 .15 .06], ...
          'String','Cancel', ...
          'Tag', 'Cancel') ;

       uiwait(aminputfig)
       
if (cancel_win == 1)
   matrix_input = [] ;
   valid_input = 1; %to get out of the loop.
else
   update_add_nonsq_matrix_values(num_disp);
   matrix_input = NMValue;
   valid_input = validate_add_nonsq_matrix_parm(varname,matrix_input);
end
if valid_input == 0
   init_value = matrix_input;
   close(inputfig)
end
end; %end while

close(aminputfig)





