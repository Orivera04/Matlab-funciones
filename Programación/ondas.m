function ondas
% Programa sobre Paquetes de Ondas creado por
% Carlos Adrián Vargas Aguilera
% Lic. en Física
% UNIVERSIDAD DE GUADALAJARA 
% México, 2003
%
% nubeobscura@hotmail.com

% Usar una sola ventana principal:
persistent v_principal
if ishandle(v_principal)
 set(v_principal, 'Visible','on')
 return
end

% Nota: en la variable DATOS de tipo structure se guardaran los 
%       "application data" de las ventanas. Son datos que pueden
%       pasar de function a function sin necesidad de ser argumento
%       de salida o de entrada. Se mandan llamar o guardar mediante
%       GUIDATA.
%
% LLAMAR "application data" de la ventana con "handle" f, es decir, 
% f = figure(...):
% datos = guidata(f);
% datos = guidata(gcbo);  
% datos = guidata(gcbf);
% donde, gcbo es el objeto EN la ventana f cuyo callback se está
% ejecutando y gcbf es f si es la ventana actual.
%
% GUARDAR "application data" de la ventana con "handle" f:
% ...datos.nombre1 = valor1;
%    datos.nombre2 = valor2;... etc
% guidata(f,datos);
% guidata(gcbo,datos);  
% guidata(gcbf,datos);
% donde, gcbo es el objeto EN la ventana f cuyo callback se está
% ejecutando y gcbf es f si es la ventana actual.
%
% En realidad, el nombre DATOS no importa.

% Tamaño de la pantalla en pixeles:
temp = get(0,'Units'); set(0,'Units','pixels')
datos.pantalla = get(0,'ScreenSize'); % [1 1 largo ancho].
datos.pantalla(1:2) = []; set(0,'Units',temp), clear temp
% Propiedades para las ventanas:
datos.propiedad_v = struct( ...
 'BackingStore'    ,'off', ... % Menos memoria
 'IntegerHandle'   ,'off', ... % Figure No. no es un entero.
 'Color'           ,get(0,'DefaultUicontrolBackgroundColor'), ... % 64/85*[1 1 1]
 'HandleVisibility','callback', ... % gcf = ?
 'MenuBar'         ,'none', ...
 'Toolbar' 	       ,'none', ...
 'Resize'          ,'off', ... % No maximizar ni minimizar
 'NumberTitle'     ,'off' ...
);
% Ventana principal:
v_principal = figure(datos.propiedad_v, ... 
 'Visible'        ,'off', ...
 'Name'           ,'Paquete de Ondas', ...
 'Position'       ,[4 datos.pantalla(2)-600/3-40 [800 600]/3], ...
 'CloseRequestFcn',@Cerrar_Todo ...
);
% Gráfica de la ventana principal:
x = linspace(-2*pi,2*pi,64); [x,y] = meshgrid(x); x = x/1.2 + 1.2; y = y/5;
z = exp(-y.^2 + x/6).*(cos(x).^2 + cos(y).^2);
ejes_principales = axes('Parent',v_principal, 'Visible','off', ...
 'Units','normalized','Position',[0 0 1 1],'HandleVisibility','off' ...
);
surf(x,y,z, 'Parent',ejes_principales, ...
 'FaceColor','interp', 'EdgeColor','none' ...
)
set(ejes_principales, 'XLim',[min(x(1,:)) max(x(1,:))], ...
 'YLim',[min(y(:,1)) max(y(:,1))], 'View',[0 90] ... % plano x-y
)
clear x y z
% Barra de herramientas de la ventana principal:
b_correr = uimenu(v_principal, 'Label','&Correr', 'Checked','on');
b_ayuda  = uimenu(v_principal, 'Label','&Ayuda');
uimenu(b_correr, 'Label','&1. Suma Simple...', 'Callback',@Suma_Simple)
uimenu(b_correr, 'Label','&2. Distribución Gaussiana de Números de Onda...', ...
 'Callback',@Paquete_gaussiano)
uimenu(b_correr, 'Label','&3. Ondas de de Broglie...', ...
 'Callback',@Ondas_de_De_Bloglie)
uimenu(b_correr, 'Label','&4. Refracción de Luz...', ...
 'Callback',@Refraccion_de_luz)
uimenu(b_correr, 'Label','&Salir', 'Callback',@Cerrar_Todo, ...
 'Separator','on', 'Accelerator','s')
uimenu(b_ayuda,  'Label','Ayuda en &PDF...')% ,'Callback',@Ayuda_en_PDF);
uimenu(b_ayuda,  'Label','&Acerca de Paquete de Ondas...', ...
 'Separator','on', 'Callback',@Acerca_de_PO)
set(v_principal, 'Visible','on')

datos.handle_v = []; % "Handle"'s de las ventanas secundarias.
% Guardar "A.D." de la ventana principal:
guidata(v_principal,datos)
% FIN de function principal ##################################################################

% INICIO de subfunctions (callbacks):
%
% Los siguientes son argumentos por default de los callback's (el
% nombre no importa): 
% HANDLE_O: es el "handle" del objeto cuyo callback se esta
%           ejecutando.
% EVENTDATA: este argumento es necesario pero no se utiliza.
%
% El formato es el siguiente si se requieren argumentos.
% En las propiedades del objeto:
% ...,'callback',{@nombre_del_callback,arg_1,arg_2, etc},
% En la subfunction (callback) del objeto:
% function nombre_del_callback(handle_o,eventdata,arg_1,arg_2, etc)

function Suma_Simple(handle_o,eventdata)
% Paquete de ondas de una suma de dos ondas viajeras.

% Callback de: Suma Simple... 
% de la barra de herramientas de la ventana principal.

% Una sola ventana:
persistent v_simple
if ishandle(v_simple)
 set(v_simple, 'Visible','on')
 return
end
datos = guidata(gcbf);

% Ventana de "Suma Simple..." 
v_simple = figure(datos.propiedad_v, ...
 'Name'           ,'Suma Simple', ...
 'Position'       ,[datos.pantalla/2-[800 600]/3-1*[40 -22] [800 600]*2/3], ...
 'Color'          ,'k', ...
 'Visible'        ,'off', ...
 'CloseRequestFcn',@Cerrar ...
);
ejes_1 = axes('Parent',v_simple, 'Color','none', 'XLim',[0 2*pi], ...
 'YLim',[-10 10], 'NextPlot','replacechildren', ...
 'Units','normalized', 'Position',[0.05 0.05 0.70 0.20] ...
);
ejes_2 = axes('Parent',v_simple, 'Color','none', 'XLim',[0 2*pi], ...
 'YLim',[-10 10], 'NextPlot','replacechildren', ...
 'Units','normalized', 'Position',[0.05 0.30 0.70 0.20] ...
);
ejes_3 = axes('Parent',v_simple, 'Color','none', 'XLim',[0 2*pi], ...
 'YLim',[-20 20], 'NextPlot','replacechildren', ...
 'Units','normalized', 'Position',[0.05 0.55 0.7 0.40] ...
);
s1 = uicontrol(v_simple, 'Style','slider',...
 'ToolTipString','Frecuencia', 'Units','normalized', ...
 'Position',[0.80 0.05 0.04 0.20], 'Min',0, 'Max',1, ...
 'SliderStep',[0.05 0.1], 'Value',0.5, 'Callback',@Slider_simple ...
);
s2 = uicontrol(v_simple, 'Style','slider',...
 'ToolTipString','Número de onda', 'Units','normalized', ...
 'Position',[0.84 0.05 0.04 0.20], 'Min',-10, 'Max',10, ...
 'SliderStep',[0.05 0.1], 'Value',5, 'Callback',@Slider_simple ...
);
s3 = uicontrol(v_simple, 'Style','slider', ...
 'ToolTipString','Amplitud', 'Units','normalized', ...
 'Position',[0.88 0.05 0.04 0.20], 'Min',0, 'Max',10, ...
 'SliderStep',[0.05 0.1], 'Value',5, 'Callback',@Slider_simple ...
);
s4 = uicontrol(v_simple, 'Style','slider', ...
 'ToolTipString','Diferencia de Número de Ondas', 'Units','normalized', ...
 'Position',[0.92 0.05 0.04 0.20], 'Min',0, 'Max',10, ...
 'SliderStep',[0.05 0.1], 'Value',5, 'Callback',@Slider_simple ...
);
prop_texto = struct( 'Style','text', ...
 'BackgroundColor',get(v_simple,'Color'), ...
 'ForegroundColor','w', 'Units','normalized' ...
);
% Texto Frecuencia:
t1 = uicontrol(v_simple, prop_texto, ...
 'String','0', 'Position',[0.80 0.02 0.04 0.03] ...
);
t2 = uicontrol(v_simple, prop_texto, ...
 'String','w', 'Position',[0.80 0.26 0.04 0.03] ...
);
% Texto Número de Onda:
t3 = uicontrol(v_simple, prop_texto, ...
 'String','-k', 'Position',[0.84 0.02 0.04 0.03] ...
);
t4 = uicontrol(v_simple, prop_texto, ...
 'String','+k', 'Position',[0.84 0.26 0.04 0.03] ...
);
% texto Amplitud:
t5 = uicontrol(v_simple, prop_texto, ...
 'String','0', 'Position',[0.88 0.02 0.04 0.03] ...
);
t6 = uicontrol(v_simple, prop_texto, ...
 'String','A', 'Position',[0.88 0.26 0.04 0.03] ...
);
% texto Diferencia de Número de Onda:
t7 = uicontrol(v_simple, prop_texto, ...
 'String','0', 'Position',[0.92 0.02 0.04 0.03] ...
);
t8 = uicontrol(v_simple, prop_texto, ...
 'String','dk', 'Position',[0.92 0.26 0.04 0.03] ...
);
pb = uicontrol(v_simple, 'Style','pushbutton', 'String','Parar', ...
 'Units','normalized', 'Position',[0.84 0.30 0.08 0.05], ...
 'Callback',@Parar ...
);
t_e = uicontrol(v_simple, 'Style','toggle', ...
 'String',['Quitar envolvente'], 'Units','normalized', ...
 'Position',[0.805 0.72 0.18 0.05], 'Callback',@Toggle_envolvente ...
);
% Onda 1:
uicontrol(v_simple, prop_texto, 'String','onda [ A, w, t ] :',...
 'HorizontalAlignment','Left', 'Position',[0.05 0.25 0.70 0.045] ...
)
% Onda 2:
uicontrol(v_simple, prop_texto, 'String','onda [ A, w(1+dk/k), k+dk ] :', ... 
 'HorizontalAlignment','Left', 'Position',[0.05 0.50 0.70 0.045] ...
)
set(v_simple, 'Visible', 'on')

datos.handle_v = [datos.handle_v v_simple]; 
guidata(gcbf,datos)
clear datos

datos.handle_vp = gcbf;
datos.texto = [t1 t2 t3 t4 t5 t6 t7 t8];
datos.ejes = [ejes_1 ejes_2 ejes_3];
datos.slider = [s1 s2 s3 s4];
datos.toggle = t_e;
datos.boton = pb;
datos.w = get(s1,'Value');
datos.k = get(s2,'Value');
datos.a = get(s3,'Value');
datos.dk = get(s4,'Value');
guidata(v_simple,datos)
Toggle_envolvente(t_e,[])
Slider_simple(v_simple,[])
%FIN function Suma_Simple ####################################################################

function Slider_simple(handle_o,eventdata)

datos = guidata(handle_o);
datos.parar = false;
switch handle_o
 case datos.slider(1), datos.w = get(handle_o,'Value');
  if datos.w ~= 0
   set(datos.texto(1),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
   set(datos.texto(2),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  end
 case datos.slider(2), datos.k = get(handle_o,'Value');
  set(datos.texto(3),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(4),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  if datos.k == 0, datos.k = eps; end
 case datos.slider(3), datos.a = get(handle_o,'Value');
  set(datos.texto(5),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(6),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
 case datos.slider(4), datos.dk = get(handle_o,'Value');
  set(datos.texto(7),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(8),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
end
guidata(handle_o,datos);
if datos.w ~= 0
 set(datos.boton,'Enable','on'), set(datos.toggle,'Enable','on')
end
f1 = 'datos.a*cos(datos.w*t - datos.k*x)';
f2 = 'datos.a*cos(datos.w*(1+datos.dk/datos.k)*t - (datos.k + datos.dk)*x)';
fe = '2*datos.a*cos(datos.dk*(datos.w/datos.k*t - x)/2)';
x = linspace(0,2*pi,200);
t = 0;
pf1 = plot(x,eval(f1), 'Parent',datos.ejes(1));
pf2 = plot(x,eval(f2), 'Parent',datos.ejes(2));
pf3 = plot( x,zeros(size(x)),'w', x,eval(fe),'r', x,-eval(fe),'r', ...
 x,eval(f1) + eval(f2),'g', 'Parent',datos.ejes(3) ...
);
datos.envolvente = pf3(2:3);
guidata(handle_o,datos)
if get(datos.toggle,'Value')
 set(pf3(2),'Visible','off'), set(pf3(3),'Visible','off')
end
while datos.w ~= 0
 drawnow
 if ~ishandle(handle_o), return, end
 datos = guidata(handle_o);
 if datos.parar, break, end
 t = t + 1;
 set(pf1,    'YData', eval(f1))
 set(pf2,    'YData', eval(f2))
 set(pf3(2), 'YData', eval(fe))
 set(pf3(3), 'YData',-eval(fe))
 set(pf3(4), 'YData', eval(f1) + eval(f2))
end
Parar(handle_o,[])
%FIN function Slider1_simple #################################################################

function Paquete_gaussiano(handle_o,eventdata)
% Paquete de ondas de una suma de ondas viajeras con distribución
% gaussiana de número de ondas.

% Callback de: Paquete gaussiano... 
% de la barra de herramientas de la ventana principal.

% Una sola ventana:
persistent v_gaussiana
if ishandle(v_gaussiana)
 set(v_gaussiana, 'Visible','on')
 return
end
datos = guidata(gcbf);

% Ventana de "Paquete Gaussiano..." 
v_gaussiana = figure(datos.propiedad_v, ...
 'Name'           ,'Paquete Gaussiano', ...
 'Position'       ,[datos.pantalla/2-[800 600]/3-0*[40 -22] [800 600]*2/3], ...
 'Color'          ,'k', ...
 'Visible'        ,'off', ...
 'CloseRequestFcn',@Cerrar ...
);
axes('Parent',v_gaussiana, 'Color','none', 'NextPlot','add',...
 'Units','normalized', 'Position',[0.05 0.33 0.70 0.20] ...
);
text(0.5,0.5,['A \int_{-\infty}^\infty f(k)e^{-ik(ct-x)} dk,     ' ...
 'f(k) = \{2\pie^{[(k-k'')/\sigma]^2}\}^{-' char(189) '}/\sigma'], ...
 'Color','w', 'HorizontalAlignment','center', 'VerticalAlignment','middle' ...
)
ejes_2 = axes('Parent',v_gaussiana, 'Color','none', 'XLim',[0 2*pi], ...
 'YLim',[-10 10], 'NextPlot','replacechildren', ...
 'Units','normalized', 'Position',[0.05 0.55 0.7 0.40] ...
);
ejes_1 = axes('Parent',v_gaussiana, 'Color','none', 'XLim',[-25 25], ...
 'YLim',[0 1], 'NextPlot','add', ...
 'Units','normalized', 'Position',[0.05 0.05 0.70 0.20] ...
);
plot([0 0],[0 1],'w', [-25 25],[0 0],'w')
text(24,0.2,'k', 'Color','w', 'FontSize',9)
text(25,0,'>', 'Color','w', 'FontSize',10, ...
 'HorizontalAlignment','center', 'VerticalAlignment','middle' ...
)
text(0.1,1.03,'\^', 'Color','w', 'FontSize',12, ...
 'HorizontalAlignment','center', 'VerticalAlignment','cap' ...
)
title('\sigma f(k)', 'Color','w', 'FontSize',9)
s1 = uicontrol(v_gaussiana, 'Style','slider',...
 'ToolTipString','Velocidad', 'Units','normalized', ...
 'Position',[0.80 0.05 0.04 0.20], 'Min',0, 'Max',0.6, ...
 'SliderStep',[0.05 0.1], 'Value',0.3, 'Callback',@Slider_gaussiano ...
);
s2 = uicontrol(v_gaussiana, 'Style','slider',...
 'ToolTipString','Número de onda', 'Units','normalized', ...
 'Position',[0.84 0.05 0.04 0.20], 'Min',0, 'Max',20, ...
 'SliderStep',[0.05 0.1], 'Value',10, 'Callback',@Slider_gaussiano ...
);
s3 = uicontrol(v_gaussiana, 'Style','slider', ...
 'ToolTipString','Amplitud', 'Units','normalized', ...
 'Position',[0.88 0.05 0.04 0.20], 'Min',0, 'Max',10, ...
 'SliderStep',[0.05 0.1], 'Value',10, 'Callback',@Slider_gaussiano ...
);
s4 = uicontrol(v_gaussiana, 'Style','slider', ...
 'ToolTipString','Desviación', 'Units','normalized', ...
 'Position',[0.92 0.05 0.04 0.20], 'Min',0, 'Max',8, ...
 'SliderStep',[0.05 0.1], 'Value',4, 'Callback',@Slider_gaussiano ...
);
prop_texto = struct( 'Style','text', ...
 'BackgroundColor',get(v_gaussiana,'Color'), ...
 'ForegroundColor','w', 'Units','normalized' ...
);
% Texto Velocidad:
t1 = uicontrol(v_gaussiana, prop_texto, ...
 'String','0', 'Position',[0.80 0.02 0.04 0.03] ...
);
t2 = uicontrol(v_gaussiana, prop_texto, ...
 'String','c', 'Position',[0.80 0.26 0.04 0.03] ...
);
% Texto Número de Onda:
t3 = uicontrol(v_gaussiana, prop_texto, ...
 'String','0', 'Position',[0.84 0.02 0.04 0.03] ...
);
t4 = uicontrol(v_gaussiana, prop_texto, ...
 'String','k''', 'Position',[0.84 0.26 0.04 0.03] ...
);
% texto Amplitud:
t5 = uicontrol(v_gaussiana, prop_texto, ...
 'String','0', 'Position',[0.88 0.02 0.04 0.03] ...
);
t6 = uicontrol(v_gaussiana, prop_texto, ...
 'String','A', 'Position',[0.88 0.26 0.04 0.03] ...
);
% texto Desviación
t7 = uicontrol(v_gaussiana, prop_texto, ...
 'String','0', 'Position',[0.92 0.02 0.04 0.03] ...
);
t8 = uicontrol(v_gaussiana, prop_texto, 'FontName','symbol', ...
 'String','s', 'Position',[0.92 0.26 0.04 0.03] ...
);
pb = uicontrol(v_gaussiana, 'Style','pushbutton', 'String','Parar', ...
 'Units','normalized', 'Position',[0.84 0.30 0.08 0.05], ...
 'Callback',@Parar ...
);
lb = uicontrol(v_gaussiana, 'Style','pushbutton', 'String','Limpiar', ...
 'Units','normalized', 'Position',[0.84 0.37 0.08 0.05], ...
 'Callback',['datos = guidata(gcbf); ' ...
  'L = get(datos.ejes(1),''children''); temp = get(L,''Color'');' ... 
  'for n = 1:length(L), if temp{n} == [1 1 1], continue, end, delete(L(n)), end'] ...
);
t_e = uicontrol(v_gaussiana, 'Style','toggle', ...
 'String',['Quitar envolvente'], 'Units','normalized', ...
 'Position',[0.805 0.72 0.18 0.05], 'Callback',@Toggle_envolvente ...
);
set(v_gaussiana, 'Visible', 'on')

datos.handle_v = [datos.handle_v v_gaussiana]; 
guidata(gcbf,datos)
clear datos

datos.handle_vp = gcbf;
datos.texto = [t1 t2 t3 t4 t5 t6 t7 t8];
datos.ejes = [ejes_1 ejes_2];
datos.slider = [s1 s2 s3 s4];
datos.toggle = t_e;
datos.boton = pb;
datos.c = get(s1,'Value');
datos.k = get(s2,'Value');
datos.a = get(s3,'Value');
datos.s = get(s4,'Value');
guidata(v_gaussiana,datos)
Toggle_envolvente(t_e,[])
Slider_gaussiano(v_gaussiana,[])
%FIN function Paquete_gaussiano ##############################################################

function Slider_gaussiano(handle_o,eventdata)

datos = guidata(handle_o);
datos.parar = false;
switch handle_o
 case datos.slider(1), datos.c = get(handle_o,'Value');
  if datos.c ~= 0
   set(datos.texto(1),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
   set(datos.texto(2),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  end
 case datos.slider(2), datos.k = get(handle_o,'Value');
  set(datos.texto(3),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(4),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  if datos.k == 0, datos.k = eps; end
  L = get(datos.ejes(1),'Children');
  temp = get(L,'Color');
  for n = 1:length(L)
   if temp{n} == [1 1 1], continue, end
   set(L(n),'Color','r')
  end
 case datos.slider(3), datos.a = get(handle_o,'Value');
  set(datos.texto(5),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(6),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
 case datos.slider(4), datos.s = get(handle_o,'Value');
  set(datos.texto(7),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(8),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  L = get(datos.ejes(1),'Children');
  temp = get(L,'Color'); 
  for n = 1:length(L)
   if temp{n} == [1 1 1], continue, end
   set(L(n),'Color','r')
  end
end
guidata(handle_o,datos);
if datos.c ~= 0
 set(datos.boton,'Enable','on'), set(datos.toggle,'Enable','on')
end
fc = 'cos(datos.k*(datos.c*t - x))';
fe = 'datos.a*exp(-(datos.s*(datos.c*t - x)).^2/2)';
fg = 'exp(-((K-datos.k)/(datos.s)).^2/2)/(2*pi)^0.5/(datos.s)';
K = linspace(-25,25,200);
if datos.s == 0
 plot([min(K) max(K)],[0 0], 'Parent',datos.ejes(1))
 plot(datos.k*[1 1],[0 1], 'Parent',datos.ejes(1))
else
 plot(K,eval(fg)*(2*pi)^0.5*datos.s, 'Parent',datos.ejes(1));
end
x = linspace(0,2*pi,200);
t = 0;
pf = plot(x,zeros(size(x)),'w', x,eval(fe),'r', x,-eval(fe),'r', ...
 x,eval(fc).*eval(fe),'g', 'Parent',datos.ejes(2) ...
);
datos.envolvente = pf(2:3);
guidata(handle_o,datos)
if get(datos.toggle,'Value')
 set(pf(2),'Visible','off'), set(pf(3),'Visible','off')
end
while datos.c ~= 0
 drawnow
 if ~ishandle(handle_o), return, end
 datos = guidata(handle_o);
 if datos.parar, break, end
 if eval(fe)<0.000000000000001, break, end
 t = t + 1;
 set(pf(2), 'YData', eval(fe))
 set(pf(3), 'YData',-eval(fe))
 set(pf(4), 'YData', eval(fc).*eval(fe))
end
Parar(handle_o,[])
%FIN function Slider1_gaussiano ##############################################################

function Ondas_de_De_Bloglie(handle_o,eventdata)
% Paquete de ondas de una partícula cuántica libre.

% Callback de: Ondas de de Broglie... 
% de la barra de herramientas de la ventana principal.

% Una sola ventana:
persistent v_debroglie
if ishandle(v_debroglie)
 set(v_debroglie, 'Visible','on')
 return
end
datos = guidata(gcbf);

% Ventana de "Ondas de de Broglie..." 
v_debroglie = figure(datos.propiedad_v, ...
 'Name'           ,'Ondas de de Broglie', ...
 'Position'       ,[datos.pantalla/2-[800 600]/3+1*[40 -22] [800 600]*2/3], ...
 'Color'          ,'k', ...
 'Visible'        ,'off', ...
 'CloseRequestFcn',@Cerrar ...
);
axes('Parent',v_debroglie, 'Color','none', ...
 'Units','normalized', 'Position',[0.05 0.05 0.70 0.20] ...
);
text(0.5,0.5,['\Psi(x,t) = \int_{-\infty}^\infty f(p)e^{-i2\pi (p^2 t/2m-px)/h} dp,     ' ...
 'f(p) = \{2\pie^{[(p-p'')/\sigma]^2}\}^{-' char(188) '}/\sigma^' char(189) ','], ... 
 'Color','w', 'HorizontalAlignment','center', 'VerticalAlignment','middle' ...
)
text(0.5,0.1,'h es la constante de Planck', ... 
 'Color','w', 'HorizontalAlignment','center', 'VerticalAlignment','middle' ...
)
hbar = 1;
ejes_1 = axes('Parent',v_debroglie, 'Color','none', 'XLim',[0 50], ...
 'YLim',[0 1]*(2/hbar^2/pi)^(1/2), 'NextPlot','replacechildren', ...
 'Units','normalized', 'Position',[0.05 0.30 0.70 0.20] ...
);
ejes_2 = axes('Parent',v_debroglie, 'Color','none', 'XLim',[0 50], ...
 'YLim',[-1 1]*(2/hbar^2/pi)^(1/4), 'NextPlot','replacechildren', ... 
 'XTickLabel',[], 'Units','normalized', 'Position',[0.05 0.55 0.7 0.40] ...
);
s1 = uicontrol(v_debroglie, 'Style','slider',...
 'ToolTipString','Momentum', 'Units','normalized', ...
 'Position',[0.80 0.05 0.04 0.20], 'Min',0, 'Max',5, ...
 'SliderStep',[0.05 0.1], 'Value',2.5, 'Callback',@Slider_debroglie ...
);
s2 = uicontrol(v_debroglie, 'Style','slider',...
 'ToolTipString','Masa', 'Units','normalized', ...
 'Position',[0.84 0.05 0.04 0.20], 'Min',0, 'Max',10, ...
 'SliderStep',[0.05 0.1], 'Value',5, 'Callback',@Slider_debroglie ...
);
s3 = uicontrol(v_debroglie, 'Style','slider', ...
 'ToolTipString','Posición', 'Units','normalized', ...
 'Position',[0.88 0.05 0.04 0.20], 'Min',0, 'Max',50, ...
 'SliderStep',[0.05 0.1], 'Value',25, 'Callback',@Slider_debroglie ...
);
s4 = uicontrol(v_debroglie, 'Style','slider', ...
 'ToolTipString','Desviación', 'Units','normalized', ...
 'Position',[0.92 0.05 0.04 0.20], 'Min',0, 'Max',1, ... 
 'SliderStep',[0.05 0.1], 'Value',0.5, 'Callback',@Slider_debroglie ...
);
prop_texto = struct( 'Style','text', ...
 'BackgroundColor',get(v_debroglie,'Color'), ...
 'ForegroundColor','w', 'Units','normalized' ...
);
% Texto Momento:
t1 = uicontrol(v_debroglie, prop_texto, ...
 'String','0', 'Position',[0.80 0.02 0.04 0.03] ...
);
t2 = uicontrol(v_debroglie, prop_texto, ...
 'String','p''', 'Position',[0.80 0.26 0.04 0.03] ...
);
% Texto Masa:
t3 = uicontrol(v_debroglie, prop_texto, ...
 'String','0', 'Position',[0.84 0.02 0.04 0.03] ...
);
t4 = uicontrol(v_debroglie, prop_texto, ...
 'String','m', 'Position',[0.84 0.26 0.04 0.03] ...
);
% texto Posición:
t5 = uicontrol(v_debroglie, prop_texto, ...
 'String','0', 'Position',[0.88 0.02 0.04 0.03] ...
);
t6 = uicontrol(v_debroglie, prop_texto, ...
 'String','x''', 'Position',[0.88 0.26 0.04 0.03] ...
);
% texto Desviación
t7 = uicontrol(v_debroglie, prop_texto, ...
 'String','0', 'Position',[0.92 0.02 0.04 0.03] ...
);
t8 = uicontrol(v_debroglie, prop_texto, 'FontName','symbol', ...
 'String','s', 'Position',[0.92 0.26 0.04 0.03] ...
);
pb = uicontrol(v_debroglie, 'Style','pushbutton', 'String','Parar', ...
 'Units','normalized', 'Position',[0.84 0.30 0.08 0.05], ...
 'Callback',@Parar ...
);
t_e = uicontrol(v_debroglie, 'Style','toggle', ...
 'String',['Quitar envolvente'], 'Units','normalized', ...
 'Position',[0.805 0.72 0.18 0.05], 'Callback',@Toggle_envolvente ...
);
set(v_debroglie, 'Visible', 'on')

datos.handle_v = [datos.handle_v v_debroglie]; 
guidata(gcbf,datos)
clear datos

datos.handle_vp = gcbf;
datos.texto = [t1 t2 t3 t4 t5 t6 t7 t8];
datos.ejes = [ejes_1 ejes_2];
datos.slider = [s1 s2 s3 s4];
datos.toggle = t_e;
datos.boton = pb;
datos.p = get(s1,'Value');
datos.m = get(s2,'Value');
datos.x = get(s3,'Value');
datos.s = get(s4,'Value');
guidata(v_debroglie,datos)
Toggle_envolvente(t_e,[])
Slider_debroglie(v_debroglie,[])
%FIN function Ondas_de_de_Broglie ############################################################

function Slider_debroglie(handle_o,eventdata)

datos = guidata(handle_o);
datos.parar = false;
switch handle_o
 case datos.slider(1), datos.p = get(handle_o,'Value');
  if datos.p ~= 0
   set(datos.texto(1),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
   set(datos.texto(2),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  end
 case datos.slider(2), datos.m = get(handle_o,'Value');
  set(datos.texto(3),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(4),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  if datos.m == 0, datos.m = eps; end
 case datos.slider(3), datos.x = get(handle_o,'Value');
  set(datos.texto(5),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(6),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
 case datos.slider(4), datos.s = get(handle_o,'Value');
  set(datos.texto(7),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(8),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
end
guidata(handle_o,datos);
if datos.p~= 0
 set(datos.boton,'Enable','on'), set(datos.toggle,'Enable','on')
end
fc = ['cos((x-datos.x-datos.p*t/datos.m)/hbar.*(datos.p + 2*datos.s^4*t*' ...
  '(x-datos.x-datos.p*t/datos.m)/datos.m*hbar^2/(1+(2*datos.s^2*t/datos.m/hbar)^2)))'];
fe = ['(2*datos.s^2/pi/hbar^2/(1+(2*datos.s^2*t/datos.m/hbar)^2))^(1/4)*' ...
  'exp(-(datos.s*(x-datos.x-datos.p*t/datos.m)/hbar).^2/(1+(2*datos.s^2*t/datos.m/hbar)^2))'];
X = 'datos.x + datos.p*t/datos.m';
hbar = 1;
x = linspace(0,50,200);
t = 0;
pf1 = plot([0 50],[0 0],'w', [0 0],[0 1]*(2/hbar^2/pi)^(1/2),'w', ...
 x,eval(fe).^2,'b', eval(X),0,'.g', 'MarkerSize',13*exp(datos.m/8) , 'Parent',datos.ejes(1));
text(0,1.05*(2/hbar^2/pi)^(1/2),'|\Psi(x,t)|^2 :', 'Color','w', ...
 'FontSize',8, 'HorizontalAlignment','left', 'VerticalAlignment','bottom', ...
 'Parent',datos.ejes(1) ...
)
pf2 = plot(x,zeros(size(x)),'w', x,eval(fe),'r', x,-eval(fe),'r', ...
 x,eval(fc).*eval(fe),'g', 'Parent',datos.ejes(2) ...
);
datos.envolvente = pf2(2:3);
guidata(handle_o,datos)
if get(datos.toggle,'Value')
 set(pf2(2),'Visible','off'), set(pf2(3),'Visible','off')
end
while datos.p ~= 0
 drawnow
 if ~ishandle(handle_o), return, end
 datos = guidata(handle_o);
 if datos.parar, break, end
 if eval(fe)<0.000000000000001, break, end
 t = t + 1;
 set(pf1(3), 'YData', eval(fe).^2)
 set(pf1(4), 'XData', eval(X))
 set(pf2(2), 'YData', eval(fe))
 set(pf2(3), 'YData',-eval(fe))
 set(pf2(4), 'YData', eval(fc).*eval(fe))
end
Parar(handle_o,[])
%FIN function Slider_debroglie ############################################################### 

function Refraccion_de_luz(handle_o,eventdata)
% Refracción de luz a través de placas de vidrio.

% Callback de: Refraccion de luz... 
% de la barra de herramientas de la ventana principal.

% Una sola ventana:
persistent v_refraccion
if ishandle(v_refraccion)
 set(v_refraccion, 'Visible','on')
 return
end
datos = guidata(gcbf);

% Ventana de "Refracción de luz..." 
v_refraccion = figure(datos.propiedad_v, ...
 'Name'           ,'Refracción de luz', ...
 'Position'       ,[datos.pantalla/2-[800 600]/3+2*[40 -22] [800 600]*2/3], ...
 'Color'          ,'k', ...
 'Visible'        ,'on', ...
 'CloseRequestFcn',@Cerrar ...
);
axes('Parent',v_refraccion, 'Color','none', 'NextPlot','add',...
 'Units','normalized', 'Position',[0.05 0.33 0.70 0.20] ...
);
ejes_2 = axes('Parent',v_refraccion, 'Color','none', 'XLim',[-50 50], ...
 'YLim',[-1 1]*12/7, 'NextPlot','replacechildren', ...
 'Units','normalized', 'Position',[0.05 0.55 0.7 0.40] ...
);
ejes_1 = axes('Parent',v_refraccion, 'Color','none', 'XLim',[-25 25], ...
 'YLim',[0 1], 'NextPlot','add', 'Visible','off', ...
 'Units','normalized', 'Position',[0.05 0.05 0.70 0.20] ...
);
s1 = uicontrol(v_refraccion, 'Style','slider',...
 'ToolTipString','Velocidad', 'Units','normalized', ...
 'Position',[0.80 0.05 0.04 0.20], 'Min',0, 'Max',1, ...
 'SliderStep',[0.05 0.1], 'Value',0.5, 'Callback',@Slider_refraccion ...
);
s2 = uicontrol(v_refraccion, 'Style','slider',...
 'ToolTipString','Número de onda', 'Units','normalized', ...
 'Position',[0.84 0.05 0.04 0.20], 'Min',0, 'Max',1, ...
 'SliderStep',[0.05 0.1], 'Value',0.5, 'Callback',@Slider_refraccion ...
);
s3 = uicontrol(v_refraccion, 'Style','slider', ...
 'ToolTipString','Índice de Refracción', 'Units','normalized', ...
 'Position',[0.88 0.05 0.04 0.20], 'Min',1, 'Max',5, ...
 'SliderStep',[0.05 0.1], 'Value',3, 'Callback',@Slider_refraccion ...
);
s4 = uicontrol(v_refraccion, 'Style','slider', ...
 'ToolTipString','Desviación', 'Units','normalized', ...
 'Position',[0.92 0.05 0.04 0.20], 'Min',0, 'Max',0.6, ...
 'SliderStep',[0.05 0.1], 'Value',0.3, 'Callback',@Slider_refraccion ...
);
prop_texto = struct( 'Style','text', ...
 'BackgroundColor',get(v_refraccion,'Color'), ...
 'ForegroundColor','w', 'Units','normalized' ...
);
% Texto Velocidad:
t1 = uicontrol(v_refraccion, prop_texto, ...
 'String','0', 'Position',[0.80 0.02 0.04 0.03] ...
);
t2 = uicontrol(v_refraccion, prop_texto, ...
 'String','c', 'Position',[0.80 0.26 0.04 0.03] ...
);
% Texto Número de Onda:
t3 = uicontrol(v_refraccion, prop_texto, ...
 'String','0', 'Position',[0.84 0.02 0.04 0.03] ...
);
t4 = uicontrol(v_refraccion, prop_texto, ...
 'String','k''', 'Position',[0.84 0.26 0.04 0.03] ...
);
% texto Índice:
t5 = uicontrol(v_refraccion, prop_texto, ...
 'String','1', 'Position',[0.88 0.02 0.04 0.03] ...
);
t6 = uicontrol(v_refraccion, prop_texto, ...
 'String','n', 'Position',[0.88 0.26 0.04 0.03] ...
);
% texto Desviación
t7 = uicontrol(v_refraccion, prop_texto, ...
 'String','0', 'Position',[0.92 0.02 0.04 0.03] ...
);
t8 = uicontrol(v_refraccion, prop_texto, 'FontName','symbol', ...
 'String','s', 'Position',[0.92 0.26 0.04 0.03] ...
);
pb = uicontrol(v_refraccion, 'Style','pushbutton', 'String','Parar', ...
 'Units','normalized', 'Position',[0.84 0.30 0.08 0.05], ...
 'Callback',@Parar ...
);
t_e = uicontrol(v_refraccion, 'Style','toggle', ...
 'String',['Quitar envolvente'], 'Units','normalized', ...
 'Position',[0.805 0.72 0.18 0.05], 'Callback',@Toggle_envolvente ...
);
uicontrol(v_refraccion, prop_texto, 'String','1        n', ... 
'Position',[0.05 0.50 0.70 0.045] ...
)
uicontrol(v_refraccion, prop_texto, 'String','             Índice de refracción:', ... 
'HorizontalAlignment','Left', 'Position',[0.05 0.50 0.30 0.045] ...
)
set(v_refraccion, 'Visible', 'on')

datos.handle_v = [datos.handle_v v_refraccion]; 
guidata(gcbf,datos)
clear datos

datos.handle_vp = gcbf;
datos.texto = [t1 t2 t3 t4 t5 t6 t7 t8];
datos.ejes = [ejes_1 ejes_2];
datos.slider = [s1 s2 s3 s4];
datos.toggle = t_e;
datos.boton = pb;
datos.c = get(s1,'Value');
datos.k = get(s2,'Value');
datos.n = get(s3,'Value');
datos.s = get(s4,'Value');
guidata(v_refraccion,datos)
Toggle_envolvente(t_e,[])
Slider_refraccion(v_refraccion,[])
%FIN function Refraccion_de_luz ##############################################################

function Slider_refraccion(handle_o,eventdata)

datos = guidata(handle_o);
datos.parar = false;
switch handle_o
 case datos.slider(1), datos.c = get(handle_o,'Value');
  if datos.c ~= 0
   set(datos.texto(1),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
   set(datos.texto(2),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  end
 case datos.slider(2), datos.k = get(handle_o,'Value');
  set(datos.texto(3),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(4),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  if datos.k == 0, datos.k = eps; end
  L = get(datos.ejes(1),'Children');
  temp = get(L,'Color');
  for n = 1:length(L)
   if temp{n} == [1 1 1], continue, end
   set(L(n),'Color','r')
  end
 case datos.slider(3), datos.n = get(handle_o,'Value');
  set(datos.texto(5),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(6),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
 case datos.slider(4), datos.s = get(handle_o,'Value');
  set(datos.texto(7),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  set(datos.texto(8),'ForegroundColor',get(0,'DefaultUicontrolBackgroundColor'))
  L = get(datos.ejes(1),'Children');
  temp = get(L,'Color'); 
  for n = 1:length(L)
   if temp{n} == [1 1 1], continue, end
   set(L(n),'Color','r')
  end
end
guidata(handle_o,datos);
if datos.c ~= 0
 set(datos.boton,'Enable','on'), set(datos.toggle,'Enable','on')
 t = -50/datos.c;
else
 t = -50;
end
fc = 'cos(datos.c*abs(datos.k)*t - n*datos.k*x)';
fe = 'a*exp(-(datos.s*n*(datos.c/n*t - x)).^2/2)';
x = linspace(-50,50,200);
% Paquete incidente:
n = 1; a = 1;
fe1 = eval(fe).*(x<0);
fcs = eval(fc).*fe1;
% Paquete reflejado (n=-1 Para simular que k=-k):
n = -1; a = (1-datos.n)/(1+datos.n);
fe2 = eval(fe).*(x<0);
fcs = fcs + eval(fc).*fe2;
fe1 = fe1 - fe2;
% Paquete transmitido:
n = datos.n; a = 2/(1+datos.n);
fe3 = eval(fe).*(x>0);
fcs = fcs + eval(fc).*fe3;
fe3 = fe1 + fe3;
pf = plot([0 0],[-1 1]*12/7,'w', x,zeros(size(x)),'w', x,fe3,'r', x,-fe3,'r', ...
 x,fcs,'g', 'Parent',datos.ejes(2) ...
);
datos.envolvente = pf(3:4);
guidata(handle_o,datos)
if get(datos.toggle,'Value')
 set(pf(3),'Visible','off'), set(pf(4),'Visible','off')
end
while datos.c ~= 0
 drawnow
 if ~ishandle(handle_o), return, end
 datos = guidata(handle_o);
 if datos.parar, break, end
 if fe3 < 0.000000000000001, break, end
 t = t + 1;
 % Paquete incidente:
 n = 1; a = 1;
 fe1 = eval(fe).*(x<0);
 fcs = eval(fc).*fe1;
 % Paquete reflejado (n=-1 Para simular que k=-k):
 n = -1; a = (1-datos.n)/(1+datos.n);
 fe2 = eval(fe).*(x<0);
 fcs = fcs + eval(fc).*fe2;
 fe1 = fe1 - fe2;
 % Paquete transmitido:
 n = datos.n; a = 2/(1+datos.n);
 fe3 = eval(fe).*(x>0);
 fcs = fcs + eval(fc).*fe3;
 fe3 = fe1 + fe3; set(pf(3), 'YData', fe3)
 set(pf(4), 'YData',-fe3)
 set(pf(5), 'YData', fcs)
end
Parar(handle_o,[])
%FIN function Slider_refraccion ##############################################################

function Toggle_envolvente(handle_o,eventdata)

datos = guidata(gcbf);
if ~isfield(datos,'envolvente'), return, end
boton = get(gcbo,'Value');
if boton == get(gcbo,'Max') % Botón presionado
 set(datos.envolvente(1),'Visible','off')
 set(datos.envolvente(2),'Visible','off')
 set(gcbo,'String','Ver envolvente')
else
 set(datos.envolvente(1),'Visible','on')
 set(datos.envolvente(2),'Visible','on')
 set(gcbo,'String','Quitar envolvente')
end
%FIN function Toggle_envolvente ##############################################################

function Acerca_de_PO(handle_o,eventdata)
% Ventana sobre la versión del programa.

% Callback de: Acerca de Paquete de Ondas... 
% de la barra de herramientas de la ventana principal.

% Una sola ventana:
persistent v_acerca
if ishandle(v_acerca)
 set(v_acerca, 'Visible','on')
 return
end
% Llamar "A.D." de la ventana principal:
datos = guidata(gcbf);

% Ventana de "Acerca de Paquete de Ondas"... 
v_acerca = figure(datos.propiedad_v, ...
 'Name'           ,'Acerca de P. de O.', ...
 'Position'       ,[(datos.pantalla-[800 600]/4)/2 [800 600]/4], ...
 'Visible'        ,'off', ...
 'CloseRequestFcn',@Cerrar, ...
 'Colormap'       ,[] ...
);
% Texto
uicontrol(v_acerca, 'Style','text', ...
 'String',['Paquete de Ondas, Versión 1.0,'; ...
           'creado en MATLAB® por VAAC.   '; ...
           'E-mail:                       '; ...
           'nubeobscura@hotmail.com       '; ...
           '                              '; ...
           'UdeG, 2003.                   '], ...
 'HorizontalAlignment','left', ...
 'Units','characters', 'Position',[4 4 33 6] ...
)
% Botón: Aceptar
uicontrol(v_acerca, 'Style','pushbutton', ...
 'String','Aceptar', 'Units','characters', ...
 'Position',[26 1 11 2], 'Callback',@Cerrar ...
)
set(v_acerca, 'Visible', 'on')

% Guardar "A.D." de la ventana principal con el "handle" de la
% ventana Acerca de..., para usarlo en Cerrar_Todo:
datos.handle_v = [datos.handle_v v_acerca]; 
guidata(gcbf,datos)
clear datos
% El gcbf = datos.handle_v(1) porque se esta ejecutando el callback
% de la barra Acerca de..., la cual esta EN la ventana principal,
% cuyo "handle" esta guardado en datos.handle_v(1). 

% Guardar "A.D." de la ventana Acerca de:
datos.handle_vp = gcbf; guidata(v_acerca,datos)
% FIN: function Acerca_de_PO #################################################################

function Parar(handle_o,eventdata)

datos = guidata(handle_o); 
datos.parar = true;
set(datos.texto,'ForegroundColor','w')
set(datos.boton,'Enable','off')
set(datos.toggle,'Enable','off')
guidata(handle_o,datos)
% FIN: function Parar ########################################################################

function Cerrar(handle_o,eventdata)
% Callback de las ventanas al cerrarla.

if ~ishandle(handle_o)
 return
end
datos = guidata(handle_o);
v_principal = datos.handle_vp;
datos = guidata(v_principal);
datos.handle_v(gcbf == datos.handle_v) = [];
guidata(v_principal,datos)
delete(gcbf)
% FIN: function Cerrar #######################################################################

function Cerrar_Todo(handle_o,eventdata) 
% Mensaje de advertencia al cerrar la ventana principal. Cierra
% todas las ventanas abiertas.

% Callback de: Salir... de la barra de herramientas de la ventana
% principal. También es el CloseReqFunc de esta ventana.

% Llamar los "handles" de todas las ventanas abiertas guardados en
% "A.D." de la ventana principal:
datos = guidata(gcbf);

warning off MATLAB:QUESTDLG:stringMismatch
switch questdlg('¿Desea salir del programa?', ...
 'Cerrar Paquete de Ondas', 'Sí', 'No', 'Sí');
case 'Sí'  
 if ~isempty(datos.handle_v)
  delete(datos.handle_v)
 end
 delete(gcbf)
end
% FIN: function Cerrar_Todo ##################################################################
% FIN ########################################################################################
