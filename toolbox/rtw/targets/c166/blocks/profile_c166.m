function profData = profile_c166(connection)
% PROFILE_C166 collects and displays execution profiling data for C166
%    PROFILE_C166(CONNECTION) collects and displays execution profiling data
%    from a C166 target microcontroller that is running a suitably configured
%    application generated by Embedded Target for Infineon C166
%    Microcontrollers.
%
%    The CONNECTION may be set to 'CAN' in order to collect data via a CAN
%    connection between the target and the host computer, or 'SERIAL' to
%    collect the data via a serial connection.
%
%    To use the CAN connection, you must have suitable CAN hardware
%    installed. This function will test for availability of CanCardX 1 or
%    CanAc2Pci1 and defaults to a bit rate of 500k bits per second.
%
%    To use the serial connection, the C166 board must be connected via a
%    serial cable to one of the host computer's serial ports.  This
%    function defaults to port ASC0 on the C166 and port COM1 on the host
%    computer, at a bit rate of 57600 baud.
%
%    If you need to use a configuration different to these defaults, you
%    should make a copy of this file and change the configuration data as
%    required. The data collected is unpacked then displayed in a summary
%    HTML report and as MATLAB graphic.
%
%    PROFDATA = PROFILE_C166(CONNECTION) returns the execution profiling data
%    in the format documented by EXPROFILE_UNPACK.
%
%    To configure a model for use with execution profiling, you must must
%    perform the following steps: 1) check the appropriate option in the Target
%    Specific Options tab of the Real-Time Workshop Options dialog, 2) make sure
%    the model includes a C166 Execution Profiling block that provides an
%    interface between the target-side profiling engine, and the host-side
%    computer from which this command is run.
%
%    See also C166_MULTITASKING, EXPROFILE_UNPACK, EXPROFILE_GETDATA_CAN,
%    EXPROFILE_GETDATA_SERIAL, EXPROFILE_PLOT, EXPROFILE_REPORT

%   Copyright 2003 The MathWorks, Inc.
%   $Revision: 1.1.6.3 $  $Date: 2003/08/29 04:52:53 $

% Upload the execution profile data

if nargin == 0
    usage_error;
    return;
end

switch lower(connection)
    case 'can'
        can_bit_rate = 500000;
        first_data_timeout = 20;
        channel = exprofile_detect_can_channel;
        rawdata = exprofile_getdata_can(channel,can_bit_rate,first_data_timeout);
        
    case 'serial'
        serial_bit_rate = 57600;
        first_data_timeout = 20;
        port = 'COM1';
        rawdata = exprofile_getdata_serial(port,serial_bit_rate,first_data_timeout);
        
    otherwise
        usage_error;
        return;
end

if ~isempty(rawdata) % No data if time out occurred
    
    % Set up C166-specific information that is required for analysis of the
    % uploaded data.
    profileInfo.tasks.names = {...
        'CAN 1 ISR'...
        'CAN 2 ISR'...
    };
    profileInfo.tasks.ids = [ ...
        hex2dec('7FF0')...
        hex2dec('7FF1')...
    ];
    profileInfo.timer.timePerTickUnits = 1e-9;
    profileInfo.processor.wordsize = 2;
    profileInfo.processor.lsbFirst = 1;
    
    % Unpack the raw data
    profData = exprofile_unpack(rawdata, profileInfo);
    
    % Display the data as a MATLAB graphic
    exprofile_plot(profData);
    
    % Display an HTML report
    exprofile_report(profData);
    
end


function usage_error
disp(sprintf([ mfilename ' requires you to specify a connection to the\n'...
    'target C166 board.  Available connections are:\n' ...
    '  ' mfilename '(''can'')\n' ...
    '  ' mfilename '(''serial'')\n']));
