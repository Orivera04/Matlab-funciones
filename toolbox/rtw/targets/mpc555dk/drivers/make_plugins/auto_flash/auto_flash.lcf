/* File : auto_flash.lcf
 *
 * Abstract: 
 * 		Code Warrior Linker Command File for the
 * 		Auto Flash Application
 *
 * Copyright 2002 The MathWorks, Inc.
 *
 * $Revision: 1.1.4.1 $
 * $Date: 2004/04/19 01:24:12 $
 */

MEMORY {
    rom: org = 0,len = 0x6FFFF /* Internal Flash */
    ram:   org = 0x3f9800, len = 0x67FF   /* Internal SRAM for bootcode */
}

SECTIONS {

	GROUP  : {
		.init  		: { }
      .usr_init   : { }
		.fini  		: { }
      .text : { }
      .rodata (CONST) : {
			*(.rdata)
			*(.rodata)
		}
		.ctors : {}
		.dtors : {}
		.BINARY : {}
		extab : {}
		extabindex : {}
		.data : {}
		.sdata : {}
		.sbss : {}
		.sdata2 : {}
		.sbss2 : {}
		.bss : { }
	} > ram

	GROUP : {
		.PPC.EMB.sdata0 : {}
		.PPC.EMB.sbss0 : {}
		_stack_end = .;
	} > ram

}

_stack_addr = 0x3ffff8;

/* Note we do not specify any heap address as there is no
heap requirement. If a heap is required then we must
define some heap space. */

/* Release 2 of the linker generated slightly different names. 	*/
/* The following are aliases to the new names and are only 		*/
/* necessary if you are using Release 2 startup code with the	*/
/* current linker.												*/

_finit = _f_init;
_finit_rom = _f_init_rom;
_init_size = SIZEOF(.init);

_ftext = _f_text;
_ftext_rom = _f_text_rom;
_text_size = SIZEOF(.text);

_frdata = _f_rodata;
_frdata_rom = _f_rodata_rom;
_rdata_size = SIZEOF(.rodata);

_extab_size = SIZEOF(extab);

_feti = _fextabindex;
_feti_rom = _fextabindex_rom;
_eti_size = SIZEOF(extabindex);

_fdata = _f_data;
_fdata_rom = _f_data_rom;
_data_size = SIZEOF(.data);

_fsdata = _f_sdata;
_fsdata_rom = _f_sdata_rom;
_sdata_size = SIZEOF(.sdata);

_fsbss = _f_sbss;
_sbss_size = SIZEOF(.sbss);

_fsdata2 = _f_sdata2;
_fsdata2_rom = _f_sdata2_rom;
_sdata2_size = SIZEOF(.sdata2);

_fsbss2 = _f_sbss2;
_sbss2_size = SIZEOF(.sbss2);

_fbss = _f_bss;
_bss_size = SIZEOF(.bss);

_fsdata0 = _f_PPC_EMB_sdata0;
_fsdata0_rom = _f_PPC_EMB_sdata0_rom;
_sdata0_size = SIZEOF(.PPC.EMB.sdata0);

_fsbss0 = _f_PPC_EMB_sbss0;
_sbss0_size = SIZEOF(.PPC.EMB.sbss0);

_stack_size = _stack_addr - _stack_end;
_heap_size = _heap_end - _heap_addr;
