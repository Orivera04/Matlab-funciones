function [mout,ok]=gui_globalmodsetup(m,action,varargin)
%GUI_GLOBALMODSETUP GUI for altering unispline settings
%
%  [M,OK] = GUI_GLOBALMODSETUP(M) creates a blocking GUI for choosing the
%  unispline options and altering its settings.  OK indicates whether the
%  user pressed 'OK' or 'Cancel'.
%  LYT=GUI_GLOBALMODSETUP(M,'layout',FIG,P) creates a layout object in the
%  figure FIG which updates the dynamic copy of a model in the pointer P.
%  Alternatively, if FIG is a handle to a pre-created LYT (using this
%  function) then that layout will be updated with information from the new
%  pointer P.

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.

%  $Revision: 1.9.2.4 $  $Date: 2004/04/04 03:30:51 $

if nargin<2
    action = 'figure';
end

switch lower(action)
    case 'figure'
        [mout,ok] = i_createfig(m);
    case 'layout'
        ok = 1;
        lyt = i_createlyt(varargin{:});
        mout = lyt;
    case 'getclasslevel'
        mout = mfilename('class');
    case 'finalise'
        % No finalise actions are required for this GUI
        mout = m;
end


function [mout,ok] = i_createfig(m)
scr = get(0,'screensize');
fH = xregdialog('name','Free Knot Model Settings',...
    'position',[scr(3)*.5-125 scr(4)*.5-60 350 300],...
    'resize','off');

p = xregGui.RunTimePointer(m);
p.LinkToObject(fH);
lyt = i_createlyt(fH, p);

% Add ok, cancel
okbtn = uicontrol('style','pushbutton',...
    'parent',fH,...
    'string','OK',...
    'callback','set(gcbf,''visible'', ''off'', ''tag'',''ok'');');
cancbtn = uicontrol('style','pushbutton',...
    'parent',fH,...
    'string','Cancel',...
    'callback','set(gcbf,''visible'', ''off'', ''tag'',''cancel'');');

lyt = xreggridbaglayout(fH, ...
    'packstatus', 'off', ...
    'dimension', [2 3], ...
    'rowsizes', [-1 25], ...
    'colsizes', [-1 65 65], ...
    'gapx', 7, ...
    'gapy', 7, ...
    'border', [7 7 7 10], ...
    'mergeblock', {[1 1], [1 3]}, ...
    'elements', {lyt, [], [], okbtn, [], cancbtn});

fH.LayoutManager = lyt;
set(lyt, 'packstatus', 'on', 'visible', 'on');
fH.showDialog(okbtn);

tg = get(fH,'tag');
if strcmp(tg, 'ok')
    mout = p.info;
    ok = 1;
else
    mout = m;
    ok = 0;
end
delete(fH);




function lyt = i_createlyt(fH, p)

if ~isa(fH,'xregcontainer')
    pUD = xregGui.RunTimePointer;
    pUD.LinkToObject(fH);
    ud.figure = fH;
    % p is a pointer to the current model
    ud.pointer = p;
    m = p.info;

    Opts = get(m,'FitOptions');
    Param = Opts.Param;
    Init_Pop = Param.Init_Pop;
    %Jupp= Opts.Param.Jupp;
    switch Opts.Algorithm;
        case 'LSQnonlin'
            Percent_Opt = Param.Percent_Opt;
            Max_Iter = Param.Max_Iter;
            Max_Func = Param.Max_Func;
            Popup_Val = 1;
            Bit_Len = 16;
            Max_Gen = 50;
        case 'GA'
            Bit_Len = Param.Bit_Len;
            Max_Gen = Param.Max_Gen;
            Popup_Val = 2;
            Percent_Opt = 3;
            Max_Iter = 150;
            Max_Func = 150;
        case 'FminCon'
            Percent_Opt = Param.Percent_Opt;
            Max_Iter = Param.Max_Iter;
            Max_Func = Param.Max_Func;
            Popup_Val = 3;
            Bit_Len = 16;
            Max_Gen = 50;
    end

    SC = xregGui.SystemColorsDbl;
    
    % ========== The spline setup ===========
    ud.order = xregGui.clickedit('parent', fH,...
        'min',1,...
        'max',3,...
        'rule','int',...
        'value', get(m,'order'),...
        'horizontalalignment','right',...
        'dragging','off',...
        'clickincrement',1,...
        'visible','off', ...
        'callback',{@i_order,pUD});
    orderLbl = xregGui.labelcontrol('parent', fH, ...
        'visible', 'off', ...
        'string', 'Spline order:', ...
        'ControlSize', 60, ...
        'Gap', 5, ...
        'Control', ud.order);

    ud.knots=xregGui.clickedit(fH,...
        'min',1,...
        'max',10,...
        'rule','int',...
        'value',length(get(m,'knots')),...
        'horizontalalignment','right',...
        'dragging','off',...
        'visible','off',...
        'clickincrement',1, ...
        'callback',{@i_knots,pUD});
    knotsLbl = xregGui.labelcontrol('parent', fH, ...
        'visible', 'off', ...
        'string', 'Number of knots:', ...
        'ControlSize', 60, ...
        'Gap', 5, ...
        'Control', ud.knots);

    splineOptGrid = xreggridbaglayout(fH,...
        'packstatus', 'off', ...
        'dimension',[1,2],...
        'gap', 30, ...
        'colsizes', [130 150], ...
        'rowsizes', 20, ...
        'elements',{orderLbl, knotsLbl});
    splineFrame = xregframetitlelayout(fH,...
        'visible','off',...
        'title','Spline options', ...
        'innerborder', [15 10 10 10], ...
        'center', splineOptGrid);

    % ========== The optimisation options ==========

    % The Popup menu with the choice of algorithm
    Opt_alg = {'Penalized least squares',...
        'Genetic algorithm',...
        'Constrained least squares'};
    ud.Popup = uicontrol('parent',fH,...
        'style','popup',...
        'visible','off',...
        'BackGroundColor',SC.WINDOW_BG,...
        'string',Opt_alg,...
        'Value',Popup_Val,...
        'HorizontalAlignment','left', ...
        'Callback',{@i_changeoptspage, pUD});
    algLbl = xregGui.labelcontrol('parent', fH, ...
        'visible', 'off', ...
        'string', 'Algorithm:', ...
        'ControlSize', 170, ...
        'LabelSizeMode', 'absolute', ...
        'LabelSize', 55, ...
        'Gap', 5, ...
        'Control', ud.Popup);

    
    % Draw the options panel for LSQNONLIN and FMINUNC
    string= {'Initial population:',...
        'Percent used in optimization:',...
        'Maximum number of iterations:',...
        'Maximum function evaluations:'};
    values = [Init_Pop,...
        Percent_Opt,...
        Max_Iter,...
        Max_Func];
    inputdata = [1 1000 10; ...
        1 100 1; ...
        1 1e4 100; ...
        1 1e4 100];

    inputs = cell(1,4);
    for n = 1:length(string)
        ctrl = xregGui.clickedit('parent', fH,...
            'min',inputdata(n,1),...
            'max',inputdata(n,2),...
            'rule','int',...
            'value', values(n),...
            'dragging','off',...
            'clickincrement',inputdata(n,3),...
            'visible','off', ...
            'callback',{@i_changeoptions, pUD});
        inputs{n} = xregGui.labelcontrol('parent', fH, ...
            'visible', 'off', ...
            'string', string{n}, ...
            'ControlSize', 60, ...
            'Gap', 5, ...
            'Control', ctrl);
    end
    ud.LSQinputs = inputs;
    
    % Put all of these into a Grid layout
    LSQoptsGrd= xreggridbaglayout(fH,...
        'dimension',[length(inputs) 1],...
        'gapy',5,...
        'rowsizes',repmat(20,1, length(inputs)), ...
        'colsizes', 230, ...
        'elements',inputs);


    % Draw the options for the GA page
    string = {'Initial population:',...
        'Bit length:',...
        'Maximum number of generations:'};
    Init_PopGA = max(30,Init_Pop);
    values = [Init_PopGA,...
        Bit_Len,...
        Max_Gen];
    inputdata = [30 1000 10; ...
        1 1024 10; ...
        1 1000 10];

    inputs = cell(1,3);
    for n = 1:length(string)
        ctrl = xregGui.clickedit('parent', fH,...
            'min',inputdata(n,1),...
            'max',inputdata(n,2),...
            'rule','int',...
            'value', values(n),...
            'dragging','off',...
            'clickincrement',inputdata(n,3),...
            'visible','off', ...
            'callback',{@i_changeoptions, pUD});
        inputs{n} = xregGui.labelcontrol('parent', fH, ...
            'visible', 'off', ...
            'string', string{n}, ...
            'ControlSize', 60, ...
            'Gap', 5, ...
            'Control', ctrl);
    end
    ud.GAinputs = inputs;
    
    % Put all of these into a Grid layout
    GAoptsGrd = xreggridbaglayout(fH,...
        'dimension',[length(inputs) 1],...
        'gapy',5,...
        'rowsizes',repmat(20,1, length(inputs)), ...
        'colsizes', 230, ...
        'elements',inputs);

    % Draw the cards with the different options panels.
    ud.cardObj = xregcardlayout(fH, 'visible', 'off', ...
        'numcards',length(Opt_alg), ...
        'currentcard',Popup_Val);
    attach(ud.cardObj,LSQoptsGrd,1);
    attach(ud.cardObj,GAoptsGrd,2);
    attach(ud.cardObj,LSQoptsGrd,3);

    optGrid = xreggridbaglayout(fH,...
        'dimension',[2,1],...
        'gapy',10,...
        'rowsizes',[20,-1], ...
        'elements',{algLbl,ud.cardObj});
    optFr = xregframetitlelayout(fH,...
        'visible','off',...
        'Title','Optimization settings',...
        'innerborder', [15 10 10 10], ...
        'center',optGrid);

    lyt = xreggridbaglayout(fH,...
        'visible','off',...
        'dimension',[2,1],...
        'rowsizes',[55,-1], ...
        'gapy', 10, ...
        'elements',{splineFrame,optFr},...
        'userdata', pUD);
    pUD.info = ud;

else
    % update layout with current model settings
    lyt = fH;
    pUD = get(lyt, 'userdata');
    ud = pUD.info;
    i_setoptions(ud);
end


% -----------------------------------------
% function i_setoptions
% -----------------------------------------
function i_setoptions(ud)

m = ud.pointer.info;

Opts = get(m,'FitOptions');
Param = Opts.Param;
Init_Pop = Param.Init_Pop;
switch Opts.Algorithm;
    case 'LSQnonlin'
        Percent_Opt = Param.Percent_Opt;
        Max_Iter = Param.Max_Iter;
        Max_Func = Param.Max_Func;
        Popup_Val = 1;
        Bit_Len = 16;
        Max_Gen = 50;
    case 'GA'
        Bit_Len = Param.Bit_Len;
        Max_Gen = Param.Max_Gen;
        Popup_Val = 2;
        Percent_Opt = 3;
        Max_Iter = 150;
        Max_Func = 150;
    case 'FminCon'
        Percent_Opt = Param.Percent_Opt;
        Max_Iter = Param.Max_Iter;
        Max_Func = Param.Max_Func;
        Popup_Val = 3;
        Bit_Len = 16;
        Max_Gen = 50;
end

set(ud.order,'value',get(m,'order'));
set(ud.knots,'value',length(get(m,'knots')));
set(ud.Popup,'value',Popup_Val);
set(ud.cardObj,'currentcard',Popup_Val);
switch Popup_Val
    case {1,3}
        ud.LSQinputs{1}.Control.Value = Init_Pop;
        ud.LSQinputs{2}.Control.Value = Percent_Opt;
        ud.LSQinputs{3}.Control.Value = Max_Iter;
        ud.LSQinputs{4}.Control.Value = Max_Func;
    case 2
        ud.GAinputs{1}.Control.Value = Init_Pop;
        ud.GAinputs{2}.Control.Value = Bit_Len;
        ud.GAinputs{3}.Control.Value = Max_Gen;
end



function i_order(src,event,pUD)
ud = pUD.info;
m = ud.pointer.info;
ord = ud.order.value;
m = set(m,'order',ord);
ud.pointer.info = m;


function i_knots(src,event,pUD)
ud = pUD.info;
m = ud.pointer.info;
knots = ud.knots.value;
m = set(m,'max_knots',knots);
[Bnds,g,Tgt] = getcode(m);
k = linspace(Tgt(1),Tgt(2),knots+2);
m.mv3xspline = set(m.mv3xspline,'knots',k(2:end-1));
ud.pointer.info = m;


function i_changeoptspage(src,event,pUD)
ud = pUD.info;
val = get(ud.Popup,'value');
set(ud.cardObj,'currentcard',val);
i_changeoptions([],[],pUD);


function i_changeoptions(src,event,pUD)
ud = pUD.info;
m = ud.pointer.info;

Opts.Param.Max_Knots = length(get(m,'knots'));
switch get(ud.Popup,'value');
    case 1
        Opts.Param.Init_Pop = ud.LSQinputs{1}.Control.Value;
        Opts.Param.Percent_Opt = ud.LSQinputs{2}.Control.Value;
        Opts.Param.Max_Iter = ud.LSQinputs{3}.Control.Value;
        Opts.Param.Max_Func = ud.LSQinputs{4}.Control.Value;
        Opts.Algorithm = 'LSQnonlin';
    case 2
        Opts.Param.Init_Pop = ud.GAinputs{1}.Control.Value;
        Opts.Param.Bit_Len = ud.GAinputs{2}.Control.Value;
        Opts.Param.Max_Gen = ud.GAinputs{3}.Control.Value;
        Opts.Algorithm = 'GA';
    case 3
        Opts.Param.Init_Pop = ud.LSQinputs{1}.Control.Value;
        Opts.Param.Percent_Opt = ud.LSQinputs{2}.Control.Value;
        Opts.Param.Max_Iter = ud.LSQinputs{3}.Control.Value;
        Opts.Param.Max_Func = ud.LSQinputs{4}.Control.Value;
        Opts.Algorithm = 'FminCon';
end

m = set(m,'FitOptions',Opts);
ud.pointer.info = m;
