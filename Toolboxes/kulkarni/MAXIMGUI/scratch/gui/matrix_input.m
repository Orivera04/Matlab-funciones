function valid_input = matrix_input(rownum, std_state)

% INPUT PLATFORM FOR THE PARAMETERS OF THE STANDARD MATRIX INPUT
global MValue MHLabel_handle MVLabel_handle MValue_handle MHLabel MVLabel matrix_size


global Scale Primary_state Next_process Last_process Current_process

%This procedure is invoked only for Jackson Networks of Queueing Models.
% If this is not the correct procedure to be executing, return to caller
if strcmp(lower(Next_process), 'matrix_input') ~= 1
  return
else
   Current_process = 'matrix_input';
  Last_process = 'vector_input' ;
  Next_process = 'workbench' ;
end

% retrieve the labels of the currently seleted Primary and Standard model ;
model = Primary_state(rownum).model ;
primary_model = sprintf('Standard %s', model) ; 
model = Primary_state(rownum).std_model_array{std_state} ;
std_model = sprintf('%s Model', model) ;

% max size of a matrix on screen at one time = 10X10
num_disp = min(matrix_size, 10) ;



% Display the parent figure
minputfig = figure('Name', primary_model, ...
                  'NumberTitle','off', ...
                  'Units','normalized', ...
                  'Color',[0.76 0.76 0.76], ...
                  'Position',[.5-.04*10 .07 .08*10 .08*10], ...
                  'Menubar','none',...
                  'Tag','minputfig');

% add exit, return to main, previous screen, and title
exit = exit_menu(minputfig) ;
exit = return_to_main(minputfig) ;
exit = previous_screen(minputfig) ;
help_msg_id = [20 21 22 23 24 25 26 27 28
   30 31 32 33 34 35 36 37 38
   40 41 42 43 44 45 46 47 48
   50 51 52 53 54 55 56 57 58
   60 61 62 63 64 65 66 67 68
   70 71 72 73 74 75 76 77 78
   80 81 82 83 84 85 86 87 88];
exit = help_msg(minputfig,help_msg_id(rownum,std_state));

uicontrol('Parent',minputfig, ...
          'Units','normalized', ...
        	 'Position',[.1 .85 .8 .15], ...
          'Style','text', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Fontname','time roman', ...
          'Fontsize',Scale*20, ...
          'String', std_model) ;
  % initialize matrix handles with zeros such that matrix handles of differing
% dimensions can be stored in one matrix
% initialize all matrix values and labels 
MHLabel = [1:matrix_size];
MVLabel = [1:matrix_size];

  % Display parameter labels
uicontrol('Parent',minputfig, ...
            'Units','normalized', ...
            'BackgroundColor', [0.76 0.76 0.76], ...
            'HorizontalAlignment','left',...
       	   'FontSize',Scale*15, ...
            'Fontname','time roman', ...
            'Position',[.05 .82 .5 .1], ...
          	'String', Primary_state(rownum).matrix_label{std_state}(1), ...
	         'Style','text', ...
  	         'Tag','MDesc1');

           % retrieve  vertical position
     for k = 1:num_disp
     MVLabel_handle(k) = uicontrol('Parent',minputfig, ...
	                                'Units','normalized', ...
                                   'BackgroundColor',[0.76 0.76 0.76], ...
                                   'Position',[.05 .75-.06*k .08 .06], ...
                                   'HorizontalAlignment','center',...
                                   'Fontsize',Scale*12, ...
                                   'String', sprintf('%d', k), ...
	                                'Style','text', ...
                                   'Tag', sprintf('MatrixLabel%d', k), ...
                                   'UserData', [k])' ;
     MHLabel_handle(k) = uicontrol('Parent',minputfig, ...
	                                'Units','normalized', ...
                                   'BackgroundColor',[0.76 0.76 0.76], ...
                                   'Position',[.05 + .08*k .75 .08 .06], ...
                                   'HorizontalAlignment','center',...
                                   'Fontsize',Scale*12, ...
                                   'String', sprintf('%d', k), ...
	                                'Style','text', ...
                                   'Tag', sprintf('MatrixLabel%d', k), ...
                                   'UserData', [k])' ;


     for s=1:num_disp
    % Display labels for each matrix element
        % Display entry fields for parameters 
    MValue_handle(k,s) = uicontrol('Parent',minputfig, ...
	                                'Units','normalized', ...
                                   'BackgroundColor',[1 1 1], ...
                                   'Position',[.05+.08*s .75- .06*k .08 .06], ...
                                   'HorizontalAlignment','center',...
                                   'Fontsize',Scale*12, ...
                                   'String', Primary_state(rownum).matrix_matrix(k, s), ...
	                                'Style','edit', ...
                                   'Tag', sprintf('MatrixValue%d_%d', k, s), ...
                                   'UserData', [k s]) ;
    end %for s
end  % for k


% Sliders
  if matrix_size > num_disp

    if size1 - num_disp == 1
      eachstep = .99 ;
    else 
      eachstep = 1 / (matrix_size - num_disp); 
    end

    uicontrol('Parent',minputfig, ...
	           'Units','normalized', ...
	           'Position',[.13 .82 .08*num_disp .05], ...
	           'Style','slider', ...
              'SliderStep', [eachstep 1], ...
              'Value', 0, ...
              'Callback', [sprintf('update_matrix_values(%d);',num_disp), ...
                           sprintf('mhscroll(%d);',num_disp)], ...
              'Tag','MHSlider1') ;
                     
    uicontrol('Parent',minputfig, ...
	           'Units','normalized', ...
	           'Position',[.025 .15 .03 .06*num_disp], ...
	           'Style','slider', ...
              'SliderStep', [eachstep 1], ...
              'Value', 1, ...
              'Callback', [sprintf('update_matrix_values(%d);',num_disp), ...
                           sprintf('mvscroll(%d);',num_disp)], ...
              'Tag', 'MVSlider1') ;

                     
                     
  end  % if
% OK button
uicontrol('Parent',minputfig, ...
          'Units','normalized', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Callback', 'uiresume(gcbf)',...
          'FontName','time roman', ...
	       'Fontsize',Scale*18, ...
	       'Position',[.45 .05 .08 .06], ...
          'String','OK') ;

uiwait(minputfig)

% Execute the following code only if the figure still exists
if ishandle(minputfig)

  % Update all vectors once OK is selected
  update_matrix_values(num_disp) ;

  % Update the Primary_state structure with the new vectors
  Primary_state(rownum).matrix_matrix = MValue ;

  % validate input
  valid_input = validate_matrix_parameters(rownum, std_state,matrix_size) ;
  if (valid_input == 0) 
    Next_process = 'matrix_input' ;
  end
  close(minputfig)

% If Previous Screen, return valid_input such that we can exit the loop
else
  valid_input = 1 ;
end





