%% $RCSfile: c28xcanrcv.tlc,v $
%% $Revision: 1.1.6.2 $ $Date: 2004/04/08 20:59:42 $
%% Copyright 2003-2004 The MathWorks, Inc.



%implements c28xcanrcv "C"

%% Function: JustCreatedCompiledModelRecord ==================================
%function JustCreatedCompiledModelRecord(recordName) void

    %assign fullRecordName = "::CompiledModel." + recordName
    %%
    %if !EXISTS("%<fullRecordName>")
        %assign retval = 1  %% First call

        %% Create record since it does not yet exist:
        %assign %<recordName> = 1
        %assign ::CompiledModel = ::CompiledModel + %<recordName>
        %undef %<recordName>  %% Remove from current scope
    %else
        %assign retval = 0  %% Subsequent call

    %endif
    %return retval

%endfunction %% JustCreatedCompiledModelRecord


%% Function: BlockTypeSetup ==============================================
%function BlockTypeSetup(block, system) void

    %openfile buffer
    #include "DSP281x_Device.h"
    %closefile buffer
    %<LibCacheIncludes(buffer)>
    
    %% guard is needed since both eCAN blocks declare this function
    %if JustCreatedCompiledModelRecord("config_eCANmbx_prototype") 
        %openfile buffer
        void config_eCANmbx (uint16_T mbxType, uint16_T mbxNo, uint32_T msgID, uint16_T msgType);
        %closefile buffer
        %<LibCacheDefine(buffer)>
    %endif    
    
%endfunction %% BlockTypeSetup



%% Function: BlockInstanceSetup ===============================================
%%
%function BlockInstanceSetup(block,system) void

    %<AddParamsToBlock(block)>
    
%endfunction %% BlockInstanceSetup



%% Function: Start ============================================================
%%
%%  Initialize eCAN receive mailbox.
%%
%function Start(block,system) Output
    
    /* Configure mailbox %<mailboxNo> to receive messages with the ID: %<messageID> */
    config_eCANmbx (0U, %<mailboxNo>, %<messageID>, %<messageType>);

%endfunction %% Start



%% Function: Outputs ==========================================================
%%
%%  Read the message received from CAN and send out to Simulink model.
%%
%function Outputs(block,system) Output  

/* %<Type> Block: %<Name> (%<ParamSettings.FunctionName>) */
{
    struct ECAN_REGS ECanaShadow;
    if (ECanaRegs.CANRMP.bit.RMP%<mailboxNo>) { 
        /* reenable the mailbox to receive the next message */
		EALLOW;       
		ECanaShadow.CANRMP.all = 0x0;
		ECanaShadow.CANRMP.bit.RMP%<mailboxNo> = 1;     // request clear RMP for this mailbox only
		ECanaRegs.CANRMP.all = ECanaShadow.CANRMP.all;  // 32-bit register access is reliable only                         
		EDIS;  
      
        %switch (dataType)
        %case "uint16_T"
            %<LibBlockOutputSignal(1,"","",0)> = ECanaMboxes.MBOX%<mailboxNo>.MDL.word.LOW_WORD;  
            %<LibBlockOutputSignal(1,"","",1)> = ECanaMboxes.MBOX%<mailboxNo>.MDL.word.HI_WORD;  
            %<LibBlockOutputSignal(1,"","",2)> = ECanaMboxes.MBOX%<mailboxNo>.MDH.word.LOW_WORD;  
            %<LibBlockOutputSignal(1,"","",3)> = ECanaMboxes.MBOX%<mailboxNo>.MDH.word.HI_WORD;  
            %break
        %case "uint32_T"
            %<LibBlockOutputSignal(1,"","",0)> = ECanaMboxes.MBOX%<mailboxNo>.MDL.all;
            %<LibBlockOutputSignal(1,"","",1)> = ECanaMboxes.MBOX%<mailboxNo>.MDH.all;
            %break
        %endswitch
    
        %assign index = 1

        %% if creation of the "message length port" is requested by the user ... 
        %if (bIsMsgLengthPort)
            %assign index = index + 1
            %<LibBlockOutputSignal(index,"","",0)> = ECanaMboxes.MBOX%<mailboxNo>.MSGCTRL.bit.DLC;  
        %endif

        %% following block is just a placeholder for the future block upgrade
        %% if creation of the "message timestamp port" is requested by the user ...         
        %%if (bIsMsgTimeStampPort)
            %%assign index = index + 1
            %%<LibBlockOutputSignal(index,"","",0)> = ?????????????????????;   
        %%endif
        
        %% make a function call to a subsystem conected to the function call port
        %<MakeFcnCall(block,system,0)> 
    }
}

%endfunction %% Outputs



%% ---------------------------------------------
%% Call the function call subsystem
%% ---------------------------------------------
%function MakeFcnCall(block,system,fcnIdx) Output
   /* -- Call CAN RX Fcn-Call_%<fcnIdx> -- */
   %with SFcnSystemOutputCall[%<fcnIdx>]
      %% skip unconnected function call outputs
      %if LibIsEqual(BlockToCall, "unconnected")
        %return
      %endif
      %assign sysIdx = BlockToCall[0]
      %assign blkIdx = BlockToCall[1]
      %assign ssBlock = System[sysIdx].Block[blkIdx]
      %assign sysToCall = System[ssBlock.ParamSettings.SystemIdx]
      %<LibCallFCSS(sysToCall, tSimStruct, FcnPortElement, ParamSettings.SampleTimesToSet[0][1])>
   %endwith
%endfunction



%% Function: AddParamsToBlock =================================================
%%
%%  Rename the S-Function parameter for easy reference.
%%
%function AddParamsToBlock(block) void

    %assign mailboxNo           = SFcnParamSettings.mailboxNo
    %assign messageID           = SFcnParamSettings.messageID
    %assign messageType         = SFcnParamSettings.messageType
    %assign sampleTime          = SFcnParamSettings.sampleTime
    %assign dataType            = SFcnParamSettings.dataType
    %assign bIsMsgLengthPort    = SFcnParamSettings.bIsMsgLengthPort 
    %assign bIsMsgTimeStampPort = SFcnParamSettings.bIsMsgTimeStampPort 
    %assign block = block + mailboxNo + messageID + messageType + sampleTime + dataType + bIsMsgLengthPort + bIsMsgTimeStampPort
    
%endfunction  %% AddParamsToBlock

%% [EOF] c28xcanrcv.tlc
