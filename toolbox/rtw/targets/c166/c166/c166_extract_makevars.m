function cputype = c166_extract_makevars(inputFile,outputDir,tgtCompilerPath)
% C166_EXTRACT_MAKEVARS extracts make variables from a Tasking EDE generated file
%    CPUTYPE = C166_EXTRACT_MAKEVARS(INPUTFILE, OUTPUTDIR, TGTCOMPILERPATH)
%    reads in the reference makefile INPUTFILE and extracts the make environment
%    variables that are required by the build process for automatically
%    generated code. If INPUTFILE includes a line of the form BINDIR = dirspec,
%    this is used to infer the target compiler path and all instances of this
%    path are updated with TGTCOMPILERPATH. The extracted make variables are
%    written out to a new file in OUTPUTDIR. In addition to the make variables
%    file, this function writes out a copy, in OUTPUTDIR, of each of the files
%    that are referenced by the make variables file; in particular, copies of
%    the .ilo and .inc files are written. The returned CPUTYPE is extracted from
%    the OPT_CC make environment variable and is expected to be one of the
%    strings 0x166, 0x167 or 0x1662 (XC16x).
  
% Copyright 2003-2004 The MathWorks, Inc.
%   $File: $
%   $Revision: 1.1.6.4 $
%   $Date: 2004/04/19 01:18:31 $  
  
  % Create the build directory in case it doesn't already exist
  if exist(outputDir) ~= 7
    mkdir(outputDir)
  end
  
  inputDir = fileparts(inputFile);
  
  fid=fopen(inputFile,'r');
  if fid==-1
    error(['The file ' inputFile ' cannot be opened. This error occurs '...
          'if a the reference makefile specified in the Target Preferences '...
          'does not exist. To correct this problem, you should open the C166 ' ...
          'Target Preferences dialog and specify the Tasking makefile that ' ...
          'you wish to use as the reference for building the automatically '...
          'generated code.']);
  end
  bufIn=fread(fid,Inf);
  bufIn=char(bufIn');
  fclose(fid);
  
% Get a line of the form BINDIR = filepath
l = i_getline(bufIn, inputFile,'BINDIR');
% strip off leading BINDIR = 
re = '[\s]*BINDIR[\s]*=[\s]*';
l = regexprep(l,re,'');
% strip off trailing \bin
re = '\\bin[\s^$]*$';
l = regexprep(l,re,'');
% Replace all occurrences with TGTCOMPILERPATH
bufMod = strrep(bufIn,l,strrep(tgtCompilerPath,'/','\'));

  
% Get a line of the form OPT_CC = options
l = i_getline(bufMod, inputFile, 'OPT_CC');
% Remove substrings of the form -Wcp-I"include-path" or -Wc-I"include-path"
re = '-Wc[p]?-I"[^"]*"';
opt_cc = regexprep(l,re,'');
% Extract the CPUTYPE
re = '-DCPUTYPE=([^\s])*[\s]';
[s,f,t] = regexp(opt_cc,re);
if size(t)~= 1 | length(t{1}) ~= 2
  error(['CPUTYPE is not specified inside ' inputFile '. ' ...
        'This error occurred because the string ''-DCPUTYPE=cpunumber'' could not '...
        'be found inside the OPT_CC variable. To fix this problem, you must make '...
        'sure that the reference make variables file contains a make variable '...
        'OPT_CC that specifies e.g. -DCPUTYPE=0x167.']);
else
  t = t{1};
  cputype = opt_cc(t(1):t(2));
end

% Get a line of the form OPT_MPP = options
opt_mpp = i_getline(bufMod, inputFile, 'OPT_MPP');
% Remove any characters similar to INC('c:\c166\include') as the we use
% M166INC environment variable instead, and the single quote is problematic
% for gmake
re = ['INC\(''[^'']*''\)'];
opt_mpp = regexprep(opt_mpp,re,'');

% Get a line of the form OPT_LC = options
opt_lc = i_getline(bufMod, inputFile, 'OPT_LC');
re =  '"[^.^''^"]*?\.ilo"';
[s,f] = regexp(opt_lc,re);
iloFile = opt_lc(s+1:f-1);
if isempty(iloFile)
  error(['Could not identify .ilo file name. This error may occur if the make variables '...
        'reference file ' inputFile ' does not specify a .ilo file inside the OPT_LC ' ...
        ' variable. You must check that this file is correctly formatted. ']);
end

% Get a line of the form 
%
% start.src : filepath\start.asm
re = 'start.src[\s]*:[^\n]*?[\s\\/]start.asm';
[s,f] = regexp(bufMod, re);
if length(s) ~= 1
  error(['Could not identify a rule for start.src with dependency on start.asm in the '...
         'reference make variables file ' inputFile '. This information is required '...
         'in order to include start.asm in the Embedded Target build. You should check '...
         'the reference make variables file is in the required format.'])
end
l = bufMod(s:f);
l = regexprep(l,'start.src[\s]*:[\s]','');
startAsmDir = regexprep(l,'start.asm','');
if isempty(startAsmDir)
  startAsmDir = inputDir;
end

% Write out the new make variables
outputFile = fullfile(outputDir,'make_vars.mk');
fid=fopen(outputFile,'w');
fprintf(fid,['# File: ' strrep(outputFile,'\','/') '\n']);
fprintf(fid,['#\n']);
fprintf(fid,['# Description: make variables file created ' datestr(now) '.\n']);
fprintf(fid,['#    This file was generated by extracting relevant make variables from \n']);
fprintf(fid,['#    ' strrep(inputFile,'\','/') '.\n']);
fprintf(fid,'\n');
fprintf(fid,'%s\n\n',opt_cc);
fprintf(fid,'%s\n\n',opt_mpp);
fprintf(fid,'%s\n\n',opt_lc);
fclose(fid);


% Copy and write out the .ilo file
iloFullFile = fullfile(inputDir,iloFile);
fid=fopen(iloFullFile,'r');
if fid==-1
  error(['The file ' iloFullFile ' cannot be opened. This error occurs '...
         'if the .ilo file specified in the reference makefile does not '...
         'exist. To correct this problem, you should open the C166 ' ...
         'Target Preferences dialog and specify the Tasking makefile that ' ...
         'you wish to use as the reference for building the automatically '...
         'generated code; you must also check that this makefile specifies '...
         'a valid .ilo file.']);
end
buf=fread(fid,Inf);
buf=char(buf');
fclose(fid);
% replace LF with CR + LF
crlf = sprintf('\r\n');
lf = sprintf('\n');
bufout = strrep(buf,crlf,lf);

iloOutFile = fullfile(outputDir,iloFile);
fid=fopen(iloOutFile,'w');
fprintf(fid,['; File: ' strrep(iloOutFile,'\','/') '\n']);
fprintf(fid,[';\n']);
fprintf(fid,['; Description: make variables file created ' datestr(now) '.\n']);
fprintf(fid,[';    The content of this file was copied from  \n']);
fprintf(fid,[';    ' strrep(fullfile(inputDir,iloFile),'\','/') '.\n']);
fprintf(fid,['\n']);
fwrite(fid,bufout);
fclose(fid);

% Copy and write out the start.asm file
if exist( tgtCompilerPath ) == 7  % check that target compiler path is valid
  startAsmFileIn = fullfile(startAsmDir,'start.asm');
  startAsmFileOut = fullfile(outputDir,'start.asm');
  fid=fopen(startAsmFileIn,'r');
  if fid==-1
    error(['The file ' startAsmFileIn ' cannot be opened. This error occurs '...
           'if the start.asm file specified in the reference makefile does not '...
           'exist; a specific cause may be if your are using version 8 of the '...
           'Tasking toolchain and the  reference makefile was generated with '...
           'version 7. To correct the problem, you should open the C166 ' ...
           'Target Preferences dialog and specify the Tasking makefile that ' ...
           'you wish to use as the reference for building the automatically '...
           'generated code; you must also check that this makefile specifies '...
           'a valid start.asm file; if you are using version 8 of the Tasking '...
           'toolchain, you should use a reference makefile that was '...
           'created with this same version.']);
  end
  buf=fread(fid,Inf);
  buf=char(buf');
  fclose(fid);
  % replace CR + LF with LF
  crlf = sprintf('\r\n');
  lf = sprintf('\n');
  bufout = strrep(buf,crlf,lf);
  
  fid=fopen(startAsmFileOut,'w');
  fprintf(fid,['; File: ' strrep(startAsmFileOut,'\','/') '\n']);
  fprintf(fid,[';\n']);
  fprintf(fid,['; Description: startup assembler file created ' datestr(now) '.\n']);
  fprintf(fid,[';    The content of this file was copied from  \n']);
  fprintf(fid,[';    ' strrep(startAsmFileIn,'\','/') '.\n']);
  fprintf(fid,['\n']);
  fwrite(fid,bufout);
  fclose(fid);
end
  
  
% Copy and write out the mw_start.asm file if it exists
mwStartAsmFileIn = fullfile(startAsmDir,'mw_start.asm');
mwStartAsmFileOut = fullfile(outputDir,'mw_start.asm');
if exist(mwStartAsmFileIn) == 2
  fid=fopen(mwStartAsmFileIn,'r');
  buf=fread(fid,Inf);
  buf=char(buf');

  % replace CR + LF with LF
  crlf = sprintf('\r\n');
  lf = sprintf('\n');
  bufout = strrep(buf,crlf,lf);

  fclose(fid);
  fid=fopen(mwStartAsmFileOut,'w');
  fprintf(fid,['; File: ' strrep(mwStartAsmFileOut,'\','/') '\n']);
  fprintf(fid,[';\n']);
  fprintf(fid,['; Description: startup assembler file created ' datestr(now) '.\n']);
  fprintf(fid,[';    The content of this file was copied from  \n']);
  fprintf(fid,[';    ' strrep(mwStartAsmFileIn,'\','/') '.\n']);
  fprintf(fid,['\n']);
  fwrite(fid,bufout); 
  fclose(fid);
end



function l = i_getline(buf, inputFile, symbol)
  re = [symbol '[\s]*=[\s]*([^\n]*)\n'];
  [s,f,t] = regexp(buf,re);
  if length(s) ~= 1
    error(sprintf(['The file ' strrep(inputFile,'\','/') '\n'...
                   'must have one and only one line of the form\n\n '...
           symbol ' = options']))
  end
  l = buf(s:f);
  % strip any lf or cr characters
  l = regexprep(l,'[\r\n]','');





