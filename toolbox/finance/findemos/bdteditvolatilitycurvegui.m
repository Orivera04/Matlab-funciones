function bdteditvolatilitycurvegui(varargin)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%    This is private file of the BDT Demo and is not meant to be called
%    directly by the user.
%
%Author: C. Bassignani, 05-20-98 
%   Copyright 1995-2002 The MathWorks, Inc. 
%$Revision: 1.6 $   $Date: 0000/00/00 00:00:00

if (nargin == 0)

load bdteditvolatilitycurvegui

h0 = figure('Color',[0.8 0.8 0.8], ...
	'Colormap',mat0, ...
	'Position',[300 250 552 460], ...
	'NumberTitle', 'off', ...
	'MenuBar', 'none', ...
	'Name', 'Volatility Curve Editor', ...
	'Tag','SpecZeroCrvGUI');
h1 = axes('Parent',h0, ...
	'Units','pixels', ...
	'ButtonDownFcn','bdteditzerocurvegui(''Drop'')', ...
	'CameraUpVector',[0 1 0], ...
	'CameraUpVectorMode','manual', ...
	'Color',[1 1 1], ...
	'ColorOrder',mat1, ...
	'Position',[48 130 460 272], ...
	'Tag','AxesEditCurve', ...
	'UserData',mat2, ...
	'XColor',[0 0 0], ...
	'XLim',[729885 730268], ...
	'XLimMode','manual', ...
	'XTick',mat3, ...
	'XTickLabel',['05/10';'07/30';'09/18';'11/07';'12/28';'02/16';'04/07';'05/28'], ...
	'XTickLabelMode','manual', ...
	'XTickMode','manual', ...
	'YColor',[0 0 0], ...
	'YLim',[0 0.1025], ...
	'YLimMode','manual', ...
	'ZColor',[0 0 0]);
h2 = text('Parent',h1, ...
	'Color',[0 0 0], ...
	'HandleVisibility','off', ...
	'HorizontalAlignment','center', ...
	'Position',[730076.082788671 -0.009077490774907743 17.32050807568877], ...
	'Tag','Axes1Text4', ...
	'VerticalAlignment','cap');
set(get(h2,'Parent'),'XLabel',h2);
h2 = text('Parent',h1, ...
	'Color',[0 0 0], ...
	'HandleVisibility','off', ...
	'HorizontalAlignment','center', ...
	'Position',[729854.9607843137 0.05068265682656827 17.32050807568877], ...
	'Rotation',90, ...
	'Tag','Axes1Text3', ...
	'VerticalAlignment','baseline');
set(get(h2,'Parent'),'YLabel',h2);
h2 = text('Parent',h1, ...
	'Color',[0 0 0], ...
	'HandleVisibility','off', ...
	'HorizontalAlignment','right', ...
	'Position',mat4, ...
	'Tag','Axes1Text2', ...
	'Visible','off');
set(get(h2,'Parent'),'ZLabel',h2);
h2 = text('Parent',h1, ...
	'Color',[0 0 0], ...
	'HandleVisibility','off', ...
	'HorizontalAlignment','center', ...
	'Position',mat5, ...
	'Tag','Axes1Text1', ...
	'VerticalAlignment','bottom');
set(get(h2,'Parent'),'Title',h2);
h1 = uicontrol('Parent',h0, ...
	'Units','points', ...
	'BackgroundColor',[0.752941176470588 0.752941176470588 0.752941176470588], ...
	'FontSize',12, ...
	'FontWeight','bold', ...
	'ForegroundColor',[0 0.501960784313725 1], ...
	'ListboxTop',0, ...
	'HorizontalAlignment', 'left', ...
	'Position',[15 310 200 25], ...
	'String','Input Volatility Curve Editor', ...
	'Style','text', ...
	'Tag','StaticText1');
h1 = uicontrol('Parent',h0, ...
	'Units','points', ...
	'Callback',mat8, ...
	'FontSize',9, ...
	'FontWeight','bold', ...
	'ListboxTop',0, ...
	'Position',[285 15 75 25], ...
	'String','Done', ...
     'Tag','Pushbutton1',...
     'Callback', ...
     ...
     strcat(['MainGUIHandle = findobj(''Tag'', ''MainGUI''); '...
          'UserDataStruct = get(gca, ''UserData''); '...
          'VolatilityRates = UserDataStruct.YPoints; '...
          'CurveDates = round(UserDataStruct.XPoints); '...
          '[CurveDates, SortIndex] = sort(CurveDates); '...
          'VolatilityRates = VolatilityRates(SortIndex); '...
          'VolatilityCurve.CurveDates = CurveDates; '...
          'VolatilityCurve.VolatilityRates = VolatilityRates; '...
          'global GVOLATILITYCURVE; '...
          'GVOLATILITYCURVE = VolatilityCurve; '...
          'close(gcf); '...
          'drawnow; '...
          'VolatilityCurveAxesHandle = findobj(''Tag'', ''AxesVolatilityCurve''); '...
          'VolatilityCurveLineHandle = findobj(VolatilityCurveAxesHandle, ''type'', ''line''); '...
          'axes(VolatilityCurveAxesHandle); '...
          'CurveDates = VolatilityCurve.CurveDates; '...
          'VolatilityRates =VolatilityCurve.VolatilityRates; '...
          'if isempty(VolatilityCurveLineHandle), line(CurveDates, VolatilityRates); '...
          'else, set(VolatilityCurveLineHandle, ''XData'', CurveDates, ''YData'', VolatilityRates); '...
          'end;'...
          'plotscale(0.10);'...
          'set(gca, ''YLim'', [0 (max(VolatilityRates) + 0.03)]);']));

h1 = uicontrol('Parent',h0, ...
	'Units','points', ...
	'BackgroundColor',[0.752941176470588 0.752941176470588 0.752941176470588], ...
	'FontSize',9, ...
	'HorizontalAlignment','left', ...
	'ListboxTop',0, ...
	'Position',[15 15 225 40], ...
	'String',mat9, ...
	'Style','text', ...
	'Tag','StaticText2');
if nargout > 0, fig = h0; end

%Load the zero curve from disk by calling the LDZEROCRV subroutine
global GVOLATILITYCURVE;
global GSETTLE;
global GMATURITY;


%Unpack the zero curve to be manipulated
VolatilityCurve = GVOLATILITYCURVE;

%Unpack the settle and maturity dates
Settle = GSETTLE;
Maturity = GMATURITY;


if (~isempty(VolatilityCurve))

     VolatilityRates = VolatilityCurve.VolatilityRates;
     VolatilityRates = VolatilityRates(:);
     CurveDates = VolatilityCurve.CurveDates;
     CurveDates = CurveDates(:);

     %Specify an initial curve to be manipulated
     FirstRate = VolatilityRates(1, 1);
     LastRate = VolatilityRates(end, 1);
     FirstDate = CurveDates(1, 1);
     LastDate = CurveDates(end, 1);

     WorkCurveDates = linspace(FirstDate, LastDate, 10);
     WorkVolatilityRates = interp1(CurveDates, VolatilityRates, ...
          WorkCurveDates);

else
     WorkCurveDates = linspace(Settle, Maturity, 6);
     WorkVolatilityRates = [0.05 0.05 0.05 0.05 0.05 0.05]; 
     
end

%Call the curve editor GUI
bdteditvolatilitycurvegui(WorkCurveDates, WorkVolatilityRates, ...
     [(min(WorkCurveDates)- 10) (max(WorkCurveDates)+ 8) ...
          0 (max(WorkVolatilityRates) + 0.03)]);

else
     
if (nargin==1)
  % this is a callback
  Action = varargin{1};
else
  % this is the first function call
  Action = 'Init';
end

%-----------------------------------------------------------------
% switchyard for Actions
%----------------------------------------------------------------
switch Action
  
  case 'Init'
    % called from workspace
    CurveAxes = editcurveinit(varargin{:});
    
  case 'CurveLine'
    % callback from curve ButtonDownFcn
    if (strcmp('alt', get(gcf, 'SelectionType')))
      % right mouse : shift the whole curve
      % editcurvestartshift
    else
      % left mouse : add a control point
      editcurveaddpoint;
    end

  case 'ControlPoint'
    % callback from control point ButtonDownFcn
    if (strcmp('alt', get(gcf, 'SelectionType')))
      % right mouse : delete the control point
      editcurvedelpoint;
    else
      % left mouse : move the control point
      editcurvestartdrag;
    end

  case 'Dragging'
    % callback from figure WindowButtonMotionFcn
    editcurvedrag;
    
  case 'Drop'
    % callback from figure WindowButtonUpFcn
    editcurvedrop;
    
  otherwise
    % user clicked on something inactive
    
end

% adjust the positions of the uicontrols
bdtmainaction('adjustres')

end
%-----------------------------------------------------------------
% end of function EDITCURVE
%-----------------------------------------------------------------

function CurveAxes = editcurveinit(XPoints, YPoints, AxisLimits, XLine)

if nargin<3
  AxisLimits = [min(XPoints), max(XPoints), min(YPoints), max(YPoints)];
end
if nargin<4
  XLine = linspace(AxisLimits(1), AxisLimits(2));
end


CurveAxes = findobj('Tag', 'AxesEditCurve');

CurveData.CurveAxes = CurveAxes;
set(CurveData.CurveAxes, 'XLim', AxisLimits(1:2));
set(CurveData.CurveAxes, 'YLim', AxisLimits(3:4));

% Make an escape: click on the axes
set(CurveAxes, 'ButtonDownFcn', 'bdteditvolatilitycurvegui(''Drop'')' );

% Make the spline fit
CurveData.XPoints = XPoints(:);
CurveData.YPoints = YPoints(:);
CurveData.XLine = XLine;
CurveData.YLine = spline(CurveData.XPoints, CurveData.YPoints, ...
    CurveData.XLine);

Line = line( CurveData.XLine, CurveData.YLine, ...
    'ButtonDownFcn', 'bdteditvolatilitycurvegui(''CurveLine'')', ...
    'EraseMode', 'xor', 'Tag', 'CurveLine');

dtaxis;

CurveData.Line = Line;

% Make draggable control points
Points = zeros(length(XPoints),1);
for iline=1:length(XPoints),
  Points(iline) = line(XPoints(iline), YPoints(iline), ...
      'LineStyle','none', 'Marker','s', 'MarkerSize', 5, ...
      'ButtonDownFcn', 'bdteditvolatilitycurvegui(''ControlPoint'')', ...
      'EraseMode', 'xor', ...
      'Tag', 'ControlPoint', 'UserData', iline );
end
CurveData.Points = Points;
CurveData.DragPoint = [];

set(CurveAxes, 'UserData', CurveData);

%----------------------------------------------------------------------
function editcurveaddpoint
CurveData = get(gca, 'UserData');

% location for a new control point
PointerPos = get(CurveData.CurveAxes, 'CurrentPoint');
XNew = PointerPos(1,1);
YNew = spline(CurveData.XPoints, CurveData.YPoints, XNew);
NNew = length(CurveData.XPoints) + 1;

Point = line(XNew, YNew, ...
      'LineStyle','none', 'Marker','s', 'MarkerSize', 5, ...
      'ButtonDownFcn', 'bdteditvolatilitycurvegui(''ControlPoint'')', ...
      'EraseMode', 'xor', ...
      'Tag', 'ControlPoint', 'UserData', NNew );

CurveData.XPoints = [CurveData.XPoints; XNew];
CurveData.YPoints = [CurveData.YPoints; YNew];
CurveData.Points =  [CurveData.Points; Point];

set(CurveData.CurveAxes, 'UserData', CurveData);

%----------------------------------------------------------------------
function editcurvestartdrag
CurveData = get(gca, 'UserData');

CurveData.DragPoint = get(gcbo,'UserData');
CurveData.OldMotionFcn = get(gcf,'WindowButtonMotionFcn');
CurveData.OldUpFcn = get(gcf,'WindowButtonUpFcn');

set(gcf,'WindowButtonMotionFcn', 'bdteditvolatilitycurvegui(''Dragging'')' );
set(gcf,'WindowButtonUPFcn', 'bdteditvolatilitycurvegui(''Drop'')' );

set(CurveData.CurveAxes, 'UserData', CurveData);

%----------------------------------------------------------------------
function editcurvedrag
CurveData = get(gca, 'UserData');

PointerPos = get(CurveData.CurveAxes, 'CurrentPoint');
YPos = PointerPos(1,2);

PointInd = CurveData.DragPoint;
Point = CurveData.Points( PointInd );

set(Point, 'Ydata', YPos);
CurveData.YPoints( PointInd ) = YPos;

% update the spline
CurveData.YLine = spline(CurveData.XPoints, CurveData.YPoints, ... 
    CurveData.XLine);
set(CurveData.Line, 'YData', CurveData.YLine);

set(CurveData.CurveAxes, 'UserData', CurveData);
%----------------------------------------------------------------------
function editcurvedrop
drawnow;
CurveData = get(gca, 'UserData');

set(gcf,'WindowButtonMotionFcn', CurveData.OldMotionFcn);
set(gcf,'WindowButtonUpFcn', CurveData.OldUpFcn);

%----------------------------------------------------------------------
function editcurvedelpoint
CurveData = get(gca, 'UserData');

Point = gcbo; % handle to marked point
DelPoint = get(Point,'UserData'); % index of marked point

% you can not remove the end control points
if ( (CurveData.XPoints(DelPoint)==max(CurveData.XPoints)) | ...
      (CurveData.XPoints(DelPoint)==min(CurveData.XPoints)) )
  return
end

% remove the point from the lists
CurveData.XPoints(DelPoint) = [];
CurveData.YPoints(DelPoint) = [];
CurveData.Points(DelPoint) = [];

% remove the point from the figure
delete(Point);

% renumber the Userdata indices
for i=1:length(CurveData.Points),
  set(CurveData.Points(i), 'UserData', i);
end

% update the spline
CurveData.YLine = spline(CurveData.XPoints, CurveData.YPoints, ... 
    CurveData.XLine);
set(CurveData.Line, 'YData', CurveData.YLine);

set(CurveData.CurveAxes, 'UserData', CurveData);
     
     
