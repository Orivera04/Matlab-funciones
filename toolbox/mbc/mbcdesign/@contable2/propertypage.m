function [out,out2]=propertypage(obj,action,varargin)
%PROPERTYPAGE   Generate an editing page for this constraint
%
%  LYT=PROPERTYPAGE(OBJ,'CREATE',FIG,PTR,MDL,FACTORS)
%  [OK,MSG]= PROPERTYPAGE(OBJ,'FINALISE',LYT)
%

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.


%   $Revision: 1.5.2.3 $  $Date: 2004/02/09 06:59:24 $

switch lower(action)
case 'create'
   out=i_createlyt(varargin{:});
   out2=[];
case 'finalise'
   [out,out2]=i_finalise(varargin{:});
end
return



function lyt=i_createlyt(fig,ptr,mdl,fact)

ud.model=mdl;
ud.ptr=ptr;
ud.changed=0;
P=getparams(ptr.info);
ud.factors=P.factors;
infoptr=xregGui.RunTimePointer;
xtxt=xreguicontrol('parent',fig,...
   'style','text',...
   'string','X factor:',...
   'visible','off',...
   'enable','inactive',...
   'horizontalalignment','left');
ytxt=xreguicontrol('parent',fig,...
   'style','text',...
   'string','Y factor:',...
   'visible','off',...
   'enable','inactive',...
   'horizontalalignment','left');
ztxt=xreguicontrol('parent',fig,...
   'style','text',...
   'string','Z factor:',...
   'visible','off',...
   'enable','inactive',...
   'horizontalalignment','left');

ud.factpop=[xreguicontrol('parent',fig,...
      'style','popupmenu',...
      'visible','off',...
      'string',fact,...
      'value',P.factors(1),...
      'BackGroundColor','w',...
      'callback',{@i_factorchange,infoptr,1}),...
      xreguicontrol('parent',fig,...
      'style','popupmenu',...
      'visible','off',...
      'string',fact,...
      'value',P.factors(2),...
      'BackGroundColor','w',...
      'callback',{@i_factorchange,infoptr,2}),...
      xreguicontrol('parent',fig,...
      'style','popupmenu',...
      'visible','off',...
      'string',fact,...
      'value',P.factors(3),...
      'BackGroundColor','w',...
      'callback',{@i_factorchange,infoptr,3})];

xspace = xreguicontrol('parent',fig,...
   'style','pushbutton',...
   'visible','off',...
   'string','Span Range',...
   'callback',{@i_spacebreaks,infoptr,2});
yspace = xreguicontrol('parent',fig,...
   'style','pushbutton',...
   'visible','off',...
   'string','Span Range',...
   'callback',{@i_spacebreaks,infoptr,1});

xbrktxt=xregGui.truncateduicontrol('parent',fig,...
   'style','text',...
   'string','Number of breakpoints:',...
   'visible','off',...
   'enable','inactive',...
   'horizontalalignment','left', ...
   'UseToolTip', false);
ybrktxt=xregGui.truncateduicontrol('parent',fig,...
   'style','text',...
   'string','Number of breakpoints:',...
   'visible','off',...
   'enable','inactive',...
   'horizontalalignment','left', ...
   'UseToolTip', false);
ineqtxt=uicontrol('parent',fig,...
   'style','text',...
   'string','Inequality:',...
   'visible','off',...
   'enable','inactive',...
   'horizontalalignment','left');

ud.xbrk=xregGui.clickedit('parent',fig,...
   'visible','off',...
   'min',2,...
   'rule','int',...
   'dragging','off',...
   'clickincrement',1,...
   'value',length(P.breakx),...
   'callback',{@i_tablesize,infoptr,2});
ud.ybrk=xregGui.clickedit('parent',fig,...
   'visible','off',...
   'min',2,...
   'rule','int',...
   'dragging','off',...
   'clickincrement',1,...
   'value',length(P.breaky),...
   'callback',{@i_tablesize,infoptr,1});
ud.ineq=xreguicontrol('parent',fig,...
   'style','popupmenu',...
   'visible','off',...
   'string',{'>=','<='},...
   'value',P.le+1,...
   'BackGroundColor','w',...
   'callback',{@i_ineqchange,infoptr});
ud.code=uicontrol('parent',fig,...
   'style','checkbox',...
   'visible','off',...
   'string','View table as coded values',...
   'value',0,...
   'callback',{@i_codechange,infoptr});


% (factor 1)
Xc= invcode(mdl,P.breakx(:),P.factors(1));

% (factor 2)
Yc= invcode(mdl,P.breaky(:),P.factors(2));
Yc=Yc';

% (factor 3)
Zc= invcode(mdl,P.table(:),P.factors(3));
Zc= reshape(Zc,size(P.table));

tbl=xregtable(fig,...
   'visible','off',...
   'position',[0 0 150 100],...
   'cols.size',53,...
   'rows.size',20,...
   'frame.hborder',[0 0],...
   'frame.vborder',[0 0],...
   'frame.box','off',...
   'frame.visible','off',...
   'cells.defaultbackgroundcolor',[1 1 1],...
   'defaultcelltype','edit',...
   'defaultcellformat','%.4g',...
   'rows.number',length(P.breaky)+1,...
   'cols.number',length(P.breakx)+1,...
   'rows.fixed',1,...
   'cols.fixed',1,...
   'zeroindex',[2 2],...
   'cellchangedcallback',{@i_registertablechange,infoptr},...
   'redrawmode','basic'); 

tbl(0,0).visible='off';
tbl(:,:)=Zc;
set(tbl,...
   'cells.rowselection',[2 length(P.breaky)+1],...
   'cells.colselection',[1 1],...
   'cells.value',Yc,...
   'cells.backgroundcolor',[0.9 0.9 0.9]);
   
set(tbl,...
   'cells.rowselection',[1 1],...
   'cells.colselection',[2 length(P.breakx)+1],...
   'cells.numbers',Xc,...
   'cells.backgroundcolor',[0.9 0.9 0.9]);
set(tbl,'redrawmode','normal');
ud.tbl=tbl;

pnl=xregpanellayout(fig,...
   'packstatus','off',...
   'innerborder',[0 0 0 0],...
   'center',tbl);
lyt=xreggridbaglayout(fig,...
   'dimension',[15 6],...
   'rowsizes',[3 15 2 3 3 15 2 3 3 15 2 3 20 5 -1],...
   'colsizes',[40 60 120 60 75 -1],...
   'gapx',10,...
   'gapy',0,...
   'mergeblock',{[1 3],[2 2]},...
   'mergeblock',{[5 7],[2 2]},...
   'mergeblock',{[9 11],[2 2]},...
   'mergeblock',{[1 3],[4 4]},...
   'mergeblock',{[5 7],[4 4]},...
   'mergeblock',{[9 11],[4 4]},...
   'mergeblock',{[1 3],[5 5]},...
   'mergeblock',{[5 7],[5 5]},...
   'mergeblock',{[13 13],[1 3]},...
   'mergeblock',{[15 15],[1 6]},...
   'elements',{[],ud.factpop(1),[],ud.xbrk,xspace,[];...
      xtxt,[],xbrktxt,[],[],[];...
      [],[],[],[],[],[];...
      [],[],[],[],[],[];...
      [],ud.factpop(2),[],ud.ybrk,yspace,[];...
      ytxt,[],ybrktxt,[],[],[];...
      [],[],[],[],[],[];...
      [],[],[],[],[],[];...
      [],ud.factpop(3),[],ud.ineq,[],[];...
      ztxt,[],ineqtxt,[],[],[];...
      [],[],[],[],[],[];...
      [],[],[],[],[],[];...
      ud.code,[],[],[],[],[];...
      [],[],[],[],[],[];...
      pnl,[],[],[],[],[]},...
   'userdata',infoptr);

infoptr.info=ud;
return



function [ok,msg]=i_finalise(lyt)
ptr=get(lyt,'userdata');
ud=ptr.info;
m=ud.model;
coded=get(ud.code,'value');
X=ud.tbl(0,:);
Y=ud.tbl(:,0);
Z=ud.tbl(:,:);
if ~coded
   X= code(m,X(:),ud.factors(1));
   Y= code(m,Y(:),ud.factors(2));
   sz=size(Z);
   Z= code(m,Z(:),ud.factors(3));
   Z=reshape(Z,sz);
end

[c,msg]=setparams(ud.ptr.info,'breakx',X,'breaky',Y,'table',Z,...
   'factors',ud.factors,'le',get(ud.ineq,'value')-1);
ud.ptr.info=c;
ok= isempty(msg);
return



function i_factorchange(src,evt,ptr,factind)

newval=get(src,'value');
ud=ptr.info;

if newval~=ud.factors(factind)
   NF=length(get(src,'string'));
   factind2=find(ud.factors==newval);
   if ~isempty(factind2)
      % change another popup to keep each factor only used once
      avail=setdiff((1:NF),ud.factors(setdiff(1:3,factind)));
      set(ud.factpop(factind2),'value',avail(1));
      factind=[factind factind2];
   end
   val=get(ud.factpop,{'value'});
   val=[val{:}];
   ud.factors=val(:)';
   % update table
   [L,U]=range(ud.model);
   if get(ud.code,'value')
      L=code(ud.model,[L(:)';U(:)']);
      U=L(2,:);
      L=L(1,:);
   end
   for i=factind
      f=val(i);
      switch i
      case 1
         ud.tbl(0,:)= linspace(L(f),U(f),size(ud.tbl,2)-1)';
      case 2
         ud.tbl(:,0)= linspace(L(f),U(f),size(ud.tbl,1)-1);
      case 3
         ineq=get(ud.ineq,'value');
         if ineq==1
            ud.tbl(:,:)= L(f)*ones(size(ud.tbl)-1);
         else
            ud.tbl(:,:)= U(f)*ones(size(ud.tbl)-1);
         end
         % can set table to be unchanged again
         ud.changed=0;
         ud.tbl.cellchangedcallback={@i_registertablechange,ptr};
      end
   end
   ptr.info=ud;
end
return




function i_codechange(src,evt,ptr)
ud=ptr.info;
coded=get(ud.code,'value');

tbl= ud.tbl;
m= ud.model;

% (factor 1)
X= tbl(0,:);
if coded
   X= code(m,X(:),ud.factors(1));
   X=X';
else
   X = invcode(m,X(:),ud.factors(1));
   X=X';
end
tbl(0,:)=X;

% (factor 2)
Y= tbl(:,0);
if coded
   Y=code(m,Y(:),ud.factors(2));
else
   Y=invcode(m,Y(:),ud.factors(2));
end
tbl(:,0)= Y;

% (factor 3)
Z= tbl(:,:);
if coded
   Zc= code(m,Z(:),ud.factors(3));
   Zc=reshape(Zc,size(Z));
else
   Zc= invcode(m,Z(:),ud.factors(3));
   Zc=reshape(Zc,size(Z));
end
tbl(:,:)= Zc;
return



function i_tablesize(src,evt,ptr,dim)
ud=ptr.info;

tbl= ud.tbl;
m= ud.model;
coded=get(ud.code,'value');
newsz=get(src,'value');
if dim==1
   factind=get(ud.factpop(2),'value');
   Oldr= get(tbl,'rows.number')-1;
   set(tbl,'rows.number',1+newsz,...
      'rows.fixed',1,...
      'redrawmode','basic');
   if newsz>Oldr
      set(tbl,...
         'cells.colselection',[1 1],...
         'cells.rowselection',[Oldr+1 newsz+1],...
         'cells.type','uiedit',...
         'cells.backgroundcolor',[0.9 0.9 0.9]);
      
      [L,U]=range(m);
      % get last gap and use this as the increment
      incr=tbl(Oldr,0)-tbl(Oldr-1,0);
      U=U(factind);
      if coded
         U=code(m,U,factind);
      end    
      cell_vals = tbl(Oldr,0) + incr*(1:newsz-Oldr);
      cell_vals = min(cell_vals,U);
      tbl(Oldr+1:end,0) = cell_vals;
      rw=tbl(Oldr,:);
      tbl(Oldr+1:end,:)= repmat(rw,newsz-Oldr,1);
   end
else
   factind=get(ud.factpop(1),'value');
   Oldc= get(tbl,'cols.number')-1;
   set(tbl,'cols.number',1+newsz,...
      'cols.fixed',1,...
      'redrawmode','basic');
   if newsz>Oldc
      set(tbl,...
         'cells.rowselection',[1 1],...
         'cells.colselection',[Oldc+1 newsz+1],...
         'cells.type','uiedit',...
         'cells.backgroundcolor',[0.9 0.9 0.9]);
      [L,U]=range(m);

      incr=tbl(0,Oldc)-tbl(0,Oldc-1);
      U=U(factind);
      if coded
         U=code(m,U,factind);
      end    
      cell_vals = tbl(0,Oldc) + incr*(1:newsz-Oldc);
      cell_vals = min(cell_vals,U);
      tbl(0,Oldc+1:end) = cell_vals;
      col=tbl(:,Oldc);
      tbl(:,Oldc+1:end)= repmat(col,1,newsz-Oldc);
   end
end
set(tbl,'redrawmode','normal');
tbl.redraw;
return



function i_registertablechange(tbl,evt,ptr)
ud=ptr.info;
ud.changed=1;
ud.tbl.cellchangedcallback='';   % don't need to be continuously notified!
ptr.info=ud;
return


function i_ineqchange(pop,evt,ptr)
ud=ptr.info;
if ~ud.changed
   % set the table to min or max appropriately
   val=get(pop,'value');
   Z= ud.tbl(:,:);
   F=ud.factors(3);
   [L,U]=range(ud.model);
   if get(ud.code,'value')
      L=code(ud.model,[L(:)';U(:)']);
      U=L(2,:);
      L=L(1,:);
   end
   if val==1
      % min values
      ud.tbl(:,:)= L(F)*ones(size(ud.tbl)-1);
   else
      % max values
      ud.tbl(:,:)= U(F)*ones(size(ud.tbl)-1);
   end
end
return



function i_spacebreaks(src,evt,ptr,dim)
ud=ptr.info;
tbl= ud.tbl;
m= ud.model;
coded=get(ud.code,'value');
newsz=get(src,'value');
[L,U]=range(m);
if dim==1
   % y dimenension
   factind=get(ud.factpop(2),'value');
   nbrks = ud.ybrk.value;
else
   % x dimenension
   factind=get(ud.factpop(1),'value');
   nbrks = ud.xbrk.value;
end

brks = linspace(L(factind),U(factind),nbrks);
if coded
   brks = code(m,brks(:),factind);
end

if dim==1
   tbl(:,0) = brks;
else
   tbl(0,:) = brks;
end

