# File: bootver.pl
#
# Abstract:
#   Process contents.m to extract the version number and use
#   a hash table to look up the corresponding boot code version
#   number. This file must be edited to add a new entry to the
#   hash table each time a new version is released.
#
# Parameters:
#
#   ARGV[0] - the contents file, typically contents.m
#   ARGV[1] - outputtype - 'txt' | 'boot'
#             
#             'txt': a text file that will contain the mapping info (can be
#             processed by other utilities - eg. M-code, Java)
#
#             'boot': the assembler file that includes the bootcode version number
#
#   ARGV[2] - outputfilename - filename of the output file
#
# $Revision: 1.1.6.1 $
# $Date: 2004/04/19 01:26:34 $
#
# Copyright 2004 The MathWorks, Inc.

#
# add a new entry to this hash table each time a new version
# is released
# 
# NOTE: It is suggested that the MAJOR boot code version
# is incremented once per full product version increment - 
# eg. from R13 to R14 to R15.
#
# It is suggested that the MINOR boot code version is 
# incremeneted once per minor product version increment - 
# eg. from Beta1 to Beta2 to LCS to FCS
#
%bootVersions = ('Prior to release 14' => '0.0',
                 '1.2 (r14 beta 2)' => '1.0',
                 '2.0 (r14 prerelease)' => '1.1',
                 '2.0 (r14 prerelease 2)' => '1.2',
                 '2.0 (r14)' => '1.3');

#
# Read CONTENTS.M and extract the version number key
# 

$contentsFile     = $ARGV[0];
$outputtype       = $ARGV[1];
$outputfilename   = $ARGV[2];

open(CONTENTS, $contentsFile)
  || die "PERL Error: Couldn't open contents.m.\n";
undef $/; 
$contentsFile = <CONTENTS>;
$contentsFile = "\L$contentsFile";
close(CONTENTS);

#
# Create regular expressions to match the version number line
# and version number
#
$beforeVersionNumRE = "%\\sversion\\s";
$afterVersionNumRE = "\\s.+";
$versionNumRE = "[0-9]+([.][0-9]+)*\\s\\(.*\\)";
$versionLineRE = "$beforeVersionNumRE$versionNumRE$afterVersionNumRE";

if (!($contentsFile =~ /$versionLineRE/)) {
    die "Cannot find version number line in contents.m";
} else {
    $versionLine = "$&";
    $versionLine =~ /$versionNumRE/;
    $versionNum = "$&";
    $bootVersion = $bootVersions{$versionNum};
    # check that a valid bootcode version was determined
    if ($bootVersion eq "") {
	   die "\nThere is no bootcode version defined for ET MPC555 version $versionNum\nYou must edit the perl script that reported this error and add a new entry to the hash table."
	 }
    # split into major and minor versions 
    @parts = split(/\./, $bootVersion);
    $majorBootVersion = $parts[0];
    $minorBootVersion = $parts[1];
    print "\nGenerating files for bootcode version number\n";
    print "ET MPC555 version number = $versionNum\n";
    print "ET MPC555 major boot version = $majorBootVersion\n";
    print "ET MPC555 minor boot version = $minorBootVersion\n";

    # Generate the appropriate output file type
    if ($outputtype eq "txt") {
      $textFileName = $outputfilename;
      &CreateTextFile;  
    } elsif ($outputtype eq "boot") {
      $bootFileName = $outputfilename;
      &CreateBootver;  
    } else {
      die "Unsupported outputtype!"
    }
}

sub CreateBootver {
    $bootFileString = "#
# File: bootver.s
#
# Abstract:
#    This file defines the bootcode version number.
#
# Copyright 2002 The MathWorks, Inc.
# THIS FILE IS AUTOMATICALLY GENERATED: DO NOT MAKE CHANGES
# DIRECTLY TO THIS FILE

#
# Use the first 2-bytes of internal flash to store the version 
# number of the MathWorks bootcode.
#
# Current version of Embedded Target for Motorola MPC555: $versionNum
# Current major bootcode version number: $majorBootVersion
# Current minor bootcode version number: $minorBootVersion
#
   .org 0x0
# Write the major boot version
   .byte $majorBootVersion
# Write the minor boot version
   .byte $minorBootVersion 
";

# Open boot version file for writing
    open(OUTPUTFILE, (">" . $bootFileName)) 
	|| die "PERL Error: Couldn't open output file: ", 
	$bootFileName, "\n";
    print OUTPUTFILE $bootFileString;
    close(OUTPUTFILE);
    print "Created $bootFileName\n";
}

sub CreateTextFile {
   @versionNums = keys %bootVersions;
   foreach $ver (@versionNums) {
	   $allVersionNums = "$allVersionNums$ver\n";
	   $allBootNums = "$allBootNums$bootVersions{$ver}\n";
   }
   
   # Open text file for writing
   open(OUTPUTFILE, (">" .  $textFileName)) 
	|| die "PERL Error: Couldn't open output file: ", 
	$textFileName, "\n";
   
   select OUTPUTFILE;
   print OUTPUTFILE "# Autogenerated file containing information about bootcode versions.\n\n"; 
   print OUTPUTFILE "# Section 1: Current product version string.\n";
   print OUTPUTFILE "$versionNum\n\n";
   print OUTPUTFILE "# Section 2: All known product version strings.\n";
   print OUTPUTFILE "$allVersionNums\n";
   print OUTPUTFILE "# Section 3: Corresponding bootcode version numbers.\n";
   print OUTPUTFILE "$allBootNums\n";
   close(OUTPUTFILE);
   
   select STDOUT;
   print "Created $textFileName\n";
}
