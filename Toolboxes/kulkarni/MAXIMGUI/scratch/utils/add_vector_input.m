function vector_input = add_vector_input(title_bar, varname, varlabel, dim, index_label,init_vector)

% Editable input dialogue box - returns vector for variable specified
% Usage:  title_bar: String to appear in title bar of input figure
%         varname: variable name (used for validation)
%         varlabel: label for input
%         dim: dimension of requested vector (required)
%         index_label: optional parameter for supplying alternate labels for vector elements

global Scale AVValue AVLabel AVValue_handle AVLabel_handle vbase cancel_win

% initialize variables
maxdim = 9 ;
valid_input = 0 ;
cancel_win = 0 ;
num_disp = min(dim, maxdim) ;
AVLabel_handle = zeros(1, num_disp) ;
AVValue_handle = zeros(1, num_disp) ;
if isempty(index_label)
  AVLabel = [1:dim] ;
else
  AVLabel = index_label ;
end

while (valid_input == 0)
   AVValue = init_vector;


% display main figure
inputfig = figure('Name', title_bar, ...
                  'NumberTitle','off', ...
                  'Units','normalized', ...
                  'Color',[0.76 0.76 0.76], ...
                  'Position',[.25 .3 .6 .3], ...
                  'Menubar','none',...
                  'Tag','VectorInputFig');

% display labels
uicontrol('Parent',inputfig, ...
          'Units','normalized', ...
          'Position',[.05 .8 .8 .1], ...
          'Style','text', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Fontname','time roman', ...
          'Fontsize', Scale*14, ...
          'HorizontalAlignment','left',...
          'String', sprintf('%s :', varlabel)) ;

for s = 1:num_disp
  % display vector element indices
  AVLabel_handle(s) = uicontrol('Parent',inputfig, ...
                               'Units','normalized', ...
                               'BackgroundColor',[0.76 0.76 0.76], ...
                               'Position',[.1*s-.05 .6 .1 .1], ...
                               'HorizontalAlignment','center',...
                               'Fontsize',Scale*12, ...
                               'String', sprintf('%d', AVLabel(s)), ...
                               'Style','text', ...
                               'Tag', sprintf('VectorLabel%d', s));
  
  % display vector element input boxes
  AVValue_handle(s) = uicontrol('Parent',inputfig, ...
	                            'Units','normalized', ...
                               'BackgroundColor',[1 1 1], ...
                               'Position',[.1*s-.05 .45 .1 .1], ...
                               'HorizontalAlignment','center',...
                               'Fontsize',Scale*12, ...
                               'String', AVValue(s), ...
	                            'Style','edit', ...
                               'Tag', sprintf('VectorValue%d', s)) ;
end

% add sliders if necessary
if dim > num_disp
  if dim - num_disp == 1
    eachstep = .99 ;
  else 
    eachstep = 1 / (dim - num_disp) ;
  end

  uicontrol('Parent',inputfig, ...
            'Units','normalized', ...
            'Position',[.05 .35 .90 .08], ...
	         'Style','slider', ...
            'SliderStep', [eachstep 1], ...
            'Value', 0, ...
            'Callback', [sprintf('update_add_vector_values(1, %d);', num_disp), ...
                         sprintf('add_hscroll(1, %d, %d);', num_disp, dim)], ...
	         'Tag', sprintf('HSlider')) ;
end  % if

% Add action buttons
uicontrol('Parent',inputfig, ...
          'Units','normalized', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Callback', 'uiresume(gcbf)',...
          'FontName','time roman', ...
          'Fontsize',Scale*14, ...
          'Position',[.3 .05 .20 .15], ...
          'String','OK') ;

uicontrol('Parent',inputfig, ...
          'Units','normalized', ...
          'BackgroundColor', [0.76 0.76 0.76], ...
          'Callback', ['set_cancel;uiresume(gcbf);'],...
          'FontName','time roman', ...
          'Fontsize',Scale*14, ...
          'Position',[.55 .05 .30 .15], ...
          'String','Cancel', ...
          'Tag', 'Cancel') ;

uiwait(inputfig) 
    

  
if (cancel_win == 1)
   vector_input = [] ;
   valid_input = 1; %to get out of the loop.
else
   update_add_vector_values(1, num_disp);
   vector_input = AVValue;
   valid_input = validate_add_vector_input(varname,vector_input)
end
if valid_input == 0
   init_vector = vector_input;
   close(inputfig)
end

end %while
close(inputfig)
