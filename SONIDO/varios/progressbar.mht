From: <Guardado por Microsoft Internet Explorer 5>
Subject: 
Date: Thu, 26 Jul 2007 13:18:36 -0600
MIME-Version: 1.0
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mathworks.com/matlabcentral/files/6922/progressbar.m
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2869

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3D"MSHTML 6.00.2900.2912" name=3DGENERATOR></HEAD>
<BODY><PRE>function progressbar(fractiondone, position)
% Description:
%   progressbar(fractiondone,position) provides an indication of the =
progress of
% some task using graphics and text. Calling progressbar repeatedly will =
update
% the figure and automatically estimate the amount of time remaining.
%   This implementation of progressbar is intended to be extremely =
simple to use
% while providing a high quality user experience.
%
% Features:
%   - Can add progressbar to existing m-files with a single line of =
code.
%   - The figure closes automatically when the task is complete.
%   - Only one progressbar can exist so old figures don't clutter the =
desktop.
%   - Remaining time estimate is accurate even if the figure gets =
closed.
%   - Minimal execution time. Won't slow down code.
%   - Random color and position options. When a programmer gets =
bored....
%
% Usage:
%   fractiondone specifies what fraction (0.0 - 1.0) of the task is =
complete.
% Typically, the figure will be updated according to that value. =
However, if
% fractiondone =3D=3D 0.0, a new figure is created (an existing figure =
would be
% closed first). If fractiondone =3D=3D 1.0, the progressbar figure will =
close.
%   position determines where the progressbar figure appears on screen. =
This
% argument only has an effect when a progress bar is first created or is =
reset
% by calling with fractiondone =3D 0. The progress bar's position can be =
specifed
% as follows:
%       [x, y]  - Position of lower left corner in normalized units (0.0 =
- 1.0)
%           0   - Centered (Default)
%           1   - Upper right
%           2   - Upper left
%           3   - Lower left
%           4   - Lower right
%           5   - Random [x, y] position
%   The color of the progressbar is choosen randomly when it is created =
or
% reset. Clicking inside the figure will cause a random color change.
%   For best results, call progressbar(0) (or just progressbar) before =
starting
% a task. This sets the proper starting time to calculate time =
remaining.
%
% Example Function Calls:
%   progressbar(fractiondone,position)
%   progressbar               % Initialize/reset
%   progressbar(0)            % Initialize/reset
%   progressbar(0,4)          % Initialize/reset and specify position
%   progressbar(0,[0.2 0.7])  % Initialize/reset and specify position
%   progressbar(0.5)          % Update
%   progressbar(1)            % Close
%
% Demo:
%   n =3D 1000;
%   progressbar % Create figure and set starting time
%   for i =3D 1:n
%       pause(0.01) % Do something important
%       progressbar(i/n) % Update figure
%   end
%
% Author: Steve Hoelzer
%
% Revisions:
% 2002-Feb-27   Created function
% 2002-Mar-19   Updated title text order
% 2002-Apr-11   Use floor instead of round for percentdone
% 2002-Jun-06   Updated for speed using patch (Thanks to waitbar.m)
% 2002-Jun-19   Choose random patch color when a new figure is created
% 2002-Jun-24   Click on bar or axes to choose new random color
% 2002-Jun-27   Calc time left, reset progress bar when fractiondone =
=3D=3D 0
% 2002-Jun-28   Remove extraText var, add position var
% 2002-Jul-18   fractiondone input is optional
% 2002-Jul-19   Allow position to specify screen coordinates
% 2002-Jul-22   Clear vars used in color change callback routine
% 2002-Jul-29   Position input is always specified in pixels
% 2002-Sep-09   Change order of title bar text
% 2003-Jun-13   Change 'min' to 'm' because of built in function 'min'
% 2003-Sep-08   Use callback for changing color instead of string
% 2003-Sep-10   Use persistent vars for speed, modify titlebarstr
% 2003-Sep-25   Correct titlebarstr for 0% case
% 2003-Nov-25   Clear all persistent vars when percentdone =3D 100
% 2004-Jan-22   Cleaner reset process, don't create figure if =
percentdone =3D 100
% 2004-Jan-27   Handle incorrect position input
% 2004-Feb-16   Minimum time interval between updates
% 2004-Apr-01   Cleaner process of enforcing minimum time interval
% 2004-Oct-08   Seperate function for timeleftstr, expand to include =
days
% 2004-Oct-20   Efficient if-else structure for sec2timestr
%

persistent progfig progpatch starttime lastupdate

% Set defaults for variables not passed in
if nargin &lt; 1
    fractiondone =3D 0;
end
if nargin &lt; 2
    position =3D 0;
end

try
    % Access progfig to see if it exists ('try' will fail if it doesn't)
    dummy =3D get(progfig,'UserData');
    % If progress bar needs to be reset, close figure and set handle to =
empty
    if fractiondone =3D=3D 0
        delete(progfig) % Close progress bar
        progfig =3D []; % Set to empty so a new progress bar is created
    end
catch
    progfig =3D []; % Set to empty so a new progress bar is created
end

% If task completed, close figure and clear vars, then exit
percentdone =3D floor(100*fractiondone);
if percentdone =3D=3D 100 % Task completed
    delete(progfig) % Close progress bar
    clear progfig progpatch starttime lastupdate % Clear persistent vars
    return
end

% Create new progress bar if needed
if isempty(progfig)
   =20
    % Calculate position of progress bar in normalized units
    scrsz =3D [0 0 1 1];
    width =3D scrsz(3)/4;
    height =3D scrsz(4)/50;
    if (length(position) =3D=3D 1)
        hpad =3D scrsz(3)/64; % Padding from left or right edge of =
screen
        vpad =3D scrsz(4)/24; % Padding from top or bottom edge of =
screen
        left   =3D scrsz(3)/2 - width/2; % Default
        bottom =3D scrsz(4)/2 - height/2; % Default
        switch position
            case 0 % Center
                % Do nothing (default)
            case 1 % Top-right
                left   =3D scrsz(3) - width  - hpad;
                bottom =3D scrsz(4) - height - vpad;
            case 2 % Top-left
                left   =3D hpad;
                bottom =3D scrsz(4) - height - vpad;
            case 3 % Bottom-left
                left   =3D hpad;
                bottom =3D vpad;
            case 4 % Bottom-right
                left   =3D scrsz(3) - width  - hpad;
                bottom =3D vpad;
            case 5 % Random
                left   =3D rand * (scrsz(3)-width);
                bottom =3D rand * (scrsz(4)-height);
            otherwise
                warning('position must be (0-5). Reset to 0.')
        end
        position =3D [left bottom];
    elseif length(position) =3D=3D 2
        % Error checking on position
        if (position(1) &lt; 0) | (scrsz(3)-width &lt; position(1))
            position(1) =3D max(min(position(1),scrsz(3)-width),0);
            warning('Horizontal position adjusted to fit on screen.')
        end
        if (position(2) &lt; 0) | (scrsz(4)-height &lt; position(2))
            position(2) =3D max(min(position(2),scrsz(4)-height),0);
            warning('Vertical position adjusted to fit on screen.')
        end
    else
        error('position is not formatted correctly')
    end
   =20
    % Initialize progress bar
    progfig =3D figure(...
        'Units',            'normalized',...
        'Position',         [position width height],...
        'NumberTitle',      'off',...
        'Resize',           'off',...
        'MenuBar',          'none',...
        'BackingStore',     'off' );
    progaxes =3D axes(...
        'Position',         [0.02 0.15 0.96 0.70],...
        'XLim',             [0 1],...
        'YLim',             [0 1],...
        'Box',              'on',...
        'ytick',            [],...
        'xtick',            [] );
    progpatch =3D patch(...
        'XData',            [0 0 0 0],...
        'YData',            [0 0 1 1],...
        'EraseMode',        'none' );
    set(progfig,  'ButtonDownFcn',{@changecolor,progpatch});
    set(progaxes, 'ButtonDownFcn',{@changecolor,progpatch});
    set(progpatch,'ButtonDownFcn',{@changecolor,progpatch});
    changecolor(0,0,progpatch)
   =20
    % Set time of last update to ensure a redraw
    lastupdate =3D clock - 1;
   =20
    % Task starting time reference
    if isempty(starttime) | (fractiondone =3D=3D 0)
        starttime =3D clock;
    end
   =20
end

% Enforce a minimum time interval between updates
if etime(clock,lastupdate) &lt; 0.01
    return
end

% Update progress patch
set(progpatch,'XData',[0 fractiondone fractiondone 0])

% Update progress figure title bar
if (fractiondone =3D=3D 0)
    titlebarstr =3D ' 0%';
else
    runtime =3D etime(clock,starttime);
    timeleft =3D runtime/fractiondone - runtime;
    timeleftstr =3D sec2timestr(timeleft);
    titlebarstr =3D sprintf('%2d%%    %s =
remaining',percentdone,timeleftstr);
end
set(progfig,'Name',titlebarstr)

% Force redraw to show changes
drawnow

% Record time of this update
lastupdate =3D clock;


% =
-------------------------------------------------------------------------=
-----
function changecolor(h,e,progpatch)
% Change the color of the progress bar patch

colorlim =3D 2.8; % Must be &lt;=3D 3.0 - This keeps the color from =
being too light
thiscolor =3D rand(1,3);
while sum(thiscolor) &gt; colorlim
    thiscolor =3D rand(1,3);
end
set(progpatch,'FaceColor',thiscolor);


% =
-------------------------------------------------------------------------=
-----
function timestr =3D sec2timestr(sec)
% Convert a time measurement from seconds into a human readable string.

% Convert seconds to other units
d =3D floor(sec/86400); % Days
sec =3D sec - d*86400;
h =3D floor(sec/3600); % Hours
sec =3D sec - h*3600;
m =3D floor(sec/60); % Minutes
sec =3D sec - m*60;
s =3D floor(sec); % Seconds

% Create time string
if d &gt; 0
    if d &gt; 9
        timestr =3D sprintf('%d day',d);
    else
        timestr =3D sprintf('%d day, %d hr',d,h);
    end
elseif h &gt; 0
    if h &gt; 9
        timestr =3D sprintf('%d hr',h);
    else
        timestr =3D sprintf('%d hr, %d min',h,m);
    end
elseif m &gt; 0
    if m &gt; 9
        timestr =3D sprintf('%d min',m);
    else
        timestr =3D sprintf('%d min, %d sec',m,s);
    end
else
    timestr =3D sprintf('%d sec',s);
end
</PRE></BODY></HTML>
