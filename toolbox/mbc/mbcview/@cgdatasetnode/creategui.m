function [lyt,tblyt,d]= creategui(nd,info)
%CREATEGUI  Create a view layout for the node
%
%  [lyt,tblyt,data]= creategui(nd,info);
%

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.


%   $Revision: 1.11.4.3 $  $Date: 2004/02/09 08:21:43 $


tag = 'DatasetViewer';
d = [];
d.standalone = 1;
d.nd = nd;
[lyt,tblyt,d] = i_Base(info,d);
d = ToolsMenu(d);
d = GuiUtilities(nd,'create',d);
d = i_FactorsPage(d);
d = i_DataPage(d);
d = i_PlotPage(d);
d = i_TablePage(d);
% Now for the dialog views
d = i_Dlg(d);
d = i_ImportDlg(d);
d = i_GridDlg(d);
d = i_LinkDlg(d);
d = i_AssignDlg(d);
% And a different bottom view 
% ... and another one for the table filling view !!
d = i_TableFillView(d);
d = pr_ChangeView(d,'factors','setup');
d.Handles.ViewToolbar.setRedraw(true);
d.Handles.ViewToolbar.drawToolBar;

return

function [lyt,tblyt,d] = i_Base(info,d)

% Create menus
cgb=info.browserH;
menus=cgb.createmenu(guid(d.nd),2);
set(menus,{'Label'},{'&View';'&Data'});


Handles.Figure = info.Figure;
fig = Handles.Figure;
d.ViewMenu = menus(1);
d.ToolsMenu = menus(2);

% ------- layout

set(d.ViewMenu,'callback',@cb_SetupViewMenu);
set(d.ToolsMenu,'callback',@cb_SetupToolsMenu);

% views toolbar
Handles.ViewToolbar = xregGui.uitoolbar(Handles.Figure,'visible','off');
Handles.ViewToolbar.setRedraw(false);
Handles.ViewToggle = [];
Handles.ViewMenuItems = [];
d.ViewInfo = [];

Handles.TopCard = xregcardlayout(fig, ...
    'packstatus', 'off', ...
    'numcards',1,...
    'visible','off', ...
    'currentcard', 1);

Handles.BottomCard = xregcardlayout(fig, ...
    'numcards',4,...
    'visible','off', ...
    'currentcard', 1);

% message window for failures...
Handles.Message = xregGui.uicontrol(fig,'style','text',...
    'fontweight','bold',...
    'fontsize',10,...
    'enable','inactive',...
    'visible','off');
message = xreggridlayout(fig,'correctalg','on',...
    'visible','off',...
    'dimension',[2 1],...
    'elements',{[] Handles.Message});
d.Handles = Handles;
% -------- message window
newview.ID = 'message';
newview.layout = message;
d = i_AddView(d,newview);
% Start in the blank view
set(Handles.TopCard,'currentcard',get(Handles.TopCard,'numcards'));

Handles = d.Handles;

%Get the main ImageList control

d.ILmanager = get(cgbrowser,'ILmanager');
IL=d.ILmanager.IL;

mfile = 'cgdatasetnodecb';
callbacks = {'rightclick',mfile;...
    'columnclick',mfile;...
    'click',mfile;...
    'keyup',mfile;...
    'dblclick',mfile;...
    'MouseMove','MotionManager'};
d.CB.actx = callbacks;

[Handles.FactorList, Handles.TopList] = ...
    pr_CreateList(Handles.Figure, d.CB.actx, 'top',IL);
Handles.TopTB.Toolbar = Handles.ViewToolbar;
attach(Handles.TopCard, Handles.TopList, 1);

% bottom expression list
[Handles.ExprList,Handles.BottomList] = ...
    pr_CreateList(Handles.Figure, d.CB.actx,'bottom',IL);
Handles.BottomTB.Toolbar = [];
attach(Handles.BottomCard, Handles.BottomList, 1);

Handles.SplitLayout=xregsplitlayout(fig,'visible','off',...
    'split',[0.65 0.35],...
    'orientation','ud',...
    'top',Handles.TopCard,...
    'bottom',Handles.BottomCard,...
    'minwidth',[30 30],...
    'dividerstyle','flat',...
    'dividerwidth',4);

lyt = Handles.SplitLayout;

% put copy menus here
Handles.Copy = [];
Handles.Paste = [];
Handles.CurDatasetView = 1;
Handles.DlgButton = [];
d.Handles = Handles;

d.CB.BuildExprs = @i_BuildExprs;
d.CB.View = [];
d.currentviewinfo = 1;
d.CheckUnits = 0;


tblyt = Handles.ViewToolbar;


%------------------------------------------------------------------
function cb_Script(src,ev,state)
%------------------------------------------------------------------
d = pr_GetViewData;
set(d.Handles.scm.View,'checked','off');
switch state
case 'on'
    d.Script.ShowScript = 1;
    set(d.Handles.scm.View(2),'checked','on');
case 'off'
    d.Script.ShowScript = 0;
    set(d.Handles.scm.View(1),'checked','on');
end
ID = d.ViewInfo(d.currentviewinfo).ID;
d = pr_ChangeView(d,ID);
pr_SetViewData(d);


%------------------------------------------------------------------
function d = i_TableFillView(d);
%------------------------------------------------------------------

% Imagey List Manager
d.ILmanager = get(cgbrowser,'ILmanager');
IL=d.ILmanager.IL;

% Callbacks for lists
mfile = 'cgdatasetnodecb';
callbacks = {'rightclick',mfile;...
        'columnclick',mfile;...
        'click',mfile;...
        'keyup',mfile;...
        'dblclick',mfile;...
        'MouseMove','MotionManager'};

[d, TFBtmLyt] = DrawTabFillBtm(d.nd, d,  IL, callbacks);
attach(d.Handles.BottomCard, TFBtmLyt, 4);


%------------------------------------------------------------------
function [d,fcb] = i_FactorsPage(d);
%------------------------------------------------------------------
fcb = factors(d.nd,'get_callbacks');

% -------- factors page
% This is the page with the callbacks on it
newview = struct('ID','factors',...
    'label','&Factors',...
    'icon','cgdsfactorsbut.bmp',...
    'tooltip','Factor Information',...
    'card',1,...
    'view',fcb.View,...
    'show',fcb.Show,...
    'copy',fcb.Copy,...
    'enablestatus',1,...
    'tpselection',fcb.Selection,...
    'showindex',fcb.ShowIndex,...
    'tplist',1,...
    'tpmenu',d.Handles.fm.menu,...
    'tpclick',fcb.FactorClick,...
    'bmlist',1,...
    'bmmenu',d.Handles.fm.menu,...
    'tlenable',d.Handles.tm.FactorBits,...
    'bmclick',fcb.ExprClick);
% NB toolbars already set up by factors - not changed here

d = i_AddView(d,newview);
% Using top list - already on a card.

%------------------------------------------------------------------
function d = i_PlotPage(d);
%------------------------------------------------------------------
pcb = plot(d.nd,'get_callbacks');
d = feval(pcb.CreateMenus,d,pcb);

% -------- plot page
newview = struct('ID','plot',...
    'label','&Plot',...
    'icon','cgdsplotbut.bmp',...
    'drawcb',pcb.Draw,...
    'layout',1,...
    'tooltip','Plot Outputs',...
    'view',pcb.View,...
    'show',pcb.Show,...
    'copy',pcb.Copy,...
    'tplist',0,...
    'bmlist',1,...
    'bmmenu',d.Handles.fm.menu,...
    'showindex',pcb.ShowIndex,...
    'tlenable',d.Handles.tm.PlotBits,...
    'bmclick',pcb.ExprClick);

d = i_AddView(d,newview);

%------------------------------------------------------------------
function d = i_TablePage(d);
%------------------------------------------------------------------
tcb = FillTable(d.nd,'get_callbacks');
d.CB.TableMode = tcb.TableMode;

d = feval(tcb.CreateMenu,d,tcb);

% -------- plot page
newview = struct('ID','table',...
    'label','&Table Filler',...
    'icon','cgdstablebut.bmp',...
    'drawcb',tcb.Draw,...
    'card','plot',...
    'tooltip','Fill Table from Data Set',...
    'view',tcb.View,...
    'show',tcb.Show,...
    'tlenable',[d.Handles.tabm.Options d.Handles.tm.Plot],...
    'enablestatus', tcb.Enable, ...
    'tplist',0,...
    'bmlist',1,...
    'bmmenu',d.Handles.tabm.menu,...
    'bmcolclick','nochange',...
    'bmclick',tcb.Click);

d = i_AddView(d,newview);



%------------------------------------------------------------------
function d = i_DataPage(d);
%------------------------------------------------------------------
cb = data(d.nd,'get_callbacks');

% -------- data page
newview = struct('ID','data',...
    'label','&Data',...
    'icon','cgdsdatabut.bmp',...
    'tooltip','View Data',...
    'drawcb',cb.Draw,...
    'layout',1,...
    'view',cb.View,...
    'show',cb.Show,...
    'copy',cb.Copy,...
    'paste',cb.Paste,...
    'tpmenu',d.Handles.fm.menu,...
    'tpselection',cb.Selection,...
    'showindex',cb.ShowIndex,...
    'tplist',0,...
    'bmlist',1,...
    'bmmenu',d.Handles.fm.menu,...
    'tlenable',d.Handles.tm.FactorBits,...
    'bmclick',cb.ExprClick);

d = i_AddView(d,newview);

%------------------------------------------------------------------
function d = i_Dlg(d);
%------------------------------------------------------------------
[d,cb] = DrawDlg(d.nd,d);

% -------- data page
newview = struct('ID','dlg',...
    'drawcb',cb.Draw,...
    'dialog',1);

d = i_AddView(d,newview);

%------------------------------------------------------------------
function d = i_ImportDlg(d);
%------------------------------------------------------------------
cb = ImportDlg(d.nd);

% -------- data page
newview = struct('ID','importdlg',...
    'card','dlg',...
    'dialog',1,...
    'view',cb.View,...
    'show',cb.Show,...
    'drawcb',cb.Setup,...
    'tpcolclick',d.Dlg.colclick,...
    'bmcolclick',d.Dlg.colclick,...
    'tpclick',cb.Click,...
    'bmclick',cb.Click);

d = i_AddView(d,newview);

%------------------------------------------------------------------
function d = i_AssignDlg(d);
%------------------------------------------------------------------
cb = AssignDlg(d.nd);

% -------- data page
newview = struct('ID','assigndlg',...
    'icon','assignbut.bmp',...
    'tooltip','Assign Data Columns',...
    'label','&Assign...',...
    'enablestatus',cb.Enable,...
    'dialog',1,...
    'card','dlg',...
    'tpcolclick',d.Dlg.colclick,...
    'bmcolclick',d.Dlg.colclick,...
    'drawcb',cb.Setup,...
    'view',cb.View,...
    'show',cb.Show);

d = i_AddView(d,newview);

%------------------------------------------------------------------
function d = i_LinkDlg(d);
%------------------------------------------------------------------
cb = LinkDlg(d.nd);

% -------- data page
newview = struct('ID','linkdlg',...
    'icon','cglinkbut.bmp',...
    'tooltip','Link Factors',...
    'label','&Links...',...
    'dialog',1,...
    'card','dlg',...
    'tpclick',cb.Click,...
    'bmclick',cb.Click,...
    'tpcolclick',d.Dlg.colclick,...
    'bmcolclick',d.Dlg.colclick,...
    'enablestatus',cb.Enable,...
    'drawcb',cb.Setup,...
    'view',cb.View,...
    'show',cb.Show);

d = i_AddView(d,newview);

%------------------------------------------------------------------
function d = i_GridDlg(d);
%------------------------------------------------------------------
[d,cb] = Inputs(d.nd,d);

% -------- inputs (grid) page
newview = struct('ID','inputs',...
    'icon','cgdsinputsbut.bmp',...
    'tooltip','Build Grid',...
    'label','Build &Grid ...',...
    'dialog',1,...
    'view',cb.View,...
    'show',cb.Show,...
    'enablestatus',cb.Enable,...
    'drawcb',cb.Draw,...
    'tpclick',cb.Click,...
    'tpcolclick','none');

d = i_AddView(d,newview);

%-----------------------------------------------------------------------
function d = i_AddView(d,newview)
%-----------------------------------------------------------------------
viewdata = struct('ID','',...
    'label','',...
    'icon',[],...
    'tooltip','',...
    'cdata',[],...
    'card',[],...
    'view',[],...
    'show',[],...
    'copy',[],...
    'paste',[],...
    'layout',[],...
    'dialog',0,...
    'enablestatus',[],...
    'button',[],...
    'menuitem',[],...
    'drawcb',[],...
    'tplist',0,...
    'tpmenu',[],...
    'tpcolclick',[],...
    'tpclick',[],...
    'tpdblclick',[],...
    'tpselection',[],...
    'showindex',[],...
    'bmlist',0,...
    'bmmenu',[],...
    'bmclick',[],...
    'bmdblclick',[],...
    'drawn',0,...
    'tlenable',[], ...
    'bmcolclick', []);
% copy relevant data into structure
fn = fieldnames(newview);
for i = 1:length(fn)
    viewdata.(fn{i}) = newview.(fn{i});
end

if ~isempty(viewdata.icon)
    cdata = cgresload(viewdata.icon,'bmp');
elseif ~isempty(viewdata.cdata)
    cdata = viewdata.cdata;
else 
    cdata = [];
end

% label non-empty -> create menu item
if ~isempty(viewdata.label)
    if viewdata.dialog
        hnd = d.ToolsMenu;
    else
        hnd = d.ViewMenu;
    end
    mm = uimenu(hnd,'label',viewdata.label,...
        'callback',{@cb_ChangeView,viewdata.ID});
    viewdata.menuitem = mm;
    d.Handles.ViewMenuItems = [d.Handles.ViewMenuItems mm];
end

% icon | cdata non-empty -> create toolbar button
if ~isempty(cdata)
    t = xregGui.uitoggletool(d.Handles.ViewToolbar,...
        'cdata',cdata,...
        'ToolTipString',viewdata.tooltip,...
        'Clickedcallback', {@cb_ChangeView,viewdata.ID},...
        'transparentcolor',[0 255 0]);
    d.Handles.ViewToggle = [d.Handles.ViewToggle t];
    viewdata.button = length(d.Handles.ViewToggle);
    if viewdata.dialog & isempty(d.Handles.DlgButton)
        d.Handles.DlgButton = 1;
        set(t,'separator','on');
    end
end

% layout non-empty -> create new card
if ~isempty(viewdata.layout)
    num = get(d.Handles.TopCard,'numcards');
    set(d.Handles.TopCard,'numcards',num+1);
    if isempty(viewdata.card)
        viewdata.card = num+1;
    else
        error('card already set');
    end 
    if ~isnumeric(viewdata.layout)
        attach(d.Handles.TopCard, viewdata.layout, viewdata.card);
    end
elseif ischar(viewdata.card)
    f = strmatch(viewdata.card,{d.ViewInfo.ID},'exact');
    if length(f)==1
        % Do this later - check that the card is drawn first.
        %viewdata.card = d.ViewInfo(f).card;
    else
        viewdata.card = [];
    end
end
if isempty(viewdata.card) & ~viewdata.dialog
    error('no card set');
end
d.ViewInfo = [d.ViewInfo viewdata];

%------------------------------------------------------------------
function d = ToolsMenu(d);
%------------------------------------------------------------------
mm = uimenu(d.ToolsMenu , 'label' , '&Import');
mmm = uimenu(mm , 'label' , 'Import from &Table...' , ...
   'callback' , @i_ImportTable);



%------------------------------------------------------------------
function i_ImportTable(varargin);
%------------------------------------------------------------------
d=pr_GetViewData;

if ~d.pD.isempty
    but = questdlg({'Current data set is not empty.',...
            'Fill from table, overwrite or cancel?'},...
        'Data Set Viewer','Fill','Overwrite','Cancel','Fill');
    switch but
    case 'Cancel'
        return
    case 'Fill'
        opt = 'fill_existing';
    case 'Overwrite'
        opt = 'create_new';
    end
else
    opt = 'create_new';
end

%do import table gui
PR=xregGui.PointerRepository;
ID=PR.stackSetPointer(d.Handles.Figure, 'watch');
h = ImportTable(d.nd,'create',d.Handles.Figure,opt,d.pD.info);
uiwait(h);
[ok,oppoint] = ImportTable(d.nd,'return_data');
ImportTable(d.nd,'close');
PR.stackRemovePointer(d.Handles.Figure, ID);

if ok
    % fill/overwrite are done within importtable
        d.pD.info = oppoint;
        d.Exprs.recalc = [0 1 1 0];
        d = view(d.nd,d.CGBH,d);
        pr_SetViewData(d);
end

%-----------------------------------------------------------------------
function cb_ChangeView(varargin)
%-----------------------------------------------------------------------
% Callback from toolbar button
% arguments: d , cardID, top buttons, bottom buttons
% set up view
if nargin==1
    ID = varargin{1};
else
    ID = varargin{3};
end
d = pr_GetViewData;
d = pr_ChangeView(d,ID);
pr_SetViewData(d);

%-----------------------------------------------------------------------
function cb_SetupViewMenu(varargin)
%-----------------------------------------------------------------------
% Set check mark beside current view
d = pr_GetViewData;
page = d.ViewInfo(d.currentviewinfo);
set(d.Handles.ViewMenuItems,'checked','off');
if ~isempty(page.menuitem)
    set(page.menuitem,'checked','on');
end

%-----------------------------------------------------------------------
function cb_SetupToolsMenu(varargin)
%-----------------------------------------------------------------------
% Call appropriate menu setup routine
d = pr_GetViewData;
page = d.ViewInfo(d.currentviewinfo);

% Tools menu enable
set(d.Handles.tm.h,'enable','off');

set(d.Handles.tm.NotLinkBits,'enable','on');
set(d.Handles.tm.LinkBits,'enable','off');
set(page.tlenable,'enable','on');
    
% 25/ix/01 - Get plot menu enabled 
ind = pr_getExprListSelection(d.Handles.ExprList);
if ~isempty(ind) & isequal(d.currentviewinfo, 4)
    set(d.Handles.tm.Plot, 'enable', 'on');
    % 25/ix/01 - Disable Plot -> swap axes for any situation except
    % an existing single plot
    if isequal(length(get(d.Handles.DataDisplay, 'userdata')), 1) & isequal(d.currentviewinfo, 4)
        % Can swap axes on the current plot
        set(d.Handles.plm.SwapAxes, 'enable', 'on');    
    else
        set(d.Handles.plm.SwapAxes, 'enable', 'off');    
    end
end
