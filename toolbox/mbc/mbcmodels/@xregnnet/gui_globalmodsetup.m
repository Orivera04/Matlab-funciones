function [mout,ok]=gui_globalmodsetup(m,action,varargin);
%GUI_GLOBALMODSETUP  GUI for altering xregnnet settings
%
%  [M,OK]=GUI_GLOBALMODSETUP(M) creates a blocking GUI for choosing the
%  xregnnet options and altering its settings.  OK indicates whether the
%  user pressed 'OK' or 'Cancel'.
%
%  LYT = GUI_GLOBALMODSETUP(M,'layout',FIG,P) creates a layout object in
%  the figure FIG which updates the dynamic copy of a model in the pointer
%  P.  Alternatively, if FIG is a handle to a pre-created LYT (using this
%  function) then that layout will be updated with information from the new
%  pointer P.

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.

%  $Revision: 1.5.4.4 $  $Date: 2004/04/04 03:30:28 $

if nargin<2
    action = 'figure';
end

switch lower(action)
    case 'figure'
        [mout,ok] = i_createfig(m);
    case 'layout'
        mout = i_createlyt(varargin{:});
        ok = 1;
    case 'getclasslevel'
        mout=mfilename('class');
    case 'finalise'
        mout = m;
end



function [mout,ok]=i_createfig(m)
scr = get(0,'screensize');
figh = xregdialog('name','Neural Net Model Settings',...
   'position',[scr(3)*.5-125 scr(4)*.5-60 350 335],...
   'resize','off');

p = xregGui.RunTimePointer(m);
p.LinkToObject(figh);
lyt = i_createlyt(figh,p);

% add ok, cancel
okbtn = uicontrol('style','pushbutton',...
   'parent',figh,...
   'string','OK',...
   'callback','set(gcbf,''visible'', ''off'', ''tag'',''ok'');');
cancbtn = uicontrol('style','pushbutton',...
   'parent',figh,...
   'string','Cancel',...
   'callback','set(gcbf,''visible'', ''off'', ''tag'',''cancel'');');

lyt = xreggridbaglayout(figh, ...
    'packstatus', 'off', ...
    'dimension', [2 3], ...
    'rowsizes', [-1 25], ...
    'colsizes', [-1 65 65], ...
    'gapx', 7, ...
    'gapy', 7, ...
    'border', [7 7 7 10], ...
    'mergeblock', {[1 1], [1 3]}, ...
    'elements', {lyt, [], [], okbtn, [], cancbtn});

figh.LayoutManager = lyt;
set(lyt, 'packstatus', 'on', 'visible', 'on');
figh.showDialog(okbtn);

tg = get(figh,'tag');
if strcmp(tg, 'ok')
    mout = p.info;
    ok = 1;
else
    mout = m;
    ok = 0;
end
delete(figh);


function lyt = i_createlyt(figh,p)

if ~isa(figh,'xregcontainer')
    SC = xregGui.SystemColorsDbl;
    m = p.info;
    pUD = xregGui.RunTimePointer;
    pUD.LinkToObject(figh);
    ud.pointer = p;
    ud.figure = figh;

    ud.numLayers = i_createlabelledcontrol(figh, ...
        'Number of hidden layers:', ...
        125, 1, 2, 'int', 1, 1, ...
        {@i_editnumlayers, pUD});
    ud.numNeurons1 = i_createlabelledcontrol(figh, ...
        'Number of neurons in layer 1:', ...
        145, 1, 40, 'int', 1, 1, ...
        {@i_editnumneurons, pUD});
    ud.numNeurons2 = i_createlabelledcontrol(figh, ...
        'Number of neurons in layer 2:', ...
        145, 1, 40, 'int', 1, 1, ...
        {@i_editnumneurons, pUD});

    AlgPop = xreguicontrol('style','popupmenu',...
        'parent',figh,...
        'backgroundcolor', SC.WINDOW_BG,...
        'string',{'TrainGDM','TrainLM','TrainBR'},...
        'callback', {@i_algchange, pUD},...
        'visible','off');
    ud.algPopup = xregGui.labelcontrol('Parent', figh, ...
        'Visible', 'off', ...
        'LabelSizeMode', 'absolute', ...
        'LabelSize', 95, ...
        'ControlSize', 90, ...
        'Gap', 5, ...
        'string', 'Training algorithm:', ...
        'Control', AlgPop);

    AlgOptHead = xreguicontrol('parent',figh,...
        'style','text',...
        'enable', 'inactive', ...
        'string','Algorithm options:',...
        'horizontalalignment','left',...
        'visible','off');

    ud.maxIter = i_createlabelledcontrol(figh, ...
        'Maximum number of iterations:', ...
        150, 100, 50000, 'int', 1, 1, ...
        {@i_editparam, pUD, 'maxiter'});
    ud.learnRate = i_createlabelledcontrol(figh, ...
        'Learning rate:', ...
        180, .001, 1, 'real', .001, .005, ...
        {@i_editparam, pUD, 'learningrate'});
    ud.momentumConst = i_createlabelledcontrol(figh, ...
        'Momentum constant:', ...
        180, .1, .99, 'real', .05, .1, ...
        {@i_editparam, pUD, 'momentumconstant'});
    ud.mu = i_createlabelledcontrol(figh, ...
        'Mu (Marquardt adjustment parameter):', ...
        180, .001, .01, 'real', .0005, .001, ...
        {@i_editparam, pUD, 'mu'});
    ud.decmu = i_createlabelledcontrol(figh, ...
        'Decrease factor for mu:', ...
        180, .05, .5, 'real', .01, .05, ...
        {@i_editparam, pUD, 'mu_dec'});
    ud.incmu = i_createlabelledcontrol(figh, ...
        'Increase factor for mu:', ...
        180, 1, 10, 'real', .5, 1, ...
        {@i_editparam, pUD, 'mu_inc'});

    TopGrid = xreggridbaglayout(figh, ...
        'packstatus', 'off', ...
        'dimension', [3 2], ...
        'rowsizes', [20 20 20], ...
        'colsizes', [20 -1], ...
        'gapy', 5, ...
        'mergeblock', {[1 1], [1 2]}, ...
        'elements', {ud.numLayers, [], [], [], ud.numNeurons1, ud.numNeurons2});
    TopFrame = xregframetitlelayout(figh, ...
        'visible','off', ...
        'title','Network architecture', ...
        'center',TopGrid,...
        'innerborder',[15 10 10 10]);

    % Cards for each algorithm options
    AlgGrid1 = xreggridbaglayout(figh, ...
        'dimension', [2 1], ...
        'rowsizes', [20 20], ...
        'gapy', 5, ...
        'border', [20 0 0 0], ...
        'elements', {ud.learnRate, ud.momentumConst});
    AlgGrid2 = xreggridbaglayout(figh, ...
        'dimension', [1 1], ...
        'rowsizes', 20, ...
        'gapy', 5, ...
        'border', [20 0 0 0], ...
        'elements', {ud.learnRate});
    AlgGrid3 = xreggridbaglayout(figh, ...
        'dimension', [3 1], ...
        'rowsizes', [20 20 20], ...
        'gapy', 5, ...
        'border', [20 0 0 0], ...
        'elements', {ud.mu, ud.decmu, ud.incmu});
    ud.layers = xregcardlayout(figh, ...
        'numcards',3, ...
        'drawonselect','on', ...
        'visible','off');
    attach(ud.layers, AlgGrid1, 1);
    attach(ud.layers, AlgGrid2, 2);
    attach(ud.layers, AlgGrid3, 3);
        
    BottomGrid = xreggridbaglayout(figh, ...
        'dimension', [7 1], ...
        'rowsizes', [20 10 15 5 70 10 20], ...
        'elements', {ud.algPopup, [], AlgOptHead, [], ud.layers, [], ud.maxIter});
    BottomFrame = xregframetitlelayout(figh, ...
        'visible','off', ...
        'title','Training', ...
        'center',BottomGrid,...
        'innerborder',[15 10 10 10]);
    lyt = xreggridbaglayout(figh, ...
        'dimension',[2 1],...
        'rowsizes',[100 -1], ...
        'gapy', 10, ...
        'elements',{TopFrame,BottomFrame}, ...
        'userdata', pUD);
else
    lyt = figh;
    pUD = get(lyt, 'userdata');
    ud = pUD.info;
    ud.pointer = p;
    m = ud.pointer.info;
end

i_fillfields(m,ud);

pUD.info = ud;



function i_fillfields(m,ud)
% Fills the GUI with the correct values from a model

% Layers and neurons settings
nl = get(m,'hiddenlayers');
ud.numLayers.Control.Value = nl;

nns = get(m,'hiddenneurons');
ud.numNeurons1.Control.Value = nns(1);
if nl>1
    ud.numNeurons2.Control.Value = nns(2);
    ud.numNeurons2.Enable = 'on';
else
    ud.numNeurons2.Enable = 'off';
end

% Algorithm and its options
alg = lower(get(m,'algorithm'));
val = strmatch(alg,{'traingdm','trainlm','trainbr'}, 'exact');
set(ud.algPopup.Control,'value',val);
set(ud.layers,'currentcard',val);

ud.maxIter.Control.Value = get(m,'maxiter');
ud.learnRate.Control.Value = get(m,'learningrate');
ud.momentumConst.Control.Value = get(m,'momentumconstant');
ud.mu.Control.Value = get(m,'mu');
ud.decmu.Control.Value = get(m,'mu_dec');
ud.incmu.Control.Value = get(m,'mu_inc');



function hLabel = i_createlabelledcontrol(figh, str, lblsize, ...
    min, max, rule, draginc, clickinc, callback)
% Creates a standard labelled clickedit

ctrl = xregGui.clickedit('parent', figh, ...
    'visible', 'off', ...
    'min', min, ...
    'max', max, ...
    'rule', rule, ...
    'DragIncrement', draginc, ...
    'ClickIncrement', clickinc, ...
    'Callback', callback);
hLabel = xregGui.labelcontrol('Parent', figh, ...
    'visible', 'off', ...
    'LabelSizeMode', 'absolute', ...
    'LabelSize', lblsize, ...
    'ControlSize', 60, ...
    'Gap', 5, ...
    'string', str, ...
    'Control', ctrl);


function i_editnumlayers(src, evt, pUD)
ud = pUD.info;
set(ud.figure, 'pointer', 'watch');
nl = ud.numLayers.Control.Value;
m = ud.pointer.info;
m = set(m,'hiddenlayers',nl);
m.param = init(m.param);
ud.pointer.info=m;
if nl==1
    ud.numNeurons2.Enable = 'off';
else
    vals = get(m,'hiddenneurons');
    ud.numNeurons2.Control.Value = vals(2);
    ud.numNeurons2.Enable = 'on';
end
set(ud.figure, 'pointer', 'arrow');


function i_editnumneurons(src, evt, pUD)
ud = pUD.info;
m = ud.pointer.info;
val = ud.numNeurons1.Control.Value;
if get(m,'hiddenlayers')==2
    val(2) = ud.numNeurons2.Control.Value;
end
m = set(m,'hiddenneurons',val);
m.param = init(m.param);
ud.pointer.info = m;


function i_editparam(src, evt, pUD, ParamName)
ud = pUD.info;
m = ud.pointer.info;
m = set(m, ParamName, src.Value);
ud.pointer.info = m;


function i_algchange(src, evt, pUD)
ud = pUD.info;
m = ud.pointer.info;
val = get(ud.algPopup.Control,'value');
alg = get(ud.algPopup.Control,'string');
alg = alg{val};
m = set(m,'algorithm',alg);
ud.pointer.info = m;
% Make right options card visible
set(ud.layers,'currentcard',val);
