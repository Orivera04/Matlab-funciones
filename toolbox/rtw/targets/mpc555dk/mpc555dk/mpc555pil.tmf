# Copyright 2004 The MathWorks, Inc.
#
# File    : mpc555pil.tmf   $Revision: 1.12.4.7 $
# $Date: 2004/04/29 03:40:10 $
# Abstract:
#	Real-Time Workshop template makefile for building
#	
#	Processor In the Loop (PIL) Target Executable
#	Processor In the Loop (PIL) SFunction
#	Software In the Loop  (SIL) SFunction
#

MAKECMD         = |>MATLAB_ROOT<|/toolbox/rtw/targets/mpc555dk/bin/win32/make.exe
HOST            = PC
BUILD           = yes
SYS_TARGET_FILE = mpc555pil.tlc
BUILD_SUCCESS   = Completed MPC555 make phase
MAKEFILE_FILESEP= /			


MODEL                   = |>MODEL_NAME<|
MODULES                 = |>MODEL_MODULES<|
MAKEFILE                = |>MAKEFILE_NAME<|
MATLAB_ROOT             = |>MATLAB_ROOT<|
S_FUNCTIONS             = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB         = |>S_FUNCTIONS_LIB<|
NUMST                   = |>NUMST<|
NCSTATES                = |>NCSTATES<|
COMPUTER                = |>COMPUTER<|
BUILDARGS               = |>BUILDARGS<|
MULTITASKING            = |>MULTITASKING<|
INTEGER_CODE            = |>INTEGER_CODE<|
MAT_FILE                = |>MAT_FILE<|
ONESTEPFCN              = |>COMBINE_OUTPUT_UPDATE_FCNS<|
TERMFCN                 = |>INCLUDE_MDL_TERMINATE_FCN<|
B_ERTSFCN               = |>GENERATE_ERT_S_FUNCTION<|
MEXEXT                  = |>MEXEXT<|
EXT_MODE                = |>EXT_MODE<|
TMW_EXTMODE_TESTING     = |>TMW_EXTMODE_TESTING<|
MULTI_INSTANCE_CODE     = |>MULTI_INSTANCE_CODE<|
ADD_MDL_NAME_TO_GLOBALS = |>ADD_MDL_NAME_TO_GLOBALS<|
STATIC_RTWLIB           = |>STATIC_RTWLIB<|

# Remove these files from the list of common modules
XTRA_MODULES = $(addprefix $(MODEL), _comm.c _comm_c_api.c _ctrl.c _pil.c _sim.c )
MODULES := $(filter-out $(XTRA_MODULES),$(MODULES))

#-----------------------------------------------------
# Include the make variables defined from TLC file
#-----------------------------------------------------

include $(MODEL)_makevars.mk

include |>MATLAB_ROOT<|/toolbox/rtw/targets/mpc555dk/rt_makevars.mk

#-------------------------------- C Flags --------------------------------------
PROFILE_SRCS = profile.c
ifeq ($(EXECUTION_PROFILING),1)
   PROFILING_OPTS = -DPROFILING_ENABLED
endif
#----------------------------- External mode -----------------------------------

# Determine if we are generating an s-function
SFCN = 0
ifeq ($(GEN_MDLREF_SFCN),1)
  SFCN = 1
endif
ifeq ($(B_ERTSFCN),1)
  SFCN = 1
endif
#------------------------------ Include Path -----------------------------------

MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/rtw/c/ert \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/rtw/c/src \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/common \
	-I$(MATLAB_ROOT)/toolbox/rtw/targets/common/profile/execution \

PIL_INCLUDES = \
   -I$(MPC555DK_ROOT)/pil \
   -I$(MPC555DK_ROOT)/pil/api/CommAPI/include \

# Additional includes 
ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|

INCLUDES += -I. -I.. $(MATLAB_INCLUDES) $(ADD_INCLUDES) $(USER_INCLUDES) \
	$(INSTRUMENT_INCLUDES) $(PIL_INCLUDES)


#-------------------------------- C Flags --------------------------------------

#####################################################################
# Select between RAM and FLASH targets
#####################################################################

# Optimization Options
MPC555_OPTIMIZATION_FLAGS := $(OPT_OPTS)
MPC555_DEBUG_FLAGS := $(DEBUG_OPTS)

# PIL is always a RAM applications
MPC5XX_VARIANT=555
COMPONENT=external_ram
PRODUCT_SUFFIX=_ram.s19

.PHONY : default
default : all 

include $(MPC555DK_ROOT)/drivers/make_plugins/component_manager.mk

# General User Options
OPTS =

# Compiler options, etc: 
CC_OPTS = $(OPTS) $(ANSI_OPTS) $(PROFILING_OPTS)

CPP_REQ_DEFINES = -DMODEL=$(MODEL) -DNUMST=$(NUMST) \
		  -DUNIX -DMT=$(MULTITASKING) -DNCSTATES=$(NCSTATES) \
		  -DMAT_FILE=$(MAT_FILE) -DINTEGER_CODE=$(INTEGER_CODE) \
		  -DONESTEPFCN=$(ONESTEPFCN) -DTERMFCN=$(TERMFCN) \
		  -DMULTI_INSTANCE_CODE=$(MULTI_INSTANCE_CODE)\
		  -DADD_MDL_NAME_TO_GLOBALS=$(ADD_MDL_NAME_TO_GLOBALS)

# The MPC555 does not require STDIO
# CPP_REQ_DEFINES += -DHAVESTDIO 

CFLAGS += $(CC_OPTS) $(CPP_REQ_DEFINES) 

LDFLAGS +=

#-------------------------- Additional Libraries ------------------------------

# Expand any possibly precompiled libraries - eg. RTW, DSP, Add2
#
# We handle the RTW and DSP libraries specially depending on the
# static rtwlib option in the rtwoptions gui. All other libraries
# are assumed to be precompiled with no source available. 
|>START_PRECOMP_LIBRARIES<|
ifneq ($(findstring rtwlib,|>EXPAND_LIBRARY_NAME<|)$(findstring dsp_dyn_rt,|>EXPAND_LIBRARY_NAME<|),)
   # Either rtwlib or dsp_dyn_rt library. We can apply the special STATIC option
   ifeq ($(STATIC_RTWLIB),0)
	  # Build a dynamic library
      LIBS += |>EXPAND_LIBRARY_NAME<|.a
   else
	  # Use the static library
      LIBS += |>EXPAND_LIBRARY_LOCATION<|/|>EXPAND_LIBRARY_NAME<|_5xx_$(MPC555_TOOL_CHAIN).a
   endif
else
  # Force static libraries
  LIBS += |>EXPAND_LIBRARY_LOCATION<|/|>EXPAND_LIBRARY_NAME<|_5xx_$(MPC555_TOOL_CHAIN).a
endif
|>END_PRECOMP_LIBRARIES<| 

PIL_LIB_DIR = $(MPC555DK_ROOT)/pil/BSPs/phyCORE-555/lib
BSP_LIBS = $(addprefix $(PIL_LIB_DIR), /mw_bsp.a /uart_diab.a /commapi.a)

LIBS += $(BSP_LIBS)

# These libraries will be built in the build directory. There
# are no precompiled sources. These library types can be 
# triggered by setting the 
# 	Precompile flag = 0
# in the rtwmakecfg.m files 
|>START_EXPAND_LIBRARIES<|
LIBS += |>EXPAND_LIBRARY_NAME<|.a
|>END_EXPAND_LIBRARIES<|
LIBS += $(S_FUNCTIONS_LIB) $(INSTRUMENT_LIBS)

#----------------------------- Source Files ------------------------------------
ifeq ($(INTEGER_CODE),1)
ADD_SRCS =
else
ADD_SRCS = rt_nonfinite.c
endif

SRCS  = $(MODULES) $(ADD_SRCS) $(S_FUNCTIONS)
PRODUCT            = $(RELATIVE_PATH_TO_ANCHOR)/$(MODEL)$(PRODUCT_SUFFIX)
define BIN_SETTING
    $(build-srec-file)
endef
BUILD_PRODUCT_TYPE = "executable"
TGT_COMM_SRCS      = $(addprefix $(MODEL), _comm.c _comm_c_api.c)
SRCS               += $(MODEL).c $(TGT_COMM_SRCS)
SRC_DEP            =

USER_OBJECTS       = $(addsuffix .o, $(basename $(USER_SRCS)))
LOCAL_USER_OBJECTS = $(notdir $(USER_OBJECTS))

OBJECTS      += $(addsuffix .o, $(basename $(SRCS))) $(LOCAL_USER_OBJECTS)

#--------------------------------- Rules ---------------------------------------

.PHONY : all
all : setup $(PRODUCT) pil sil

$(PRODUCT) : $(OBJECT_TARGETS) $(LIBS) $(SRC_DEP)
	$(BIN_SETTING) 
	@echo \#\#\# $(BUILD_SUCCESS)

vpath %.c  .. \
      $(MATLAB_ROOT)/rtw/c/ert \
      $(MATLAB_ROOT)/rtw/c/src \
      $(MATLAB_ROOT)/rtw/c/src/ext_mode/common \
      $(MATLAB_ROOT)/rtw/c/src/ext_mode/serial \
      $(MATLAB_ROOT)/simulink/src \
      $(MPC555DK_ROOT)/mpc555dk \
      $(MPC555DK_ROOT)/../common/profile/execution \
|>START_EXPAND_RULES<|	|>EXPAND_DIR_NAME<| \
|>END_EXPAND_RULES<|

#------------------------------- Libraries -------------------------------------

|>START_EXPAND_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    $(OBJDIR)/|>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

$(MODULES_|>EXPAND_LIBRARY_NAME<|) : $(MAKEFILE) rtw_proj.tmw

|>EXPAND_LIBRARY_NAME<|.a : $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	$(LIBCMD) $@  $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Created $@"

|>END_EXPAND_LIBRARIES<|

#------------------------------- PRECOMP Libraries -------------------------------------

|>START_PRECOMP_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    $(OBJDIR)/|>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

$(MODULES_|>EXPAND_LIBRARY_NAME<|) : $(MAKEFILE) rtw_proj.tmw

|>EXPAND_LIBRARY_NAME<|.a : $(filter-out $(OBJDIR)/rt_logging.o, $(MODULES_|>EXPAND_LIBRARY_NAME<|) )
	@echo "### Creating $@ "
	$(LIBCMD) $@  $(filter-out $(OBJDIR)/rt_logging.o, $(MODULES_|>EXPAND_LIBRARY_NAME<|) )
	@echo "### Created $@"

|>END_PRECOMP_LIBRARIES<|

#----------------------------- Dependencies ------------------------------------

$(OBJECT_TARGETS) : $(MAKEFILE) rtw_proj.tmw

#--------- Miscellaneous rules to purge, clean and lint (sol2 only) ------------

purge : clean
	@echo "### Deleting the generated source code for $(MODEL)"
	@$(RM) -f $(MODEL).c $(MODEL).h $(MODEL)_types.h \
		$(MODEL)_private.h $(MODEL).rtw $(MODULES) rtw_proj.tmw $(MAKEFILE)

clean :
	@echo "### Deleting the $(PRODUCT)"
	@$(RM) $(PRODUCT)


#------------------------------------------------------------------------------
#--------- Rules to build the PIL and SIL host SFunctions----------------------
#------------------------------------------------------------------------------

# The PIL SFunction is designed to provide an interface between Simulink and
# the embedded target. This is done through a serial communications API. Signals
# are marshelled from Simulink and transferred to the target. There the signals
# are processed and the results returned to Simulink

# The SIL SFunction is a standard SFunction build of the selected subsystem. The
# subsystem has been converted to c and compiled into a DLL which will run within
# the Simulink environment.

# -- Define the PIL and SIL SFunction names ---
SIL_SFUN = $(MODEL)_sf
PIL_SFUN = $(MODEL)_pil_sf

# -- Define the PIL and SIL Sfunction source ---
SIL_SFUN_C = $(SIL_SFUN).c
PIL_SFUN_C = $(PIL_SFUN).c

# -- Define the PIL and SIL MEX targets ---
SIL_SFUN_MEX = ../$(SIL_SFUN).$(MEXEXT)
PIL_SFUN_MEX = ../$(PIL_SFUN).$(MEXEXT)

# -- Rule that is refered to from higher up in the make file ---
.PHONY : pil sil
pil : $(PIL_SFUN_MEX)

sil : $(SIL_SFUN_MEX)
	
# -- Locate the mex compiler and the rtwlib directory ---
MEX = $(MATLAB_ROOT)/bin/win32/mex.bat $(MEX_OPTS_FILE)
RTWLIBDIR = $(MATLAB_ROOT)/rtw/c/lib/win32

# -- Locate the win32 libraries ---
PIL_WIN32_LIB_DIR = $(MPC555DK_ROOT)/pil/BSPs/win32/lib
ifeq ("$(MEX_COMPILER)","vc")
$(PIL_SFUN_MEX) : LIBS = $(PIL_WIN32_LIB_DIR)/CommAPI.lib \
				$(RTWLIBDIR)/rtwlib_ert_$(MEX_COMPILER).lib
else
$(PIL_SFUN_MEX) : LIBS = $(PIL_WIN32_LIB_DIR)/CommAPI_lcc.lib \
				$(RTWLIBDIR)/rtwlib_ert_$(MEX_COMPILER).lib
endif
$(SIL_SFUN_MEX) : LIBS = $(RTWLIBDIR)/rtwlib_ert_$(MEX_COMPILER).lib


# -- SFunction Include Paths ---
SFUN_INCLUDES= -I. -I.. \
			 $(MATLAB_INCLUDES) \
			 $(PIL_INCLUDES) \
          $(ADD_INCLUDES)


# Note that the two files at the start of the following
# two lists of source files must stay at the head of the
# list. The first file in the list will give the name to
# the S-Function that each list of files is targetting

# -- PIL SFunction Source Files ---
PIL_SFUN_CS    = $(PIL_SFUN_C) \
					  $(MODEL)_sim.c \
				     $(MODEL)_ctrl.c \
					  pilMarshall.c \
					  pil_error.c \
                 rt_nonfinite.c \
					  $(MODULES) 

# -- SIL SFunction Source Files ---
SIL_SFUN_CS		= $(SIL_SFUN_C) \
					  $(MODEL).c \
                 rt_nonfinite.c \
					  $(MODULES) 

PIL_SFUN_OBJECTS = $(PIL_SFUN_CS:.c=.obj)
SIL_SFUN_OBJECTS = $(SIL_SFUN_CS:.c=.obj)

# -- Locate the extra sources ---
vpath pilMarshall.c $(MPC555DK_ROOT)/pil 
vpath pil_error.c   $(MPC555DK_ROOT)/pil 

# -- Default mex flags --
MEXFLAGS = -g

# -- Extra mex flags for build the PIL Sfunction object ---
$(PIL_SFUN).obj : MEXFLAGS += -DPIL_S_FUNCTION -DS_FUNCTION_NAME\#$(PIL_SFUN)

# -- Extra mex flags for build of PIL Sfunction objects (used by CCP kernel!) ---
$(PIL_SFUN_OBJECTS) : MEXFLAGS += -DPIL_S_FUNCTION

# -- Extra mex flags for build of SIL Sfunction objects (used by CCP kernel!) ---
$(SIL_SFUN_OBJECTS) : MEXFLAGS += -DSIL_S_FUNCTION

# -- Extra mex flags for building pilMarshall and pil_error ---
pilMarshall.obj pil_error.obj : MEXFLAGS += -DNRT -DERT

# -- Generate PIL_SFUN_C from $(MODEL)_sim.c file
$(PIL_SFUN_C) : $(MODEL)_sf.c
	$(CP) $< $@

# -- Implicit rule for object files ------------
$(PIL_SFUN_OBJECTS) $(SIL_SFUN_OBJECTS) : %.obj : %.c
	@echo -- Building $@ --
	$(MEX) -c $(MEXFLAGS) $(SFUN_INCLUDES) $< 

# -- Build PIL Host SFunction ------------
$(PIL_SFUN_MEX) : $(PIL_SFUN_OBJECTS) 
	@echo -- Building PIL SFunction $@ --
	$(MEX) $(PIL_SFUN_OBJECTS) \
		$(LIBS) \
		-outdir .. 

# -- Build SIL Host SFunction -----------
$(SIL_SFUN_MEX) : $(SIL_SFUN_OBJECTS)
	@echo -- Building SIL SFunction $@ --
	$(MEX) $(MEXFLAGS) \
		$(SIL_SFUN_OBJECTS) \
		$(LIBS) \
		-outdir .. 
