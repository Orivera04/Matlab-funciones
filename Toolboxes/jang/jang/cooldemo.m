list = [...
    '#Linear Perceptron: percepdm', ...
    '#Multilayer Perceptron for Curve Fitting: mlpdm1', ...
    '#Multilayer Perceptron for Surface Fitting: mlpdm2', ...
    '#Radian Basis Function Network for Curve Fitting: rbfndm1', ...
    '#Kohonen Feature Map for 2D Data: kfm', ...
    '#Genetic Algorithm for Finding the Maximum of the "Peaks" function: go_ga', ...
    '#Random Search for Finding the Minimum of the "Peaks" function: go_rand', ...
    '#Simplex Search for Finding the Minimum of the "Peaks" function: go_simp', ...
    '#Simulated Annealing for the Travel Salesperson Problem: tsp', ...
    '#Gradient Descent for the "Peaks" Function: sddemo', ...
    '#Various Descent Directions for the "Peaks" Function: descent', ...
    '#Taylor Series Approximation and Polynomial Fitting: taylor', ...
    '#Printed Character Recognition (Fuzzy Logic Toolbox required): fuzpcr', ...
    '#Fuzzy C-means Clustering (Fuzzy Logic Toolbox required): fcmdemo', ...
    '#Trucker Backer-Upper (Fuzzy Logic Toolbox required): sltbu', ...
    '#Ball and Beam System (Fuzzy Logic Toolbox required): slbb', ...
    '#Single Inverted Pendulum (Fuzzy Logic Toolbox required): slcp', ...
    '#Parallel Inverted Pendulum (Fuzzy Logic Toolbox required): slcpp1', ...
    '#Inverse Kinematics of Two-link Robot Arm (Fuzzy Logic Toolbox required): invkine', ...
    '#Ball Juggling (Fuzzy Logic Toolbox required): juggle'];

[labels, callbacks] = list2cb(list);
choices('Cool Demos', ...
	'Cool Demos "Neuro-Fuzzy and Soft Computing"', ...
	labels, callbacks, 1);
