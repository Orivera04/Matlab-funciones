function vsim(varargin) 
% VSIM  Launch ModelSim for use with MATLAB
%  VSIM(Property,Value,...) - Launches the ModelSim simulator (named vsim)
%    and configures it for use with MATLAB and Simulink.  VSIM creates a 
%    startup (or '.do') file that adds the following Tcl commands to ModelSim:
%       vsimmatlab- link to MATLB from Modelsim.
%       vsimulink - link to Simulink from Modelsim.
%    These new Modelsim commands are used in place of the Modelsim "vsim"
%    command.
%
% Properties
% 'tclstart' - Allows the user to specify Tcl command(s) to be executed 
%        during ModelSim startup.  These command can be either a string 
%        or a cell array of strings, with each entry a Tcl command.  These 
%        command are appended to the startup file. 
% 'vsimdir' - ModelSim executable directory (location of vsim). If this
%         property is not given, the first vsim on the system path 
%         will be used.  If the vsim program does not reside on the system 
%         path, this property is required.  Use this property to launch
%         different versions of Modelsim.
% 'startupfile' - VSIM creates a Tcl file ('.do' file) that is applied 
%        during ModelSim startup.  By default, the generated file is created
%        in a temporary location.  With this property, the user can specify 
%        the name (and location) of the generated '.do' file.  (If a file 
%        already exists, it will be overwritten).  The generated file can be 
%        applied from a command window to launch Modelsim:
%        vsim -gui -do "specified dofile"
% 'socketsimulink' - portnumber that will be used for default to Simulink
%        With this option, the specified option will get applied to all
%        invocations of vsimulink in ModelSim.
% 
%
% Examples:
%  cd VHDLproj  % change directory to ModelSim project directory
%  vsim('tclstart','vsimulink work.parse','socketsimulink','4449');
%   
% See also !, HDLDAEMON, SETUPMODELSIM

%  Copyright 2003-2004 The MathWorks, Inc.
%  $Revision: 1.13.4.2 $ $Date: 2004/04/08 20:54:58 $

if(mod(nargin,2)~=0)
    error(sprintf(['vsim: Missing property name or value. ''vsimdir'', ''tclstart''\n',...
    '''startupfile'',''socketsimulink'' must be specified with a value.']));
end

vsimdirectory = [];
vsimoptions = [];
vsimcmdfile = [];
vsimsocket = [];
startGui = true;

% Get property / value pairs from argument lis
for i = 1:2:nargin,
    prop = lower(varargin{i});
    val  = varargin{i+1};    
    % Argument checking
    cmdinx = strmatch(prop,{'vsimdir','tclstart','startupfile','socketsimulink','startgui'});
    if length(cmdinx) ~= 1,
        if ischar(prop),
            error(sprintf(['vsim: Unrecognized property : ''' prop '''\n',...
                'Valid properties are ''vsimdir'', ''tclstart'',',...
                '''startupfile'',and ''socketsimulink''']));
        else
            error(sprintf(['vsim: Missing property name or value. ''vsimdir'', ''tclstart''\n',...
                '''startupfile'',''socketsimulink'' must be specified with a value.']));     
        end
    end
    switch cmdinx
        case 1  % "vsimdir"
            if ischar(val),
                vsimdirectory = val;
            else
                error(sprintf(['vsim: Value specified with ''vsimdir'' is not valid. Value must be a string \n',...
                               'that specifies the path to an installed ModelSim executable.']));
            end
        case 2   % "tclstart"
            if ischar(val) || iscell(val),
                vsimoptions = val;
            else
                error(sprintf(['vsim: Value specified with ''tclstart'' is not valid. Value must be a Tcl command string \n'...
                               'or an array of Tcl command strings that is to execute during ModelSim startup.']));
            end 
        case 3 % "startupfile"
            if ischar(val),
                vsimcmdfile = val;
            else
                error('vsim: Value specified with (''startupfile'') is not valid. Value must be a string that specifies a valid pathname for the file into which the ModelSim startup commands are to be saved');
            end
        case 4  % "socketsimulink"
            if ischar(val),
                vsimsocket = val;
            elseif isnumeric(val),
                vsimsocket = num2str(val);
            else
                error('vsim: Value specified with (''socketsimulink'') is not valid. Value must be a string or number that specifies a valid TCP socket port number or service name.'); 
            end    
        case 5 % "startgui"
            if ischar(val),
                if strcmp( val, 'yes' )
                    startGui = true;
                elseif strcmp( val, 'no' )
                    startGui = false;
                else
                    error('VSIM startup file (''startgui'') must be either ''yes'' or ''no''');
                end
            else
                error('VSIM startup file (''startgui'') must be either ''yes'' or ''no''');
            end
               otherwise
            error(['vsim: Invalid property: ' prop]);
    end    
end
% compute location of the library file used to link Modelsim and MATLAB
if strcmp(computer,'SOL2'),
    arch = 'sol2';
    soext = 'so';
elseif strcmp(computer,'GLNX86'),
    arch = 'glnx86';
    soext = 'so';
elseif strcmp(computer,'PCWIN'),
    arch = 'win32';
    soext = 'dll';
else
    error('Platform not supported by Link for ModelSim');
end
solibrarydir = fullfile(matlabroot,'toolbox','modelsim',arch);
solibrarydir = strrep(solibrarydir,'\','/');
% check for a vsim directory path, or use default
if isempty(vsimcmdfile),
    vsimcmdfile = tempname;
end

fidcmd = fopen(vsimcmdfile,'w');
if fidcmd == -1,
    error(['vsim: Could not open command file ' vsimcmdfile ' Use ''startupfile'' to define a valid command file.']);
else
   %% disp(sprintf('Opened file:  %s', vsimcmdfile)); 
end
if isempty(vsimsocket),
    simtclcmd =  [ 'proc vsimulink {args} {',char(10),...
            '  set mathlabPath "' solibrarydir '"',char(10),...
            '  set foreign [list simlinkserver [file join $mathlabPath simulinklink.' soext ']]',char(10),...
            '  if {[catch {lsearch -exact $args -socket} idx]==0  && $idx >= 0} {',char(10),...
            '    set socket [lindex $args [expr {$idx + 1}]]',char(10),...
            '    lappend foreign \; -socket $socket',char(10),...
            '    set args [lreplace $args $idx [expr {$idx + 1}]]',char(10),...
            '  }',char(10),...
            '  set foreign [join $foreign];', char(10),...
            '  set args [linsert $args 0 vsim]', char(10),...
            '  lappend args -foreign $foreign', char(10),...
            '  uplevel 1 $args', char(10),...
            '}',...
        ];
else % We have a default socket...
    simtclcmd =  [ 'proc vsimulink {args} {',char(10),...
        '  set mathlabPath "' solibrarydir '"',char(10),...
        '  set socket "' vsimsocket '"',char(10),...
        '  set foreign [list simlinkserver [file join $mathlabPath simulinklink.' soext ']]',char(10),...
        '  if {![catch {lsearch -exact $args -socket} idx] && $idx >= 0} {',char(10),...
        '    set socket [lindex $args [expr {$idx + 1}]]',char(10),...
        '    set args [lreplace $args $idx [expr {$idx + 1}]]',char(10),...
        '  }',char(10),...
        '  lappend foreign \; -socket $socket',char(10),...
        '  set foreign [join $foreign];',char(10),...
        '  set args [linsert $args 0 vsim]',char(10),...
        '  lappend args -foreign $foreign',char(10),...
        '  uplevel 1 $args',char(10),...
        '}',...
        ];
end
mattclcmd = [ 'proc vsimmatlab {args} {',char(10),...
    '  set mathlabPath "' solibrarydir '"',char(10),...
    '  set foreign [list matlabclient [file join $mathlabPath matlablink.' soext ']]',char(10),...
    '  lappend foreign \;',char(10),...
    '  set foreign [join $foreign];',char(10),...
    '  set args [linsert $args 0 vsim]',char(10),...
    '  lappend args -foreign $foreign',char(10),...
    '  uplevel 1 $args',char(10),...
    '}',...
    ];

wraptclcmd = ['proc wrapverilog {args} {', char(10),...
    char(10),...
    '  set nargs [llength $args]', char(10),...
    '  if {($nargs != 1) && ($nargs != 2)} {', char(10),...
    '      error "** Error: (wrapverilog) Wrong number of arguments; ', char(10),...
    'Usage is wrapverilog modulename or wrapverilog -nocompile modulename"', char(10),...
    '  }', char(10),...
    '  ', char(10),...
    '  if {([lindex $args 0] == "-nocompile") && ($nargs == 2)} then {', char(10),...
    '      set modulename [lindex $args 1]', char(10),...
    '      set compileflag 0', char(10),...
    '  } elseif {$nargs == 1} {', char(10),...
    '      set modulename [lindex $args 0]', char(10),...
    '      set compileflag 1', char(10),...
    '  } else {', char(10),...
    '      error "** Error: (wrapverilog) Wrong arguments; ', char(10),...
    'Usage is wrapverilog modulename or wrapverilog -nocompile modulename"', char(10),...
    '  }', char(10),...
    char(10),...
    '  set component [vgencomp $modulename]', char(10),...
    char(10),...
    '  if {[string first "** Error:" $component] != -1} {', char(10),...
    '      error "** Error: (wrapverilog) ModelSim vgencomp cannot find module $modulename"', char(10),...
    '  }', char(10),...
    char(10),...
    '  set modulename [string tolower $modulename]', char(10),...
    char(10),...
    '  set fname "[string tolower $modulename]_wrap.vhd"', char(10),...
    char(10),...
    '  set fid [open $fname w]', char(10),...
    char(10),...
    '  if {$fid == -1} {', char(10),...
    '      error "** Error: (wrapverilog) Cannot open file $fname"', char(10),...
    '  }', char(10),...
    char(10),...
    '  puts $fid "----------------------------------------------------------------"', char(10),...
    '  puts $fid "-- Module $modulename VHDL Wrapper"', char(10),...
    '  puts $fid "--"', char(10),...
    '  puts $fid "-- Generated by The MathWorks wrapverilog tcl command"', char(10),...
    '  puts $fid "--"', char(10),...
    '  puts $fid "-- Generated on: [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]"', char(10),...
    '  puts $fid "--"', char(10),...
    '  puts $fid "----------------------------------------------------------------"', char(10),...
    '  puts $fid "LIBRARY IEEE;"', char(10),...
    '  puts $fid "  USE IEEE.std_logic_1164.all;"', char(10),...
    '  puts $fid ""', char(10),...
    '  puts -nonewline $fid "ENTITY $modulename"', char(10),...
    '  puts $fid "_wrap IS"', char(10),...
    char(10),...
    '  set firsteol [string first \n $component]', char(10),...
    '  set lasteol  [string last  \n $component]', char(10),...
    '  # Output generics and port map', char(10),...
    '  puts $fid [string range $component $firsteol $lasteol]', char(10),...
    char(10),...
    '  puts -nonewline $fid "END $modulename"', char(10),...
    '  puts $fid "_wrap;"', char(10),...
    '  puts $fid ""', char(10),...
    '  puts -nonewline $fid "ARCHITECTURE rtl OF $modulename"', char(10),...
    '  puts $fid "_wrap IS"', char(10),...
    '  puts $fid ""', char(10),...
    '  puts $fid "$component"', char(10),...
    '  puts $fid ""', char(10),...
    '  puts $fid "FOR ALL : $modulename"', char(10),...
    '  puts -nonewline $fid "  USE ENTITY work.$modulename"', char(10),...
    '  puts $fid "(ignored);"', char(10),...
    '  puts $fid ""', char(10),...
    '  puts $fid "BEGIN"', char(10),...
    '  ', char(10),...
    '  set portbeg [string first "port(" $component]', char(10),...
    '  if {$portbeg != -1} {', char(10),...
    '      puts $fid "  u_$modulename: $modulename"', char(10),...
    '      puts $fid "    PORT MAP ("', char(10),...
    '      set portmap [string range $component $portbeg $lasteol]', char(10),...
    '      set firsteol [string first \n $portmap]', char(10),...
    '      set portmap [string trimleft [string range $portmap $firsteol end]]', char(10),...
    char(10),...
    '      set portnameend [string wordend $portmap 0]', char(10),...
    '      set portname [string range $portmap 0 $portnameend]', char(10),...
    '      puts -nonewline $fid "      $portname => $portname"', char(10),...
    '      set firsteol [string first \n $portmap]	  ', char(10),...
    '      set portmap [string trimleft [string range $portmap $firsteol end]]', char(10),...
    '      set errcnt 0', char(10),...
    '      while {([string length $portmap] != 0) &&', char(10),...
    '	     ([string index $portmap 0] != ")")} {', char(10),...
    '	  puts $fid ","', char(10),...
    '	  set portnameend [string wordend $portmap 0]', char(10),...
    '	  set portname [string range $portmap 0 $portnameend]', char(10),...
    '	  puts -nonewline $fid "      $portname => $portname"', char(10),...
    '	  set firsteol [string first \n $portmap]	  ', char(10),...
    '	  set portmap [string trimleft [string range $portmap $firsteol end]]', char(10),...
    '	  incr errcnt', char(10),...
    '	  if {$errcnt == 4096} {', char(10),...
    '	      error "** Error: (wrapverilog) Failure trying to parse more than 4096 ports for $modulename"', char(10),...
    '	  }', char(10),...
    '      }	  ', char(10),...
    '      puts $fid ""', char(10),...
    '      puts $fid "    );"', char(10),...
    '  }', char(10),...
    '  puts $fid ""', char(10),...
    '  puts $fid "END rtl;"', char(10),...
    '  ', char(10),...
    '  close $fid', char(10),...
    char(10),...
    '  if {$compileflag} {', char(10),...
    '      uplevel 1 vcom $fname', char(10),...
    '  }', char(10),...
    '}', char(10)...
    ];


fprintf(fidcmd,'%s\n%s\n%s\n',simtclcmd,mattclcmd,wraptclcmd);   

% Append user's options to the dofile...
if iscell(vsimoptions),
    for optstr = vsimoptions,
        if ischar(optstr{:}),
            fprintf(fidcmd,'%s\n',optstr{:});
        else
            error('vsim: String specified with ''tclstart'' contains invalid ModelSim command');
        end
    end
elseif ischar(vsimoptions),
    fprintf(fidcmd,'%s\n',vsimoptions);
end
fclose(fidcmd);

if strcmp(computer,'SOL2') || strcmp(computer,'GLNX86'),
    if ~isempty(vsimdirectory),
        vsimcmd = fullfile(vsimdirectory,'vsim');
    else
        vsimcmd = 'vsim';
    end
    checkvsimcmd = ['which ' vsimcmd];
    [stat,result] = unix(checkvsimcmd);
    if stat ~= 0,
        disp('Failed to launch Modelsim!');
        disp('If Modelsim is not on the system path, ');
        disp(' please use parameter ''vsimdir'' to specify its location');
        error(result);
    end
    vsimcmd = [vsimcmd ' -gui -do ' vsimcmdfile ' &'];
    if startGui
    % disp(sprintf('Calling:  %s',vsimcmd)); (Diagnostic ONLY)
        [stat,result] = unix(vsimcmd);
        if stat ~= 0,
            disp('Failed to launch Modelsim!');
            disp('If Modelsim is not on the system path, ');
            disp(' please use parameter ''vsimdir'' to specify its location');
            error(result);
        end
    end
    
elseif strcmp(computer,'PCWIN'),
    if ~isempty(vsimdirectory),
        vsimcmd = fullfile(vsimdirectory,'modelsim');
    else
        vsimcmd = 'modelsim';
    end
    % ModelSim 5.8 requires unix file separators in command arguments
    % see g190498
    vsimcmdfile = strrep(vsimcmdfile,'\','/');    
    vsimcmd = [vsimcmd ' -do ' vsimcmdfile];
    if startGui
    % disp(sprintf('Calling:  %s',vsimcmd)); (Diagnostic ONLY)
        [stat,result] = dos(vsimcmd);
        if ~isempty(result),
            disp('Failed to launch Modelsim!');
            disp('If Modelsim is not on the system path, ');
            disp(' please use parameter ''vsimdir'' to specify its location');
            error(result);
        end
    end
else
    error('vsim: Platform not supported by Link for ModelSim');
end



%[EOF] vsim.m
