function [dout,ret]=gui_optimset(des,action,varargin)
% GUI_OPTIMSET   GUI for altering optimisation settings
%
%  [D, RET]=GUI_OPTIMSET(D) creates a modal GUI for altering
%  optimisation settings and stopping criteria.
%  LYT='GUI_OPTIMSET(D,'layout',FIG,P) creates a layout object
%  in the specified figure which dynamically updates the pointer
%  P.  If instead of FIG a previously created layout is specified
%  then the displayed values are changed to reflect and update
%  the new pointer P.
%

%  Copyright 2000-2004 The MathWorks, Inc. and Ford Global Technologies, Inc.


%   $Revision: 1.5.2.2 $  $Date: 2004/02/09 07:03:42 $


if nargin<2
   action='figure';
end


switch action
case 'figure'
   [dout,ret] = i_createfig(des);
case 'layout'
   dout=i_createlyt(varargin{:});
case 'enable'
   i_doenable(varargin{:});
case 'finalise'
   % no finalise actions for this gui
   dout=des;
   ret=1;
end
return




function [dout,ret]=i_createfig(des);

scsz=get(0,'screensize');
figh=figure('toolbar','none',...
   'menubar','none',...
   'numbertitle','off',...
   'name','Optimization Settings',...
   'doublebuffer','on',...
   'color',get(0,'defaultuicontrolbackgroundcolor'),...
   'resize','off',...
   'tag','OptimSettings',...
   'closerequestfcn','set(gcbf,''tag'',''cancel'');',...
   'position',[scsz(3)*.5-100 scsz(4)*.5-200 335 365],...
   'visible','off');

p=xregpointer(des);
lyt=i_createlyt(figh,p);

% ok and cancel
okbtn = uicontrol('parent',figh,...
   'string','OK',...
   'style','pushbutton',...
   'callback','set(gcbf,''tag'',''ok'');',...
   'position',[0 0 65 25]);
cancbtn = uicontrol('parent',figh,...
   'string','Cancel',...
   'style','pushbutton',...
   'callback','set(gcbf,''tag'',''cancel'');',...
   'position',[0 0 65 25]);
flw=xregflowlayout(figh,'orientation','right/bottom',...
   'elements',{cancbtn,okbtn},...
   'gap',7,...
   'border',[0 10 -7 10]);
brd=xregborderlayout(figh,'center',lyt,'south',flw,...
   'innerborder',[10 45 10 10],...
   'container',figh,...
   'packstatus','on');
set(lyt,'visible','on');
set(figh,'visible','on');
drawnow;
set(figh,'windowstyle','modal');
waitfor(figh,'tag');
tg=get(figh,'tag');
switch lower(tg)
case 'ok'
   dout=p.info;
   ret=1;
case 'cancel'
   dout=des;
   ret=0;
end
freeptr(p);
delete(figh);
return





function lyt=i_createlyt(figh,p,varargin);

if ~isa(figh,'xregcontainer')   
   txt(2) = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','Augmentation method:',...
      'visible','off');
   txt(3) = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','Deletion method:',...
      'visible','off');
   txt(4) = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','p - number of points to alter per iteration:',...
      'visible','off');
   txt(5) = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','Delta - value below which the change in optimality criterion triggers an increment in q:',...
      'visible','off');
   txt(6) = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','q - number of consecutive non-productive iterations which trigger a stop:',...
      'visible','off');
   txt(7) = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','Maximum number of iterations to perform:',...
      'visible','off');
   
   ud.augpop=xreguicontrol('parent',figh,...
      'style','popupmenu',...
      'backgroundcolor','w',...
      'string',{'Random','Optimal'},...
      'visible','off');
   ud.delpop=xreguicontrol('parent',figh,...
      'style','popupmenu',...
      'backgroundcolor','w',...
      'string',{'Random','Optimal'},...
      'visible','off');
   ud.pclick=xregGui.clickedit(figh,...
      'min',1,...
      'dragincrement',1,...
      'clickincrement',1,...
      'rule','int',...
      'visible','off');
   ud.deltaclick=xregGui.clickedit(figh,...
      'min',0,...
      'dragincrementmode','multiply',...
      'clickincrement',10,...
      'clickincrementmode','log',...
      'visible','off');
   ud.qclick=xregGui.clickedit(figh,...
      'min',1,...
      'dragincrement',1,...
      'clickincrement',1,...
      'rule','int',...
      'visible','off');
   ud.iterclick=xregGui.clickedit(figh,...
      'min',1,...
      'dragincrement',1,...
      'clickincrement',1,...
      'rule','int',...
      'visible','off');
   ud.spacefilled = xreguicontrol('parent',figh,...
      'style','text',...
      'horizontalalignment','left',...
      'string','here I am',...
      'visible','off');
   
   ud.pointer=p;
   ud.figure=figh;
   ud.callback='';
   if nargin>2
      for n=1:2:length(varargin)
         switch lower(varargin{n})
         case 'callback'
            ud.callback=varargin{n+1};
         end
      end
   end

   ptr=xregGui.RunTimePointer;
   % set up callbacks
   set(ud.augpop,'callback',{@i_optset,ptr});
   set(ud.delpop,'callback',{@i_optset,ptr});
   set(ud.pclick,'callback',{@i_optset,ptr});
   set(ud.deltaclick,'callback',{@i_stopset,ptr});
   set(ud.qclick,'callback',{@i_stopset,ptr});
   set(ud.iterclick,'callback',{@i_stopset,ptr});
   
   % update data in objects
   i_setvalues(ud,p);
   
   % do layouts
   grd=xreggridbaglayout(figh,'packstatus','off',...
      'dimension',[11,2],...
      'gapx',5,...
      'rowsizes',[3 15 2 5 3 15 2 5 3 15 2],...
      'colratios',[20 9],...
      'mergeblock',{[1 3],[2 2]},...
      'mergeblock',{[5 7],[2 2]},...
      'mergeblock',{[9 11],[2 2]},...
      'elements',{...
         [],ud.augpop;...
         txt(2),[];...
         [],[];...
         [],[];...
         [],ud.delpop;...
         txt(3),[];...
         [],[];...
         [],[];...
         [],ud.pclick;...
         txt(4),[];...
         [],[];...
      });
   frm1=xregframetitlelayout(figh,...
      'title','Optimization Parameters',...
      'center',grd,...
      'innerborder',[15 10 10 10],...
      'border',[0 5 0 0],...
      'visible','off');
   grd=xreggridbaglayout(figh,'packstatus','off',...
      'dimension',[15,2],...
      'gapx',5,...
      'rowsizes',[5 20 5 5 5 20 5 5 3 15 2 10 2 10 -1],...
      'colratios',[20 9],...
      'mergeblock',{[1 3],[1 1]},...
      'mergeblock',{[5 7],[1 1]},...
      'mergeblock',{[9 11],[2 2]},...
      'mergeblock',{[13 13],[1 2]},...
      'mergeblock',{[15 15],[1 2]},...
      'elements',{...
         txt(5),[];...
         [],ud.deltaclick;...
         [],[];...
         [],[];...
         txt(6),[];...
         [],ud.qclick;...
         [],[];...
         [],[];...
         [],ud.iterclick;...
         txt(7),[];...
         [],[];...
         [],[];...
         xregGui.dividerline('parent',figh,'visible','off'),[];...
         [],[];...
         ud.spacefilled,[];...
      }); 

   frm2=xregframetitlelayout(figh,...
      'title', 'Stopping Criteria',...
      'center',grd,...
      'innerborder',[15 10 10 10],...
      'border',[0 0 0 5],...
      'visible','off');
   lyt=xreggridlayout(figh,...
      'correctalg','on',...
      'dimension',[2 1],...
      'rowratios',[3 5],...
      'elements',{frm1,frm2},...
      'userdata',ptr);
   ptr.info=ud;
else
   % layout already exists: update
   udh=get(figh,'userdata');
   ud=udh.info;
   ud.pointer=p;
   if nargin>2
      for n=1:2:length(varargin)
         switch lower(varargin{n})
         case 'callback'
            ud.callback=varargin{n+1};
         end
      end
   end
   udh.info=ud;
   i_setvalues(ud,p);
   lyt=figh;
end

return




function i_setvalues(ud,p)
% setup the values in the controls from the pointer p
des=p.info;
[pn,aug,del] = getoptimal(des);
[d,q,maxiter] = getstop(des);
pmax=ncand(des);
if ~allowreps(des)
   pmax=ncand(des)-npoints(des);
   pmax=max(1,pmax);
end

val_a=find(strcmp(lower(aug),{'random','optimal'}));
set(ud.augpop,'value',val_a);
val=find(strcmp(lower(del),{'random','optimal'}));
set(ud.delpop,'value',val);
set(ud.pclick,'value',pn,'max',pmax);
set(ud.qclick,'value',q);
set(ud.deltaclick,'value',d);
set(ud.iterclick,'value',maxiter);


if val_a>1
   str='The current configuration will visit the entire candidate set during the optimal augmentation.';
else
   [pv,pc]=pointsvisited(p.info);   
   str=['The current configuration will visit a maximum of ' int2str(pv) ' unique candidate points,',...
         ' which corresponds to ' sprintf('%5.2f',pc) ' percent of the candidate set.'];
end

set(ud.spacefilled,'string',str);

return



function i_optset(src,evt,udh)
% change optimise options
ud=udh.info;

val_a=get(ud.augpop,'value');
str={'random','optimal'};
aug=str{val_a};
val=get(ud.delpop,'value');
str={'random','optimal'};
del=str{val};
pn=get(ud.pclick,'value');
p=ud.pointer;
p.info = setoptimal(p.info,pn,aug,del);

if val_a>1 & val>1
   set(ud.qclick,'enable','off');
else
   set(ud.qclick,'enable','on');
end
if val_a==2
   str='The current configuration will visit the entire candidate set during the optimal augmentation.';
else
   [pv,pc]=pointsvisited(p.info);   
   str=['The current configuration will visit a maximum of ' int2str(pv) ' unique candidate points,',...
         ' which corresponds to ' sprintf('%5.2f',pc) ' percent of the candidate set.'];
end
set(ud.spacefilled,'string',str);
xregcallback(ud.callback,[],[]);
return



function i_stopset(src,evt,udh)
% change stopping criteria
ud=udh.info;

delta=get(ud.deltaclick,'value');
q=get(ud.qclick,'value');
maxiter=get(ud.iterclick,'value');
p=ud.pointer;
p.info = setstop(p.info,delta,q,maxiter);

% update data string at bottom
val_a=get(ud.augpop,'value');
if val_a==2
   str='The current configuration will visit the entire candidate set during the optimal augmentation.';
else
   [pv,pc]=pointsvisited(p.info);   
   str=['The current configuration will visit a maximum of ' int2str(pv) ' unique candidate points,',...
         ' which corresponds to ' sprintf('%5.2f',pc) ' percent of the candidate set.'];
end
set(ud.spacefilled,'string',str);
xregcallback(ud.callback,[],[]);
return




function i_doenable(lyt,en)
if strcmp(en, 'off')
   set(lyt,'enable','off');
else
   udh=get(lyt,'userdata');
   ud=udh.info;
   set(lyt,'enable','on');
   if get(ud.augpop,'value')==2 & get(ud.delpop,'value')==2 
      set(ud.qclick,'enable','off');
   end
end
return






