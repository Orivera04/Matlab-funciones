From: <Guardado por Microsoft Internet Explorer 5>
Subject: 
Date: Thu, 26 Jul 2007 13:19:02 -0600
MIME-Version: 1.0
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mathworks.com/matlabcentral/files/10743/uibutton.m
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2869

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3D"MSHTML 6.00.2900.2912" name=3DGENERATOR></HEAD>
<BODY><PRE>function [hout,ax_out] =3D uibutton(varargin)
%uibutton: Create pushbutton with more flexible labeling than uicontrol.
% Usage:
%   uibutton accepts all the same arguments as uicontrol except for the
%   following property changes:
%
%     Property      Values
%     -----------   =
------------------------------------------------------
%     Style         'pushbutton', 'togglebutton' or 'text', default =3D
%                   'pushbutton'.
%     String        Same as for text() including cell array of strings =
and
%                   TeX or LaTeX interpretation.
%     Interpreter   'tex', 'latex' or 'none', default =3D default for =
text()
%
% Syntax:
%   handle =3D uibutton('PropertyName',PropertyValue,...)
%   handle =3D uibutton(parent,'PropertyName',PropertyValue,...)
%   [text_obj,axes_handle] =3D uibutton('Style','text',...
%       'PropertyName',PropertyValue,...)
%
% uibutton creates a temporary axes and text object containing the text =
to
% be displayed, captures the axes as an image, deletes the axes and then
% displays the image on the uicontrol.  The handle to the uicontrol is
% returned.  If you pass in a handle to an existing uicontol as the =
first
% argument then uibutton will use that uicontrol and not create a new =
one.
%
% If the Style is set to 'text' then the axes object is not deleted and =
the
% text object handle is returned (as well as the handle to the axes in a
% second output argument).
%
% See also UICONTROL.

% Version: 1.6, 20 April 2006
% Author:  Douglas M. Schwarz
% Email:   dmschwarz=3Dieee*org, dmschwarz=3Durgrad*rochester*edu
% Real_email =3D regexprep(Email,{'=3D','*'},{'@','.'})


% Detect if first argument is a uicontrol handle.
keep_handle =3D false;
if nargin &gt; 0
	h =3D varargin{1};
	if isscalar(h) &amp;&amp; ishandle(h) &amp;&amp; =
strcmp(get(h,'Type'),'uicontrol')
		keep_handle =3D true;
		varargin(1) =3D [];
	end
end

% Parse arguments looking for 'Interpreter' property.  If found, note =
its
% value and then remove it from where it was found.
interp_value =3D get(0,'DefaultTextInterpreter');
arg =3D 1;
remove =3D [];
while arg &lt;=3D length(varargin)
	v =3D varargin{arg};
	if isstruct(v)
		fn =3D fieldnames(v);
		for i =3D 1:length(fn)
			if strncmpi(fn{i},'interpreter',length(fn{i}))
				interp_value =3D v.(fn{i});
				v =3D rmfield(v,fn{i});
			end
		end
		varargin{arg} =3D v;
		arg =3D arg + 1;
	elseif ischar(v)
		if strncmpi(v,'interpreter',length(v))
			interp_value =3D varargin{arg+1};
			remove =3D [remove,arg,arg+1];
		end
		arg =3D arg + 2;
	elseif arg =3D=3D 1 &amp;&amp; isscalar(v) &amp;&amp; ishandle(v) =
&amp;&amp; ...
			any(strcmp(get(h,'Type'),{'figure','uipanel'}))
		arg =3D arg + 1;
	else
		error('Invalid property or uicontrol parent.')
	end
end
varargin(remove) =3D [];

% Create uicontrol, get its properties then hide it.
if keep_handle
	set(h,varargin{:})
else
	h =3D uicontrol(varargin{:});
end
s =3D get(h);
if ~any(strcmp(s.Style,{'pushbutton','togglebutton','text'}))
	delete(h)
	error('''Style'' must be pushbutton, togglebutton or text.')
end
set(h,'Visible','off')

% Create axes.
parent =3D get(h,'Parent');
ax =3D axes('Parent',parent,...
	'Units',s.Units,...
	'Position',s.Position,...
	'XTick',[],'YTick',[],...
	'XColor',s.BackgroundColor,...
	'YColor',s.BackgroundColor,...
	'Box','on',...
	'Color',s.BackgroundColor);
% Adjust size of axes for best appearance.
set(ax,'Units','pixels')
pos =3D round(get(ax,'Position'));
if strcmp(s.Style,'text')
	set(ax,'Position',pos + [0 1 -1 -1])
else
	set(ax,'Position',pos + [4 4 -8 -8])
end
switch s.HorizontalAlignment
	case 'left'
		x =3D 0.0;
	case 'center'
		x =3D 0.5;
	case 'right'
		x =3D 1;
end
% Create text object.
text_obj =3D text('Parent',ax,...
	'Position',[x,0.5],...
	'String',s.String,...
	'Interpreter',interp_value,...
	'HorizontalAlignment',s.HorizontalAlignment,...
	'VerticalAlignment','middle',...
	'FontName',s.FontName,...
	'FontSize',s.FontSize,...
	'FontAngle',s.FontAngle,...
	'FontWeight',s.FontWeight,...
	'Color',s.ForegroundColor);

% If we are creating something that looks like a text uicontrol then =
we're
% all done and we return the text object and axes handles rather than a
% uicontrol handle.
if strcmp(s.Style,'text')
	delete(h)
	if nargout
		hout =3D text_obj;
		ax_out =3D ax;
	end
	return
end

% Capture image of axes and then delete the axes.
frame =3D getframe(ax);
delete(ax)

% Build RGB image, set background pixels to NaN and put it in 'CData' =
for
% the uicontrol.
if isempty(frame.colormap)
	rgb =3D frame.cdata;
else
	rgb =3D reshape(frame.colormap(frame.cdata,:),[pos([4,3]),3]);
end
size_rgb =3D size(rgb);
rgb =3D double(rgb)/255;
back =3D repmat(permute(s.BackgroundColor,[1 3 2]),size_rgb(1:2));
isback =3D all(rgb =3D=3D back,3);
rgb(repmat(isback,[1 1 3])) =3D NaN;
set(h,'CData',rgb,'String','','Visible',s.Visible)

% Assign output argument if necessary.
if nargout
	hout =3D h;
end
</PRE></BODY></HTML>
